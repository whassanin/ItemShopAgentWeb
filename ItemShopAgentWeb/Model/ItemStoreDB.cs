//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.33440
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ItemStoreDBNameSpace
{
    using System;
    using System.IO;
    using System.Data;
    using System.Data.Sql;
    using System.Data.SqlClient;
    using System.Net.Mail;
    
    
    public class ItemStoreDB
    {
        
        public class EShopAgent
        {
            
            public ACLMessage ReceiveMessage(ACLMessage message)
            {
                ACLMessage outMessage = new ACLMessage();
                if ((message.Receiver == "InteractionAgent"))
                {
                    InteractionAgent _InteractionAgent = new InteractionAgent();
                    AgentLog.WriteToFile(message, "InteractionAgent has received the message...");
                    outMessage = _InteractionAgent.Execute(message);
                }
                if ((message.Receiver == "ProfileMonitorAgent"))
                {
                    ProfileMonitorAgent _ProfileMonitorAgent = new ProfileMonitorAgent();
                    AgentLog.WriteToFile(message, "ProfileMonitorAgent has received the message...");
                    outMessage = _ProfileMonitorAgent.Execute(message);
                }
                if ((message.Receiver == "CustomerContactAgent"))
                {
                    CustomerContactAgent _CustomerContactAgent = new CustomerContactAgent();
                    AgentLog.WriteToFile(message, "CustomerContactAgent has received the message...");
                    outMessage = _CustomerContactAgent.Execute(message);
                }
                if ((message.Receiver == "DeliveryAgent"))
                {
                    DeliveryAgent _DeliveryAgent = new DeliveryAgent();
                    AgentLog.WriteToFile(message, "DeliveryAgent has received the message...");
                    outMessage = _DeliveryAgent.Execute(message);
                }
                if ((message.Receiver == "LostGoodAgent"))
                {
                    LostGoodAgent _LostGoodAgent = new LostGoodAgent();
                    AgentLog.WriteToFile(message, "LostGoodAgent has received the message...");
                    outMessage = _LostGoodAgent.Execute(message);
                }
                if ((message.Receiver == "SearchAgent"))
                {
                    SearchAgent _SearchAgent = new SearchAgent();
                    AgentLog.WriteToFile(message, "SearchAgent has received the message...");
                    outMessage = _SearchAgent.Execute(message);
                }
                if ((message.Receiver == "PurchaseAgent"))
                {
                    PurchaseAgent _PurchaseAgent = new PurchaseAgent();
                    AgentLog.WriteToFile(message, "PurchaseAgent has received the message...");
                    outMessage = _PurchaseAgent.Execute(message);
                }
                if ((message.Receiver == "CompetitiveAgent"))
                {
                    CompetitiveAgent _CompetitiveAgent = new CompetitiveAgent();
                    AgentLog.WriteToFile(message, "CompetitiveAgent has received the message...");
                    outMessage = _CompetitiveAgent.Execute(message);
                }
                if ((message.Receiver == "CatalogueAgent"))
                {
                    CatalogueAgent _CatalogueAgent = new CatalogueAgent();
                    AgentLog.WriteToFile(message, "CatalogueAgent has received the message...");
                    outMessage = _CatalogueAgent.Execute(message);
                }
                if ((message.Receiver == "StockAgent"))
                {
                    StockAgent _StockAgent = new StockAgent();
                    AgentLog.WriteToFile(message, "StockAgent has received the message...");
                    outMessage = _StockAgent.Execute(message);
                }
                return outMessage;
            }
            
            public class InteractionAgent
            {
                
                private InteractOnlineGoal _InteractOnlineGoal = new InteractOnlineGoal();
                
                public ACLMessage Execute(ACLMessage message)
                {
                    return _InteractOnlineGoal.InteractOnlineGoalExecute(message);
                }
                
                public class InteractOnlineGoal
                {
                    
                    private object _Success;
                    
                    private UpdateNumOfVisitsInBookCapability _UpdateNumOfVisitsInBookCapability = new UpdateNumOfVisitsInBookCapability();
                    
                    private SelectMaxIdCustomer_SearchCapability _SelectMaxIdCustomer_SearchCapability = new SelectMaxIdCustomer_SearchCapability();
                    
                    private InsertCustomer_SearchCapability _InsertCustomer_SearchCapability = new InsertCustomer_SearchCapability();
                    
                    private UpdateCustomer_SearchCapability _UpdateCustomer_SearchCapability = new UpdateCustomer_SearchCapability();
                    
                    private DeleteCustomer_SearchCapability _DeleteCustomer_SearchCapability = new DeleteCustomer_SearchCapability();
                    
                    private SelectCustomer_SearchByCustomerIdCapability _SelectCustomer_SearchByCustomerIdCapability = new SelectCustomer_SearchByCustomerIdCapability();
                    
                    private SelectMaxIdCustomerRateCapability _SelectMaxIdCustomerRateCapability = new SelectMaxIdCustomerRateCapability();
                    
                    private InsertCustomerRateCapability _InsertCustomerRateCapability = new InsertCustomerRateCapability();
                    
                    private UpdateCustomerRateCapability _UpdateCustomerRateCapability = new UpdateCustomerRateCapability();
                    
                    private DeleteCustomerRateCapability _DeleteCustomerRateCapability = new DeleteCustomerRateCapability();
                    
                    private SelectCustomerRateByBookIdCapability _SelectCustomerRateByBookIdCapability = new SelectCustomerRateByBookIdCapability();
                    
                    private SelectCustomerRateByCustomerIdCapability _SelectCustomerRateByCustomerIdCapability = new SelectCustomerRateByCustomerIdCapability();
                    
                    private SelectMaxIdCustomerReviewCapability _SelectMaxIdCustomerReviewCapability = new SelectMaxIdCustomerReviewCapability();
                    
                    private InsertCustomerReviewCapability _InsertCustomerReviewCapability = new InsertCustomerReviewCapability();
                    
                    private UpdateCustomerReviewCapability _UpdateCustomerReviewCapability = new UpdateCustomerReviewCapability();
                    
                    private DeleteCustomerReviewCapability _DeleteCustomerReviewCapability = new DeleteCustomerReviewCapability();
                    
                    private SelectCustomerReviewByBookIdCapability _SelectCustomerReviewByBookIdCapability = new SelectCustomerReviewByBookIdCapability();
                    
                    private SelectCustomerReviewByCustomerIdCapability _SelectCustomerReviewByCustomerIdCapability = new SelectCustomerReviewByCustomerIdCapability();
                    
                    private SelectMaxIdCustomerWishListCapability _SelectMaxIdCustomerWishListCapability = new SelectMaxIdCustomerWishListCapability();
                    
                    private InsertCustomerWishListCapability _InsertCustomerWishListCapability = new InsertCustomerWishListCapability();
                    
                    private UpdateCustomerWishListCapability _UpdateCustomerWishListCapability = new UpdateCustomerWishListCapability();
                    
                    private DeleteCustomerWishListCapability _DeleteCustomerWishListCapability = new DeleteCustomerWishListCapability();
                    
                    private SelectCustomerWishListByBookIdCapability _SelectCustomerWishListByBookIdCapability = new SelectCustomerWishListByBookIdCapability();
                    
                    private SelectCustomerWishListByCustomerIdCapability _SelectCustomerWishListByCustomerIdCapability = new SelectCustomerWishListByCustomerIdCapability();
                    
                    public ACLMessage InteractOnlineGoalExecute(ACLMessage message)
                    {
                        if ((message.Content == "UpdateNumOfVisitsInBookCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _UpdateNumOfVisitsInBookCapability.UpdateNumOfVisitsInBookCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectMaxIdCustomer_SearchCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _SelectMaxIdCustomer_SearchCapability.SelectMaxIdCustomer_SearchCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertCustomer_SearchCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _InsertCustomer_SearchCapability.InsertCustomer_SearchCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateCustomer_SearchCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _UpdateCustomer_SearchCapability.UpdateCustomer_SearchCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteCustomer_SearchCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _DeleteCustomer_SearchCapability.DeleteCustomer_SearchCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectCustomer_SearchByCustomerIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _SelectCustomer_SearchByCustomerIdCapability.SelectCustomer_SearchByCustomerIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectMaxIdCustomerRateCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _SelectMaxIdCustomerRateCapability.SelectMaxIdCustomerRateCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertCustomerRateCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _InsertCustomerRateCapability.InsertCustomerRateCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateCustomerRateCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _UpdateCustomerRateCapability.UpdateCustomerRateCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteCustomerRateCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _DeleteCustomerRateCapability.DeleteCustomerRateCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectCustomerRateByBookIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _SelectCustomerRateByBookIdCapability.SelectCustomerRateByBookIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectCustomerRateByCustomerIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _SelectCustomerRateByCustomerIdCapability.SelectCustomerRateByCustomerIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectMaxIdCustomerReviewCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _SelectMaxIdCustomerReviewCapability.SelectMaxIdCustomerReviewCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertCustomerReviewCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _InsertCustomerReviewCapability.InsertCustomerReviewCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateCustomerReviewCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _UpdateCustomerReviewCapability.UpdateCustomerReviewCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteCustomerReviewCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _DeleteCustomerReviewCapability.DeleteCustomerReviewCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectCustomerReviewByBookIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _SelectCustomerReviewByBookIdCapability.SelectCustomerReviewByBookIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectCustomerReviewByCustomerIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _SelectCustomerReviewByCustomerIdCapability.SelectCustomerReviewByCustomerIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectMaxIdCustomerWishListCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _SelectMaxIdCustomerWishListCapability.SelectMaxIdCustomerWishListCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertCustomerWishListCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _InsertCustomerWishListCapability.InsertCustomerWishListCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateCustomerWishListCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _UpdateCustomerWishListCapability.UpdateCustomerWishListCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteCustomerWishListCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _DeleteCustomerWishListCapability.DeleteCustomerWishListCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectCustomerWishListByBookIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _SelectCustomerWishListByBookIdCapability.SelectCustomerWishListByBookIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectCustomerWishListByCustomerIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "InteractionAgent";
                            _Success = _SelectCustomerWishListByCustomerIdCapability.SelectCustomerWishListByCustomerIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        return null;
                    }
                    
                    public class UpdateNumOfVisitsInBookCapability
                    {
                        
                        private int _Id;
                        
                        private int _NumOfVisits;
                        
                        private bool UpdateNumOfVisitsInBookBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["NumOfVisits"] != null))
                                {
                                    if ((message.ContentArgumentsIn["NumOfVisits"].ToString() != String.Empty))
                                    {
                                        this._NumOfVisits = int.Parse(message.ContentArgumentsIn["NumOfVisits"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._NumOfVisits = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateNumOfVisitsInBookEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._NumOfVisits < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateNumOfVisitsInBookPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateNumOfVisitsInBook", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter NumOfVisitsprm = cmd.Parameters.Add("NumOfVisits", SqlDbType.Int);
                                NumOfVisitsprm.Direction = ParameterDirection.Input;
                                NumOfVisitsprm.Value = this._NumOfVisits;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateNumOfVisitsInBookCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateNumOfVisitsInBookBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateNumOfVisitsInBookEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateNumOfVisitsInBookPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectMaxIdCustomer_SearchCapability
                    {
                        
                        private object SelectMaxIdCustomer_SearchBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdCustomer_Search", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdCustomer_SearchEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdCustomer_SearchPlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdCustomer_SearchCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdCustomer_SearchBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdCustomer_SearchEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdCustomer_SearchPlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertCustomer_SearchCapability
                    {
                        
                        private int _Id;
                        
                        private string _Data;
                        
                        private int _CustomerId;
                        
                        private bool InsertCustomer_SearchBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["Data"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Data"].ToString() != String.Empty))
                                    {
                                        this._Data = message.ContentArgumentsIn["Data"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Data = "";
                                }
                                if ((message.ContentArgumentsIn["CustomerId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                    {
                                        this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CustomerId = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertCustomer_SearchEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("LetterOrDigit", this._Data) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._CustomerId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertCustomer_SearchPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertCustomer_Search", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter Dataprm = cmd.Parameters.Add("Data", SqlDbType.Char, 60);
                                Dataprm.Direction = ParameterDirection.Input;
                                Dataprm.Value = this._Data;
                                if ((this._CustomerId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("CustomerId", SqlDbType.Int);
                                    CustomerIdprm.Direction = ParameterDirection.Input;
                                    CustomerIdprm.Value = this._CustomerId;
                                }
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertCustomer_SearchCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertCustomer_SearchBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertCustomer_SearchEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertCustomer_SearchPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateCustomer_SearchCapability
                    {
                        
                        private int _Id;
                        
                        private string _Data;
                        
                        private int _CustomerId;
                        
                        private bool UpdateCustomer_SearchBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["Data"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Data"].ToString() != String.Empty))
                                    {
                                        this._Data = message.ContentArgumentsIn["Data"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Data = "";
                                }
                                if ((message.ContentArgumentsIn["CustomerId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                    {
                                        this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CustomerId = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateCustomer_SearchEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("LetterOrDigit", this._Data) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._CustomerId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateCustomer_SearchPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateCustomer_Search", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter Dataprm = cmd.Parameters.Add("Data", SqlDbType.Char, 60);
                                Dataprm.Direction = ParameterDirection.Input;
                                Dataprm.Value = this._Data;
                                if ((this._CustomerId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("CustomerId", SqlDbType.Int);
                                    CustomerIdprm.Direction = ParameterDirection.Input;
                                    CustomerIdprm.Value = this._CustomerId;
                                }
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateCustomer_SearchCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateCustomer_SearchBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateCustomer_SearchEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateCustomer_SearchPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteCustomer_SearchCapability
                    {
                        
                        private int _Id;
                        
                        private bool DeleteCustomer_SearchBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteCustomer_SearchEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteCustomer_SearchPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteCustomer_Search", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteCustomer_SearchCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteCustomer_SearchBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteCustomer_SearchEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteCustomer_SearchPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectCustomer_SearchByCustomerIdCapability
                    {
                        
                        private int _CustomerId;
                        
                        private int _SelectCustomer_SearchByCustomerIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectCustomer_SearchByCustomerIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                {
                                    this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._CustomerId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectCustomer_SearchByCustomerIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCustomer_SearchByCustomerId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("@CustomerId", SqlDbType.Int);
                                CustomerIdprm.Direction = ParameterDirection.Input;
                                CustomerIdprm.Value = this._CustomerId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectCustomer_SearchByCustomerIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCustomer_SearchByCustomerId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("@CustomerId", SqlDbType.Int);
                                CustomerIdprm.Direction = ParameterDirection.Input;
                                CustomerIdprm.Value = this._CustomerId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectCustomer_SearchByCustomerIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectCustomer_SearchByCustomerIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectCustomer_SearchByCustomerIdCount = this.SelectCustomer_SearchByCustomerIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectCustomer_SearchByCustomerIdCount", this._SelectCustomer_SearchByCustomerIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectCustomer_SearchByCustomerIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectMaxIdCustomerRateCapability
                    {
                        
                        private object SelectMaxIdCustomerRateBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdCustomerRate", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdCustomerRateEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdCustomerRatePlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdCustomerRateCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdCustomerRateBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdCustomerRateEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdCustomerRatePlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertCustomerRateCapability
                    {
                        
                        private int _Id;
                        
                        private int _BookId;
                        
                        private int _CustomerId;
                        
                        private double _Rate;
                        
                        private bool InsertCustomerRateBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["BookId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["BookId"].ToString() != String.Empty))
                                    {
                                        this._BookId = int.Parse(message.ContentArgumentsIn["BookId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._BookId = 0;
                                }
                                if ((message.ContentArgumentsIn["CustomerId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                    {
                                        this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CustomerId = 0;
                                }
                                if ((message.ContentArgumentsIn["Rate"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Rate"].ToString() != String.Empty))
                                    {
                                        this._Rate = float.Parse(message.ContentArgumentsIn["Rate"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Rate = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertCustomerRateEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._BookId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._CustomerId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Rate < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertCustomerRatePlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertCustomerRate", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                if ((this._BookId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("BookId", SqlDbType.Int);
                                    BookIdprm.Direction = ParameterDirection.Input;
                                    BookIdprm.Value = this._BookId;
                                }
                                if ((this._CustomerId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("CustomerId", SqlDbType.Int);
                                    CustomerIdprm.Direction = ParameterDirection.Input;
                                    CustomerIdprm.Value = this._CustomerId;
                                }
                                System.Data.SqlClient.SqlParameter Rateprm = cmd.Parameters.Add("Rate", SqlDbType.Float);
                                Rateprm.Direction = ParameterDirection.Input;
                                Rateprm.Value = this._Rate;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertCustomerRateCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertCustomerRateBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertCustomerRateEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertCustomerRatePlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateCustomerRateCapability
                    {
                        
                        private int _Id;
                        
                        private int _BookId;
                        
                        private int _CustomerId;
                        
                        private double _Rate;
                        
                        private bool UpdateCustomerRateBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["BookId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["BookId"].ToString() != String.Empty))
                                    {
                                        this._BookId = int.Parse(message.ContentArgumentsIn["BookId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._BookId = 0;
                                }
                                if ((message.ContentArgumentsIn["CustomerId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                    {
                                        this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CustomerId = 0;
                                }
                                if ((message.ContentArgumentsIn["Rate"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Rate"].ToString() != String.Empty))
                                    {
                                        this._Rate = float.Parse(message.ContentArgumentsIn["Rate"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Rate = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateCustomerRateEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._BookId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._CustomerId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Rate < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateCustomerRatePlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateCustomerRate", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                if ((this._BookId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("BookId", SqlDbType.Int);
                                    BookIdprm.Direction = ParameterDirection.Input;
                                    BookIdprm.Value = this._BookId;
                                }
                                if ((this._CustomerId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("CustomerId", SqlDbType.Int);
                                    CustomerIdprm.Direction = ParameterDirection.Input;
                                    CustomerIdprm.Value = this._CustomerId;
                                }
                                System.Data.SqlClient.SqlParameter Rateprm = cmd.Parameters.Add("Rate", SqlDbType.Float);
                                Rateprm.Direction = ParameterDirection.Input;
                                Rateprm.Value = this._Rate;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateCustomerRateCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateCustomerRateBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateCustomerRateEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateCustomerRatePlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteCustomerRateCapability
                    {
                        
                        private int _Id;
                        
                        private bool DeleteCustomerRateBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteCustomerRateEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteCustomerRatePlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteCustomerRate", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteCustomerRateCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteCustomerRateBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteCustomerRateEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteCustomerRatePlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectCustomerRateByBookIdCapability
                    {
                        
                        private int _BookId;
                        
                        private int _SelectCustomerRateByBookIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectCustomerRateByBookIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["BookId"].ToString() != String.Empty))
                                {
                                    this._BookId = int.Parse(message.ContentArgumentsIn["BookId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._BookId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectCustomerRateByBookIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCustomerRateByBookId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("@BookId", SqlDbType.Int);
                                BookIdprm.Direction = ParameterDirection.Input;
                                BookIdprm.Value = this._BookId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectCustomerRateByBookIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCustomerRateByBookId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("@BookId", SqlDbType.Int);
                                BookIdprm.Direction = ParameterDirection.Input;
                                BookIdprm.Value = this._BookId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectCustomerRateByBookIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectCustomerRateByBookIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectCustomerRateByBookIdCount = this.SelectCustomerRateByBookIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectCustomerRateByBookIdCount", this._SelectCustomerRateByBookIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectCustomerRateByBookIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectCustomerRateByCustomerIdCapability
                    {
                        
                        private int _CustomerId;
                        
                        private int _SelectCustomerRateByCustomerIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectCustomerRateByCustomerIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                {
                                    this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._CustomerId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectCustomerRateByCustomerIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCustomerRateByCustomerId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("@CustomerId", SqlDbType.Int);
                                CustomerIdprm.Direction = ParameterDirection.Input;
                                CustomerIdprm.Value = this._CustomerId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectCustomerRateByCustomerIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCustomerRateByCustomerId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("@CustomerId", SqlDbType.Int);
                                CustomerIdprm.Direction = ParameterDirection.Input;
                                CustomerIdprm.Value = this._CustomerId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectCustomerRateByCustomerIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectCustomerRateByCustomerIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectCustomerRateByCustomerIdCount = this.SelectCustomerRateByCustomerIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectCustomerRateByCustomerIdCount", this._SelectCustomerRateByCustomerIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectCustomerRateByCustomerIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectMaxIdCustomerReviewCapability
                    {
                        
                        private object SelectMaxIdCustomerReviewBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdCustomerReview", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdCustomerReviewEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdCustomerReviewPlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdCustomerReviewCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdCustomerReviewBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdCustomerReviewEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdCustomerReviewPlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertCustomerReviewCapability
                    {
                        
                        private int _Id;
                        
                        private int _BookId;
                        
                        private int _CustomerId;
                        
                        private string _Review;
                        
                        private bool InsertCustomerReviewBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["BookId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["BookId"].ToString() != String.Empty))
                                    {
                                        this._BookId = int.Parse(message.ContentArgumentsIn["BookId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._BookId = 0;
                                }
                                if ((message.ContentArgumentsIn["CustomerId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                    {
                                        this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CustomerId = 0;
                                }
                                if ((message.ContentArgumentsIn["Review"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Review"].ToString() != String.Empty))
                                    {
                                        this._Review = message.ContentArgumentsIn["Review"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Review = "";
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertCustomerReviewEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._BookId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._CustomerId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("LetterOrDigit", this._Review) == false))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertCustomerReviewPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertCustomerReview", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                if ((this._BookId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("BookId", SqlDbType.Int);
                                    BookIdprm.Direction = ParameterDirection.Input;
                                    BookIdprm.Value = this._BookId;
                                }
                                if ((this._CustomerId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("CustomerId", SqlDbType.Int);
                                    CustomerIdprm.Direction = ParameterDirection.Input;
                                    CustomerIdprm.Value = this._CustomerId;
                                }
                                System.Data.SqlClient.SqlParameter Reviewprm = cmd.Parameters.Add("Review", SqlDbType.Char, 500);
                                Reviewprm.Direction = ParameterDirection.Input;
                                Reviewprm.Value = this._Review;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertCustomerReviewCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertCustomerReviewBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertCustomerReviewEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertCustomerReviewPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateCustomerReviewCapability
                    {
                        
                        private int _Id;
                        
                        private int _BookId;
                        
                        private int _CustomerId;
                        
                        private string _Review;
                        
                        private bool UpdateCustomerReviewBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["BookId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["BookId"].ToString() != String.Empty))
                                    {
                                        this._BookId = int.Parse(message.ContentArgumentsIn["BookId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._BookId = 0;
                                }
                                if ((message.ContentArgumentsIn["CustomerId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                    {
                                        this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CustomerId = 0;
                                }
                                if ((message.ContentArgumentsIn["Review"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Review"].ToString() != String.Empty))
                                    {
                                        this._Review = message.ContentArgumentsIn["Review"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Review = "";
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateCustomerReviewEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._BookId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._CustomerId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("LetterOrDigit", this._Review) == false))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateCustomerReviewPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateCustomerReview", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                if ((this._BookId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("BookId", SqlDbType.Int);
                                    BookIdprm.Direction = ParameterDirection.Input;
                                    BookIdprm.Value = this._BookId;
                                }
                                if ((this._CustomerId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("CustomerId", SqlDbType.Int);
                                    CustomerIdprm.Direction = ParameterDirection.Input;
                                    CustomerIdprm.Value = this._CustomerId;
                                }
                                System.Data.SqlClient.SqlParameter Reviewprm = cmd.Parameters.Add("Review", SqlDbType.Char, 500);
                                Reviewprm.Direction = ParameterDirection.Input;
                                Reviewprm.Value = this._Review;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateCustomerReviewCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateCustomerReviewBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateCustomerReviewEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateCustomerReviewPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteCustomerReviewCapability
                    {
                        
                        private int _Id;
                        
                        private bool DeleteCustomerReviewBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteCustomerReviewEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteCustomerReviewPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteCustomerReview", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteCustomerReviewCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteCustomerReviewBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteCustomerReviewEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteCustomerReviewPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectCustomerReviewByBookIdCapability
                    {
                        
                        private int _BookId;
                        
                        private int _SelectCustomerReviewByBookIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectCustomerReviewByBookIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["BookId"].ToString() != String.Empty))
                                {
                                    this._BookId = int.Parse(message.ContentArgumentsIn["BookId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._BookId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectCustomerReviewByBookIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCustomerReviewByBookId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("@BookId", SqlDbType.Int);
                                BookIdprm.Direction = ParameterDirection.Input;
                                BookIdprm.Value = this._BookId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectCustomerReviewByBookIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCustomerReviewByBookId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("@BookId", SqlDbType.Int);
                                BookIdprm.Direction = ParameterDirection.Input;
                                BookIdprm.Value = this._BookId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectCustomerReviewByBookIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectCustomerReviewByBookIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectCustomerReviewByBookIdCount = this.SelectCustomerReviewByBookIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectCustomerReviewByBookIdCount", this._SelectCustomerReviewByBookIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectCustomerReviewByBookIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectCustomerReviewByCustomerIdCapability
                    {
                        
                        private int _CustomerId;
                        
                        private int _SelectCustomerReviewByCustomerIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectCustomerReviewByCustomerIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                {
                                    this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._CustomerId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectCustomerReviewByCustomerIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCustomerReviewByCustomerId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("@CustomerId", SqlDbType.Int);
                                CustomerIdprm.Direction = ParameterDirection.Input;
                                CustomerIdprm.Value = this._CustomerId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectCustomerReviewByCustomerIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCustomerReviewByCustomerId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("@CustomerId", SqlDbType.Int);
                                CustomerIdprm.Direction = ParameterDirection.Input;
                                CustomerIdprm.Value = this._CustomerId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectCustomerReviewByCustomerIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectCustomerReviewByCustomerIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectCustomerReviewByCustomerIdCount = this.SelectCustomerReviewByCustomerIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectCustomerReviewByCustomerIdCount", this._SelectCustomerReviewByCustomerIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectCustomerReviewByCustomerIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectMaxIdCustomerWishListCapability
                    {
                        
                        private object SelectMaxIdCustomerWishListBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdCustomerWishList", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdCustomerWishListEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdCustomerWishListPlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdCustomerWishListCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdCustomerWishListBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdCustomerWishListEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdCustomerWishListPlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertCustomerWishListCapability
                    {
                        
                        private int _Id;
                        
                        private int _BookId;
                        
                        private int _CustomerId;
                        
                        private bool InsertCustomerWishListBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["BookId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["BookId"].ToString() != String.Empty))
                                    {
                                        this._BookId = int.Parse(message.ContentArgumentsIn["BookId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._BookId = 0;
                                }
                                if ((message.ContentArgumentsIn["CustomerId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                    {
                                        this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CustomerId = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertCustomerWishListEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._BookId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._CustomerId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertCustomerWishListPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertCustomerWishList", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                if ((this._BookId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("BookId", SqlDbType.Int);
                                    BookIdprm.Direction = ParameterDirection.Input;
                                    BookIdprm.Value = this._BookId;
                                }
                                if ((this._CustomerId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("CustomerId", SqlDbType.Int);
                                    CustomerIdprm.Direction = ParameterDirection.Input;
                                    CustomerIdprm.Value = this._CustomerId;
                                }
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertCustomerWishListCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertCustomerWishListBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertCustomerWishListEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertCustomerWishListPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateCustomerWishListCapability
                    {
                        
                        private int _Id;
                        
                        private int _BookId;
                        
                        private int _CustomerId;
                        
                        private bool UpdateCustomerWishListBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["BookId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["BookId"].ToString() != String.Empty))
                                    {
                                        this._BookId = int.Parse(message.ContentArgumentsIn["BookId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._BookId = 0;
                                }
                                if ((message.ContentArgumentsIn["CustomerId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                    {
                                        this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CustomerId = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateCustomerWishListEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._BookId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._CustomerId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateCustomerWishListPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateCustomerWishList", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                if ((this._BookId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("BookId", SqlDbType.Int);
                                    BookIdprm.Direction = ParameterDirection.Input;
                                    BookIdprm.Value = this._BookId;
                                }
                                if ((this._CustomerId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("CustomerId", SqlDbType.Int);
                                    CustomerIdprm.Direction = ParameterDirection.Input;
                                    CustomerIdprm.Value = this._CustomerId;
                                }
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateCustomerWishListCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateCustomerWishListBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateCustomerWishListEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateCustomerWishListPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteCustomerWishListCapability
                    {
                        
                        private int _Id;
                        
                        private bool DeleteCustomerWishListBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteCustomerWishListEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteCustomerWishListPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteCustomerWishList", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteCustomerWishListCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteCustomerWishListBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteCustomerWishListEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteCustomerWishListPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectCustomerWishListByBookIdCapability
                    {
                        
                        private int _BookId;
                        
                        private int _SelectCustomerWishListByBookIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectCustomerWishListByBookIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["BookId"].ToString() != String.Empty))
                                {
                                    this._BookId = int.Parse(message.ContentArgumentsIn["BookId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._BookId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectCustomerWishListByBookIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCustomerWishListByBookId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("@BookId", SqlDbType.Int);
                                BookIdprm.Direction = ParameterDirection.Input;
                                BookIdprm.Value = this._BookId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectCustomerWishListByBookIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCustomerWishListByBookId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("@BookId", SqlDbType.Int);
                                BookIdprm.Direction = ParameterDirection.Input;
                                BookIdprm.Value = this._BookId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectCustomerWishListByBookIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectCustomerWishListByBookIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectCustomerWishListByBookIdCount = this.SelectCustomerWishListByBookIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectCustomerWishListByBookIdCount", this._SelectCustomerWishListByBookIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectCustomerWishListByBookIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectCustomerWishListByCustomerIdCapability
                    {
                        
                        private int _CustomerId;
                        
                        private int _SelectCustomerWishListByCustomerIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectCustomerWishListByCustomerIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                {
                                    this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._CustomerId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectCustomerWishListByCustomerIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCustomerWishListByCustomerId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("@CustomerId", SqlDbType.Int);
                                CustomerIdprm.Direction = ParameterDirection.Input;
                                CustomerIdprm.Value = this._CustomerId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectCustomerWishListByCustomerIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCustomerWishListByCustomerId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("@CustomerId", SqlDbType.Int);
                                CustomerIdprm.Direction = ParameterDirection.Input;
                                CustomerIdprm.Value = this._CustomerId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectCustomerWishListByCustomerIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectCustomerWishListByCustomerIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectCustomerWishListByCustomerIdCount = this.SelectCustomerWishListByCustomerIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectCustomerWishListByCustomerIdCount", this._SelectCustomerWishListByCustomerIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectCustomerWishListByCustomerIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                }
            }
            
            public class ProfileMonitorAgent
            {
                
                private ObserveProfileGoal _ObserveProfileGoal = new ObserveProfileGoal();
                
                public ACLMessage Execute(ACLMessage message)
                {
                    return _ObserveProfileGoal.ObserveProfileGoalExecute(message);
                }
                
                public class ObserveProfileGoal
                {
                    
                    private object _Success;
                    
                    private SelectMaxIdCustomerCapability _SelectMaxIdCustomerCapability = new SelectMaxIdCustomerCapability();
                    
                    private InsertCustomerCapability _InsertCustomerCapability = new InsertCustomerCapability();
                    
                    private UpdateCustomerCapability _UpdateCustomerCapability = new UpdateCustomerCapability();
                    
                    private DeleteCustomerCapability _DeleteCustomerCapability = new DeleteCustomerCapability();
                    
                    private SelectAllCustomerCapability _SelectAllCustomerCapability = new SelectAllCustomerCapability();
                    
                    private SelectCustomerByUsernameAndPasswordCapability _SelectCustomerByUsernameAndPasswordCapability = new SelectCustomerByUsernameAndPasswordCapability();
                    
                    private SelectMaxIdCustomer_AddressCapability _SelectMaxIdCustomer_AddressCapability = new SelectMaxIdCustomer_AddressCapability();
                    
                    private InsertCustomer_AddressCapability _InsertCustomer_AddressCapability = new InsertCustomer_AddressCapability();
                    
                    private UpdateCustomer_AddressCapability _UpdateCustomer_AddressCapability = new UpdateCustomer_AddressCapability();
                    
                    private DeleteCustomer_AddressCapability _DeleteCustomer_AddressCapability = new DeleteCustomer_AddressCapability();
                    
                    private SelectCustomer_AddressByCustomerIdCapability _SelectCustomer_AddressByCustomerIdCapability = new SelectCustomer_AddressByCustomerIdCapability();
                    
                    private SelectMaxIdCustomer_CreditCardCapability _SelectMaxIdCustomer_CreditCardCapability = new SelectMaxIdCustomer_CreditCardCapability();
                    
                    private InsertCustomer_CreditCardCapability _InsertCustomer_CreditCardCapability = new InsertCustomer_CreditCardCapability();
                    
                    private UpdateCustomer_CreditCardCapability _UpdateCustomer_CreditCardCapability = new UpdateCustomer_CreditCardCapability();
                    
                    private DeleteCustomer_CreditCardCapability _DeleteCustomer_CreditCardCapability = new DeleteCustomer_CreditCardCapability();
                    
                    private SelectCustomer_CreditCardByCustomerIdCapability _SelectCustomer_CreditCardByCustomerIdCapability = new SelectCustomer_CreditCardByCustomerIdCapability();
                    
                    private SelectMaxIdCustomer_PhoneCapability _SelectMaxIdCustomer_PhoneCapability = new SelectMaxIdCustomer_PhoneCapability();
                    
                    private InsertCustomer_PhoneCapability _InsertCustomer_PhoneCapability = new InsertCustomer_PhoneCapability();
                    
                    private UpdateCustomer_PhoneCapability _UpdateCustomer_PhoneCapability = new UpdateCustomer_PhoneCapability();
                    
                    private DeleteCustomer_PhoneCapability _DeleteCustomer_PhoneCapability = new DeleteCustomer_PhoneCapability();
                    
                    private SelectCustomer_PhoneByCustomerIdCapability _SelectCustomer_PhoneByCustomerIdCapability = new SelectCustomer_PhoneByCustomerIdCapability();
                    
                    private SelectMaxIdSupplierCapability _SelectMaxIdSupplierCapability = new SelectMaxIdSupplierCapability();
                    
                    private InsertSupplierCapability _InsertSupplierCapability = new InsertSupplierCapability();
                    
                    private UpdateSupplierCapability _UpdateSupplierCapability = new UpdateSupplierCapability();
                    
                    private DeleteSupplierCapability _DeleteSupplierCapability = new DeleteSupplierCapability();
                    
                    private SelectAllSupplierCapability _SelectAllSupplierCapability = new SelectAllSupplierCapability();
                    
                    private SelectMaxIdSupplier_AddressCapability _SelectMaxIdSupplier_AddressCapability = new SelectMaxIdSupplier_AddressCapability();
                    
                    private InsertSupplier_AddressCapability _InsertSupplier_AddressCapability = new InsertSupplier_AddressCapability();
                    
                    private UpdateSupplier_AddressCapability _UpdateSupplier_AddressCapability = new UpdateSupplier_AddressCapability();
                    
                    private DeleteSupplier_AddressCapability _DeleteSupplier_AddressCapability = new DeleteSupplier_AddressCapability();
                    
                    private SelectSupplier_AddressBySupplierIdCapability _SelectSupplier_AddressBySupplierIdCapability = new SelectSupplier_AddressBySupplierIdCapability();
                    
                    private SelectMaxIdSupplier_PhoneCapability _SelectMaxIdSupplier_PhoneCapability = new SelectMaxIdSupplier_PhoneCapability();
                    
                    private InsertSupplier_PhoneCapability _InsertSupplier_PhoneCapability = new InsertSupplier_PhoneCapability();
                    
                    private UpdateSupplier_PhoneCapability _UpdateSupplier_PhoneCapability = new UpdateSupplier_PhoneCapability();
                    
                    private DeleteSupplier_PhoneCapability _DeleteSupplier_PhoneCapability = new DeleteSupplier_PhoneCapability();
                    
                    private SelectSupplier_PhoneBySupplierIdCapability _SelectSupplier_PhoneBySupplierIdCapability = new SelectSupplier_PhoneBySupplierIdCapability();
                    
                    public ACLMessage ObserveProfileGoalExecute(ACLMessage message)
                    {
                        if ((message.Content == "SelectMaxIdCustomerCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _SelectMaxIdCustomerCapability.SelectMaxIdCustomerCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertCustomerCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _InsertCustomerCapability.InsertCustomerCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateCustomerCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _UpdateCustomerCapability.UpdateCustomerCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteCustomerCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _DeleteCustomerCapability.DeleteCustomerCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectAllCustomerCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _SelectAllCustomerCapability.SelectAllCustomerCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectCustomerByUsernameAndPasswordCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _SelectCustomerByUsernameAndPasswordCapability.SelectCustomerByUsernameAndPasswordCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectMaxIdCustomer_AddressCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _SelectMaxIdCustomer_AddressCapability.SelectMaxIdCustomer_AddressCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertCustomer_AddressCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _InsertCustomer_AddressCapability.InsertCustomer_AddressCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateCustomer_AddressCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _UpdateCustomer_AddressCapability.UpdateCustomer_AddressCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteCustomer_AddressCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _DeleteCustomer_AddressCapability.DeleteCustomer_AddressCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectCustomer_AddressByCustomerIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _SelectCustomer_AddressByCustomerIdCapability.SelectCustomer_AddressByCustomerIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectMaxIdCustomer_CreditCardCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _SelectMaxIdCustomer_CreditCardCapability.SelectMaxIdCustomer_CreditCardCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertCustomer_CreditCardCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _InsertCustomer_CreditCardCapability.InsertCustomer_CreditCardCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateCustomer_CreditCardCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _UpdateCustomer_CreditCardCapability.UpdateCustomer_CreditCardCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteCustomer_CreditCardCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _DeleteCustomer_CreditCardCapability.DeleteCustomer_CreditCardCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectCustomer_CreditCardByCustomerIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _SelectCustomer_CreditCardByCustomerIdCapability.SelectCustomer_CreditCardByCustomerIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectMaxIdCustomer_PhoneCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _SelectMaxIdCustomer_PhoneCapability.SelectMaxIdCustomer_PhoneCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertCustomer_PhoneCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _InsertCustomer_PhoneCapability.InsertCustomer_PhoneCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateCustomer_PhoneCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _UpdateCustomer_PhoneCapability.UpdateCustomer_PhoneCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteCustomer_PhoneCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _DeleteCustomer_PhoneCapability.DeleteCustomer_PhoneCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectCustomer_PhoneByCustomerIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _SelectCustomer_PhoneByCustomerIdCapability.SelectCustomer_PhoneByCustomerIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectMaxIdSupplierCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _SelectMaxIdSupplierCapability.SelectMaxIdSupplierCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertSupplierCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _InsertSupplierCapability.InsertSupplierCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateSupplierCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _UpdateSupplierCapability.UpdateSupplierCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteSupplierCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _DeleteSupplierCapability.DeleteSupplierCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectAllSupplierCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _SelectAllSupplierCapability.SelectAllSupplierCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectMaxIdSupplier_AddressCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _SelectMaxIdSupplier_AddressCapability.SelectMaxIdSupplier_AddressCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertSupplier_AddressCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _InsertSupplier_AddressCapability.InsertSupplier_AddressCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateSupplier_AddressCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _UpdateSupplier_AddressCapability.UpdateSupplier_AddressCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteSupplier_AddressCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _DeleteSupplier_AddressCapability.DeleteSupplier_AddressCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectSupplier_AddressBySupplierIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _SelectSupplier_AddressBySupplierIdCapability.SelectSupplier_AddressBySupplierIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectMaxIdSupplier_PhoneCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _SelectMaxIdSupplier_PhoneCapability.SelectMaxIdSupplier_PhoneCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertSupplier_PhoneCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _InsertSupplier_PhoneCapability.InsertSupplier_PhoneCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateSupplier_PhoneCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _UpdateSupplier_PhoneCapability.UpdateSupplier_PhoneCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteSupplier_PhoneCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _DeleteSupplier_PhoneCapability.DeleteSupplier_PhoneCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectSupplier_PhoneBySupplierIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "ProfileMonitorAgent";
                            _Success = _SelectSupplier_PhoneBySupplierIdCapability.SelectSupplier_PhoneBySupplierIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        return null;
                    }
                    
                    public class SelectMaxIdCustomerCapability
                    {
                        
                        private object SelectMaxIdCustomerBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdCustomer", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdCustomerEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdCustomerPlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdCustomerCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdCustomerBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdCustomerEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdCustomerPlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertCustomerCapability
                    {
                        
                        private int _Id;
                        
                        private string _FirstName;
                        
                        private string _LastName;
                        
                        private string _MiddleName;
                        
                        private System.DateTime _DateOfBirth;
                        
                        private string _Email;
                        
                        private string _City;
                        
                        private string _Country;
                        
                        private string _Username;
                        
                        private string _Password;
                        
                        private bool InsertCustomerBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["FirstName"] != null))
                                {
                                    if ((message.ContentArgumentsIn["FirstName"].ToString() != String.Empty))
                                    {
                                        this._FirstName = message.ContentArgumentsIn["FirstName"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._FirstName = "";
                                }
                                if ((message.ContentArgumentsIn["LastName"] != null))
                                {
                                    if ((message.ContentArgumentsIn["LastName"].ToString() != String.Empty))
                                    {
                                        this._LastName = message.ContentArgumentsIn["LastName"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._LastName = "";
                                }
                                if ((message.ContentArgumentsIn["MiddleName"] != null))
                                {
                                    if ((message.ContentArgumentsIn["MiddleName"].ToString() != String.Empty))
                                    {
                                        this._MiddleName = message.ContentArgumentsIn["MiddleName"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._MiddleName = "";
                                }
                                if ((message.ContentArgumentsIn["DateOfBirth"] != null))
                                {
                                    if ((message.ContentArgumentsIn["DateOfBirth"].ToString() != String.Empty))
                                    {
                                        this._DateOfBirth = DateTime.Parse(message.ContentArgumentsIn["DateOfBirth"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._DateOfBirth = DateTime.Now;
                                }
                                if ((message.ContentArgumentsIn["Email"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Email"].ToString() != String.Empty))
                                    {
                                        this._Email = message.ContentArgumentsIn["Email"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Email = "";
                                }
                                if ((message.ContentArgumentsIn["City"] != null))
                                {
                                    if ((message.ContentArgumentsIn["City"].ToString() != String.Empty))
                                    {
                                        this._City = message.ContentArgumentsIn["City"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._City = "";
                                }
                                if ((message.ContentArgumentsIn["Country"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Country"].ToString() != String.Empty))
                                    {
                                        this._Country = message.ContentArgumentsIn["Country"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Country = "";
                                }
                                if ((message.ContentArgumentsIn["Username"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Username"].ToString() != String.Empty))
                                    {
                                        this._Username = message.ContentArgumentsIn["Username"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Username = "";
                                }
                                if ((message.ContentArgumentsIn["Password"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Password"].ToString() != String.Empty))
                                    {
                                        this._Password = message.ContentArgumentsIn["Password"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Password = "";
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertCustomerEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._FirstName) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._LastName) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._MiddleName) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Mail", this._Email) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._City) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Country) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("StartLetterOrDigit", this._Username) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("StartLetterOrDigit", this._Password) == false))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertCustomerPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertCustomer", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter FirstNameprm = cmd.Parameters.Add("FirstName", SqlDbType.Char, 30);
                                FirstNameprm.Direction = ParameterDirection.Input;
                                FirstNameprm.Value = this._FirstName;
                                System.Data.SqlClient.SqlParameter LastNameprm = cmd.Parameters.Add("LastName", SqlDbType.Char, 30);
                                LastNameprm.Direction = ParameterDirection.Input;
                                LastNameprm.Value = this._LastName;
                                System.Data.SqlClient.SqlParameter MiddleNameprm = cmd.Parameters.Add("MiddleName", SqlDbType.Char, 30);
                                MiddleNameprm.Direction = ParameterDirection.Input;
                                MiddleNameprm.Value = this._MiddleName;
                                System.Data.SqlClient.SqlParameter DateOfBirthprm = cmd.Parameters.Add("DateOfBirth", SqlDbType.DateTime);
                                DateOfBirthprm.Direction = ParameterDirection.Input;
                                DateOfBirthprm.Value = this._DateOfBirth;
                                System.Data.SqlClient.SqlParameter Emailprm = cmd.Parameters.Add("Email", SqlDbType.Char, 100);
                                Emailprm.Direction = ParameterDirection.Input;
                                Emailprm.Value = this._Email;
                                System.Data.SqlClient.SqlParameter Cityprm = cmd.Parameters.Add("City", SqlDbType.Char, 30);
                                Cityprm.Direction = ParameterDirection.Input;
                                Cityprm.Value = this._City;
                                System.Data.SqlClient.SqlParameter Countryprm = cmd.Parameters.Add("Country", SqlDbType.Char, 30);
                                Countryprm.Direction = ParameterDirection.Input;
                                Countryprm.Value = this._Country;
                                System.Data.SqlClient.SqlParameter Usernameprm = cmd.Parameters.Add("Username", SqlDbType.Char, 40);
                                Usernameprm.Direction = ParameterDirection.Input;
                                Usernameprm.Value = this._Username;
                                System.Data.SqlClient.SqlParameter Passwordprm = cmd.Parameters.Add("Password", SqlDbType.Char, 40);
                                Passwordprm.Direction = ParameterDirection.Input;
                                Passwordprm.Value = this._Password;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertCustomerCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertCustomerBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertCustomerEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertCustomerPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateCustomerCapability
                    {
                        
                        private int _Id;
                        
                        private string _FirstName;
                        
                        private string _LastName;
                        
                        private string _MiddleName;
                        
                        private System.DateTime _DateOfBirth;
                        
                        private string _Email;
                        
                        private string _City;
                        
                        private string _Country;
                        
                        private string _Username;
                        
                        private string _Password;
                        
                        private bool UpdateCustomerBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["FirstName"] != null))
                                {
                                    if ((message.ContentArgumentsIn["FirstName"].ToString() != String.Empty))
                                    {
                                        this._FirstName = message.ContentArgumentsIn["FirstName"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._FirstName = "";
                                }
                                if ((message.ContentArgumentsIn["LastName"] != null))
                                {
                                    if ((message.ContentArgumentsIn["LastName"].ToString() != String.Empty))
                                    {
                                        this._LastName = message.ContentArgumentsIn["LastName"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._LastName = "";
                                }
                                if ((message.ContentArgumentsIn["MiddleName"] != null))
                                {
                                    if ((message.ContentArgumentsIn["MiddleName"].ToString() != String.Empty))
                                    {
                                        this._MiddleName = message.ContentArgumentsIn["MiddleName"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._MiddleName = "";
                                }
                                if ((message.ContentArgumentsIn["DateOfBirth"] != null))
                                {
                                    if ((message.ContentArgumentsIn["DateOfBirth"].ToString() != String.Empty))
                                    {
                                        this._DateOfBirth = DateTime.Parse(message.ContentArgumentsIn["DateOfBirth"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._DateOfBirth = DateTime.Now;
                                }
                                if ((message.ContentArgumentsIn["Email"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Email"].ToString() != String.Empty))
                                    {
                                        this._Email = message.ContentArgumentsIn["Email"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Email = "";
                                }
                                if ((message.ContentArgumentsIn["City"] != null))
                                {
                                    if ((message.ContentArgumentsIn["City"].ToString() != String.Empty))
                                    {
                                        this._City = message.ContentArgumentsIn["City"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._City = "";
                                }
                                if ((message.ContentArgumentsIn["Country"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Country"].ToString() != String.Empty))
                                    {
                                        this._Country = message.ContentArgumentsIn["Country"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Country = "";
                                }
                                if ((message.ContentArgumentsIn["Username"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Username"].ToString() != String.Empty))
                                    {
                                        this._Username = message.ContentArgumentsIn["Username"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Username = "";
                                }
                                if ((message.ContentArgumentsIn["Password"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Password"].ToString() != String.Empty))
                                    {
                                        this._Password = message.ContentArgumentsIn["Password"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Password = "";
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateCustomerEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._FirstName) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._LastName) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._MiddleName) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Mail", this._Email) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._City) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Country) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("StartLetterOrDigit", this._Username) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("StartLetterOrDigit", this._Password) == false))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateCustomerPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateCustomer", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter FirstNameprm = cmd.Parameters.Add("FirstName", SqlDbType.Char, 30);
                                FirstNameprm.Direction = ParameterDirection.Input;
                                FirstNameprm.Value = this._FirstName;
                                System.Data.SqlClient.SqlParameter LastNameprm = cmd.Parameters.Add("LastName", SqlDbType.Char, 30);
                                LastNameprm.Direction = ParameterDirection.Input;
                                LastNameprm.Value = this._LastName;
                                System.Data.SqlClient.SqlParameter MiddleNameprm = cmd.Parameters.Add("MiddleName", SqlDbType.Char, 30);
                                MiddleNameprm.Direction = ParameterDirection.Input;
                                MiddleNameprm.Value = this._MiddleName;
                                System.Data.SqlClient.SqlParameter DateOfBirthprm = cmd.Parameters.Add("DateOfBirth", SqlDbType.DateTime);
                                DateOfBirthprm.Direction = ParameterDirection.Input;
                                DateOfBirthprm.Value = this._DateOfBirth;
                                System.Data.SqlClient.SqlParameter Emailprm = cmd.Parameters.Add("Email", SqlDbType.Char, 100);
                                Emailprm.Direction = ParameterDirection.Input;
                                Emailprm.Value = this._Email;
                                System.Data.SqlClient.SqlParameter Cityprm = cmd.Parameters.Add("City", SqlDbType.Char, 30);
                                Cityprm.Direction = ParameterDirection.Input;
                                Cityprm.Value = this._City;
                                System.Data.SqlClient.SqlParameter Countryprm = cmd.Parameters.Add("Country", SqlDbType.Char, 30);
                                Countryprm.Direction = ParameterDirection.Input;
                                Countryprm.Value = this._Country;
                                System.Data.SqlClient.SqlParameter Usernameprm = cmd.Parameters.Add("Username", SqlDbType.Char, 40);
                                Usernameprm.Direction = ParameterDirection.Input;
                                Usernameprm.Value = this._Username;
                                System.Data.SqlClient.SqlParameter Passwordprm = cmd.Parameters.Add("Password", SqlDbType.Char, 40);
                                Passwordprm.Direction = ParameterDirection.Input;
                                Passwordprm.Value = this._Password;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateCustomerCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateCustomerBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateCustomerEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateCustomerPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteCustomerCapability
                    {
                        
                        private int _Id;
                        
                        private bool DeleteCustomerBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteCustomerEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteCustomerPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteCustomer", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteCustomerCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteCustomerBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteCustomerEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteCustomerPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectAllCustomerCapability
                    {
                        
                        private int _SelectAllCustomerCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectAllCustomerBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectAllCustomerEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAllCustomer", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectAllCustomerPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAllCustomer", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectAllCustomerCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing records...");
                            System.Data.DataTable temp = null;
                            bool v = this.SelectAllCustomerBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SelectAllCustomerCount = this.SelectAllCustomerEventFun();
                                    message.ContentArgumentsOut.Add("SelectAllCustomerCount", this._SelectAllCustomerCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectAllCustomerPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectCustomerByUsernameAndPasswordCapability
                    {
                        
                        private string _Username;
                        
                        private string _Password;
                        
                        private int _SelectCustomerByUsernameAndPasswordCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectCustomerByUsernameAndPasswordBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["Username"].ToString() != String.Empty))
                                {
                                    this._Username = message.ContentArgumentsIn["Username"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Password"].ToString() != String.Empty))
                                {
                                    this._Password = message.ContentArgumentsIn["Password"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                ce = (ce + 1);
                                ce = (ce + 1);
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectCustomerByUsernameAndPasswordEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCustomerByUsernameAndPassword", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Usernameprm = cmd.Parameters.Add("@Username", SqlDbType.Char, 40);
                                Usernameprm.Direction = ParameterDirection.Input;
                                Usernameprm.Value = this._Username;
                                System.Data.SqlClient.SqlParameter Passwordprm = cmd.Parameters.Add("@Password", SqlDbType.Char, 40);
                                Passwordprm.Direction = ParameterDirection.Input;
                                Passwordprm.Value = this._Password;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectCustomerByUsernameAndPasswordPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCustomerByUsernameAndPassword", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Usernameprm = cmd.Parameters.Add("@Username", SqlDbType.Char, 40);
                                Usernameprm.Direction = ParameterDirection.Input;
                                Usernameprm.Value = this._Username;
                                System.Data.SqlClient.SqlParameter Passwordprm = cmd.Parameters.Add("@Password", SqlDbType.Char, 40);
                                Passwordprm.Direction = ParameterDirection.Input;
                                Passwordprm.Value = this._Password;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectCustomerByUsernameAndPasswordCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectCustomerByUsernameAndPasswordBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectCustomerByUsernameAndPasswordCount = this.SelectCustomerByUsernameAndPasswordEventFun();
                                    message.ContentArgumentsOut.Add("SelectCustomerByUsernameAndPasswordCount", this._SelectCustomerByUsernameAndPasswordCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectCustomerByUsernameAndPasswordPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectMaxIdCustomer_AddressCapability
                    {
                        
                        private object SelectMaxIdCustomer_AddressBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdCustomer_Address", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdCustomer_AddressEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdCustomer_AddressPlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdCustomer_AddressCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdCustomer_AddressBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdCustomer_AddressEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdCustomer_AddressPlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertCustomer_AddressCapability
                    {
                        
                        private int _Id;
                        
                        private int _Number;
                        
                        private string _Street;
                        
                        private int _District;
                        
                        private string _Country;
                        
                        private string _City;
                        
                        private int _ZipCode;
                        
                        private int _CustomerId;
                        
                        private bool InsertCustomer_AddressBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["Number"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Number"].ToString() != String.Empty))
                                    {
                                        this._Number = int.Parse(message.ContentArgumentsIn["Number"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Number = 0;
                                }
                                if ((message.ContentArgumentsIn["Street"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Street"].ToString() != String.Empty))
                                    {
                                        this._Street = message.ContentArgumentsIn["Street"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Street = "";
                                }
                                if ((message.ContentArgumentsIn["District"] != null))
                                {
                                    if ((message.ContentArgumentsIn["District"].ToString() != String.Empty))
                                    {
                                        this._District = int.Parse(message.ContentArgumentsIn["District"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._District = 0;
                                }
                                if ((message.ContentArgumentsIn["Country"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Country"].ToString() != String.Empty))
                                    {
                                        this._Country = message.ContentArgumentsIn["Country"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Country = "";
                                }
                                if ((message.ContentArgumentsIn["City"] != null))
                                {
                                    if ((message.ContentArgumentsIn["City"].ToString() != String.Empty))
                                    {
                                        this._City = message.ContentArgumentsIn["City"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._City = "";
                                }
                                if ((message.ContentArgumentsIn["ZipCode"] != null))
                                {
                                    if ((message.ContentArgumentsIn["ZipCode"].ToString() != String.Empty))
                                    {
                                        this._ZipCode = int.Parse(message.ContentArgumentsIn["ZipCode"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._ZipCode = 0;
                                }
                                if ((message.ContentArgumentsIn["CustomerId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                    {
                                        this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CustomerId = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertCustomer_AddressEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Number < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("LetterOrDigit", this._Street) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._District < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Country) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._City) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._ZipCode < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._CustomerId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertCustomer_AddressPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertCustomer_Address", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter Numberprm = cmd.Parameters.Add("Number", SqlDbType.Int);
                                Numberprm.Direction = ParameterDirection.Input;
                                Numberprm.Value = this._Number;
                                System.Data.SqlClient.SqlParameter Streetprm = cmd.Parameters.Add("Street", SqlDbType.Char, 100);
                                Streetprm.Direction = ParameterDirection.Input;
                                Streetprm.Value = this._Street;
                                System.Data.SqlClient.SqlParameter Districtprm = cmd.Parameters.Add("District", SqlDbType.Int);
                                Districtprm.Direction = ParameterDirection.Input;
                                Districtprm.Value = this._District;
                                System.Data.SqlClient.SqlParameter Countryprm = cmd.Parameters.Add("Country", SqlDbType.Char, 30);
                                Countryprm.Direction = ParameterDirection.Input;
                                Countryprm.Value = this._Country;
                                System.Data.SqlClient.SqlParameter Cityprm = cmd.Parameters.Add("City", SqlDbType.Char, 30);
                                Cityprm.Direction = ParameterDirection.Input;
                                Cityprm.Value = this._City;
                                System.Data.SqlClient.SqlParameter ZipCodeprm = cmd.Parameters.Add("ZipCode", SqlDbType.Int);
                                ZipCodeprm.Direction = ParameterDirection.Input;
                                ZipCodeprm.Value = this._ZipCode;
                                if ((this._CustomerId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("CustomerId", SqlDbType.Int);
                                    CustomerIdprm.Direction = ParameterDirection.Input;
                                    CustomerIdprm.Value = this._CustomerId;
                                }
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertCustomer_AddressCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertCustomer_AddressBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertCustomer_AddressEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertCustomer_AddressPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateCustomer_AddressCapability
                    {
                        
                        private int _Id;
                        
                        private int _Number;
                        
                        private string _Street;
                        
                        private int _District;
                        
                        private string _Country;
                        
                        private string _City;
                        
                        private int _ZipCode;
                        
                        private int _CustomerId;
                        
                        private bool UpdateCustomer_AddressBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["Number"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Number"].ToString() != String.Empty))
                                    {
                                        this._Number = int.Parse(message.ContentArgumentsIn["Number"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Number = 0;
                                }
                                if ((message.ContentArgumentsIn["Street"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Street"].ToString() != String.Empty))
                                    {
                                        this._Street = message.ContentArgumentsIn["Street"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Street = "";
                                }
                                if ((message.ContentArgumentsIn["District"] != null))
                                {
                                    if ((message.ContentArgumentsIn["District"].ToString() != String.Empty))
                                    {
                                        this._District = int.Parse(message.ContentArgumentsIn["District"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._District = 0;
                                }
                                if ((message.ContentArgumentsIn["Country"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Country"].ToString() != String.Empty))
                                    {
                                        this._Country = message.ContentArgumentsIn["Country"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Country = "";
                                }
                                if ((message.ContentArgumentsIn["City"] != null))
                                {
                                    if ((message.ContentArgumentsIn["City"].ToString() != String.Empty))
                                    {
                                        this._City = message.ContentArgumentsIn["City"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._City = "";
                                }
                                if ((message.ContentArgumentsIn["ZipCode"] != null))
                                {
                                    if ((message.ContentArgumentsIn["ZipCode"].ToString() != String.Empty))
                                    {
                                        this._ZipCode = int.Parse(message.ContentArgumentsIn["ZipCode"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._ZipCode = 0;
                                }
                                if ((message.ContentArgumentsIn["CustomerId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                    {
                                        this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CustomerId = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateCustomer_AddressEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Number < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("LetterOrDigit", this._Street) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._District < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Country) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._City) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._ZipCode < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._CustomerId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateCustomer_AddressPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateCustomer_Address", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter Numberprm = cmd.Parameters.Add("Number", SqlDbType.Int);
                                Numberprm.Direction = ParameterDirection.Input;
                                Numberprm.Value = this._Number;
                                System.Data.SqlClient.SqlParameter Streetprm = cmd.Parameters.Add("Street", SqlDbType.Char, 100);
                                Streetprm.Direction = ParameterDirection.Input;
                                Streetprm.Value = this._Street;
                                System.Data.SqlClient.SqlParameter Districtprm = cmd.Parameters.Add("District", SqlDbType.Int);
                                Districtprm.Direction = ParameterDirection.Input;
                                Districtprm.Value = this._District;
                                System.Data.SqlClient.SqlParameter Countryprm = cmd.Parameters.Add("Country", SqlDbType.Char, 30);
                                Countryprm.Direction = ParameterDirection.Input;
                                Countryprm.Value = this._Country;
                                System.Data.SqlClient.SqlParameter Cityprm = cmd.Parameters.Add("City", SqlDbType.Char, 30);
                                Cityprm.Direction = ParameterDirection.Input;
                                Cityprm.Value = this._City;
                                System.Data.SqlClient.SqlParameter ZipCodeprm = cmd.Parameters.Add("ZipCode", SqlDbType.Int);
                                ZipCodeprm.Direction = ParameterDirection.Input;
                                ZipCodeprm.Value = this._ZipCode;
                                if ((this._CustomerId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("CustomerId", SqlDbType.Int);
                                    CustomerIdprm.Direction = ParameterDirection.Input;
                                    CustomerIdprm.Value = this._CustomerId;
                                }
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateCustomer_AddressCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateCustomer_AddressBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateCustomer_AddressEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateCustomer_AddressPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteCustomer_AddressCapability
                    {
                        
                        private int _Id;
                        
                        private bool DeleteCustomer_AddressBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteCustomer_AddressEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteCustomer_AddressPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteCustomer_Address", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteCustomer_AddressCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteCustomer_AddressBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteCustomer_AddressEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteCustomer_AddressPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectCustomer_AddressByCustomerIdCapability
                    {
                        
                        private int _CustomerId;
                        
                        private int _SelectCustomer_AddressByCustomerIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectCustomer_AddressByCustomerIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                {
                                    this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._CustomerId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectCustomer_AddressByCustomerIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCustomer_AddressByCustomerId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("@CustomerId", SqlDbType.Int);
                                CustomerIdprm.Direction = ParameterDirection.Input;
                                CustomerIdprm.Value = this._CustomerId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectCustomer_AddressByCustomerIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCustomer_AddressByCustomerId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("@CustomerId", SqlDbType.Int);
                                CustomerIdprm.Direction = ParameterDirection.Input;
                                CustomerIdprm.Value = this._CustomerId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectCustomer_AddressByCustomerIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectCustomer_AddressByCustomerIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectCustomer_AddressByCustomerIdCount = this.SelectCustomer_AddressByCustomerIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectCustomer_AddressByCustomerIdCount", this._SelectCustomer_AddressByCustomerIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectCustomer_AddressByCustomerIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectMaxIdCustomer_CreditCardCapability
                    {
                        
                        private object SelectMaxIdCustomer_CreditCardBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdCustomer_CreditCard", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdCustomer_CreditCardEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdCustomer_CreditCardPlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdCustomer_CreditCardCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdCustomer_CreditCardBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdCustomer_CreditCardEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdCustomer_CreditCardPlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertCustomer_CreditCardCapability
                    {
                        
                        private int _Id;
                        
                        private string _CCNumber;
                        
                        private string _Name;
                        
                        private string _CardType;
                        
                        private int _ExpirationMonth;
                        
                        private int _ExpirationYear;
                        
                        private int _CustomerId;
                        
                        private bool InsertCustomer_CreditCardBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["CCNumber"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CCNumber"].ToString() != String.Empty))
                                    {
                                        this._CCNumber = message.ContentArgumentsIn["CCNumber"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CCNumber = "";
                                }
                                if ((message.ContentArgumentsIn["Name"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Name"].ToString() != String.Empty))
                                    {
                                        this._Name = message.ContentArgumentsIn["Name"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Name = "";
                                }
                                if ((message.ContentArgumentsIn["CardType"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CardType"].ToString() != String.Empty))
                                    {
                                        this._CardType = message.ContentArgumentsIn["CardType"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CardType = "";
                                }
                                if ((message.ContentArgumentsIn["ExpirationMonth"] != null))
                                {
                                    if ((message.ContentArgumentsIn["ExpirationMonth"].ToString() != String.Empty))
                                    {
                                        this._ExpirationMonth = int.Parse(message.ContentArgumentsIn["ExpirationMonth"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._ExpirationMonth = 0;
                                }
                                if ((message.ContentArgumentsIn["ExpirationYear"] != null))
                                {
                                    if ((message.ContentArgumentsIn["ExpirationYear"].ToString() != String.Empty))
                                    {
                                        this._ExpirationYear = int.Parse(message.ContentArgumentsIn["ExpirationYear"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._ExpirationYear = 0;
                                }
                                if ((message.ContentArgumentsIn["CustomerId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                    {
                                        this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CustomerId = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertCustomer_CreditCardEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Digit", this._CCNumber) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Name) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._CardType) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._ExpirationMonth < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._ExpirationYear < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._CustomerId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertCustomer_CreditCardPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertCustomer_CreditCard", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter CCNumberprm = cmd.Parameters.Add("CCNumber", SqlDbType.Char, 20);
                                CCNumberprm.Direction = ParameterDirection.Input;
                                CCNumberprm.Value = this._CCNumber;
                                System.Data.SqlClient.SqlParameter Nameprm = cmd.Parameters.Add("Name", SqlDbType.Char, 30);
                                Nameprm.Direction = ParameterDirection.Input;
                                Nameprm.Value = this._Name;
                                System.Data.SqlClient.SqlParameter CardTypeprm = cmd.Parameters.Add("CardType", SqlDbType.Char, 30);
                                CardTypeprm.Direction = ParameterDirection.Input;
                                CardTypeprm.Value = this._CardType;
                                System.Data.SqlClient.SqlParameter ExpirationMonthprm = cmd.Parameters.Add("ExpirationMonth", SqlDbType.Int);
                                ExpirationMonthprm.Direction = ParameterDirection.Input;
                                ExpirationMonthprm.Value = this._ExpirationMonth;
                                System.Data.SqlClient.SqlParameter ExpirationYearprm = cmd.Parameters.Add("ExpirationYear", SqlDbType.Int);
                                ExpirationYearprm.Direction = ParameterDirection.Input;
                                ExpirationYearprm.Value = this._ExpirationYear;
                                if ((this._CustomerId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("CustomerId", SqlDbType.Int);
                                    CustomerIdprm.Direction = ParameterDirection.Input;
                                    CustomerIdprm.Value = this._CustomerId;
                                }
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertCustomer_CreditCardCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertCustomer_CreditCardBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertCustomer_CreditCardEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertCustomer_CreditCardPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateCustomer_CreditCardCapability
                    {
                        
                        private int _Id;
                        
                        private string _CCNumber;
                        
                        private string _Name;
                        
                        private string _CardType;
                        
                        private int _ExpirationMonth;
                        
                        private int _ExpirationYear;
                        
                        private int _CustomerId;
                        
                        private bool UpdateCustomer_CreditCardBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["CCNumber"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CCNumber"].ToString() != String.Empty))
                                    {
                                        this._CCNumber = message.ContentArgumentsIn["CCNumber"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CCNumber = "";
                                }
                                if ((message.ContentArgumentsIn["Name"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Name"].ToString() != String.Empty))
                                    {
                                        this._Name = message.ContentArgumentsIn["Name"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Name = "";
                                }
                                if ((message.ContentArgumentsIn["CardType"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CardType"].ToString() != String.Empty))
                                    {
                                        this._CardType = message.ContentArgumentsIn["CardType"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CardType = "";
                                }
                                if ((message.ContentArgumentsIn["ExpirationMonth"] != null))
                                {
                                    if ((message.ContentArgumentsIn["ExpirationMonth"].ToString() != String.Empty))
                                    {
                                        this._ExpirationMonth = int.Parse(message.ContentArgumentsIn["ExpirationMonth"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._ExpirationMonth = 0;
                                }
                                if ((message.ContentArgumentsIn["ExpirationYear"] != null))
                                {
                                    if ((message.ContentArgumentsIn["ExpirationYear"].ToString() != String.Empty))
                                    {
                                        this._ExpirationYear = int.Parse(message.ContentArgumentsIn["ExpirationYear"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._ExpirationYear = 0;
                                }
                                if ((message.ContentArgumentsIn["CustomerId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                    {
                                        this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CustomerId = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateCustomer_CreditCardEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Digit", this._CCNumber) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Name) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._CardType) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._ExpirationMonth < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._ExpirationYear < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._CustomerId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateCustomer_CreditCardPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateCustomer_CreditCard", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter CCNumberprm = cmd.Parameters.Add("CCNumber", SqlDbType.Char, 20);
                                CCNumberprm.Direction = ParameterDirection.Input;
                                CCNumberprm.Value = this._CCNumber;
                                System.Data.SqlClient.SqlParameter Nameprm = cmd.Parameters.Add("Name", SqlDbType.Char, 30);
                                Nameprm.Direction = ParameterDirection.Input;
                                Nameprm.Value = this._Name;
                                System.Data.SqlClient.SqlParameter CardTypeprm = cmd.Parameters.Add("CardType", SqlDbType.Char, 30);
                                CardTypeprm.Direction = ParameterDirection.Input;
                                CardTypeprm.Value = this._CardType;
                                System.Data.SqlClient.SqlParameter ExpirationMonthprm = cmd.Parameters.Add("ExpirationMonth", SqlDbType.Int);
                                ExpirationMonthprm.Direction = ParameterDirection.Input;
                                ExpirationMonthprm.Value = this._ExpirationMonth;
                                System.Data.SqlClient.SqlParameter ExpirationYearprm = cmd.Parameters.Add("ExpirationYear", SqlDbType.Int);
                                ExpirationYearprm.Direction = ParameterDirection.Input;
                                ExpirationYearprm.Value = this._ExpirationYear;
                                if ((this._CustomerId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("CustomerId", SqlDbType.Int);
                                    CustomerIdprm.Direction = ParameterDirection.Input;
                                    CustomerIdprm.Value = this._CustomerId;
                                }
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateCustomer_CreditCardCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateCustomer_CreditCardBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateCustomer_CreditCardEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateCustomer_CreditCardPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteCustomer_CreditCardCapability
                    {
                        
                        private int _Id;
                        
                        private bool DeleteCustomer_CreditCardBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteCustomer_CreditCardEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteCustomer_CreditCardPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteCustomer_CreditCard", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteCustomer_CreditCardCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteCustomer_CreditCardBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteCustomer_CreditCardEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteCustomer_CreditCardPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectCustomer_CreditCardByCustomerIdCapability
                    {
                        
                        private int _CustomerId;
                        
                        private int _SelectCustomer_CreditCardByCustomerIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectCustomer_CreditCardByCustomerIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                {
                                    this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._CustomerId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectCustomer_CreditCardByCustomerIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCustomer_CreditCardByCustomerId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("@CustomerId", SqlDbType.Int);
                                CustomerIdprm.Direction = ParameterDirection.Input;
                                CustomerIdprm.Value = this._CustomerId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectCustomer_CreditCardByCustomerIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCustomer_CreditCardByCustomerId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("@CustomerId", SqlDbType.Int);
                                CustomerIdprm.Direction = ParameterDirection.Input;
                                CustomerIdprm.Value = this._CustomerId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectCustomer_CreditCardByCustomerIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectCustomer_CreditCardByCustomerIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectCustomer_CreditCardByCustomerIdCount = this.SelectCustomer_CreditCardByCustomerIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectCustomer_CreditCardByCustomerIdCount", this._SelectCustomer_CreditCardByCustomerIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectCustomer_CreditCardByCustomerIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectMaxIdCustomer_PhoneCapability
                    {
                        
                        private object SelectMaxIdCustomer_PhoneBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdCustomer_Phone", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdCustomer_PhoneEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdCustomer_PhonePlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdCustomer_PhoneCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdCustomer_PhoneBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdCustomer_PhoneEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdCustomer_PhonePlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertCustomer_PhoneCapability
                    {
                        
                        private int _Id;
                        
                        private int _CustomerId;
                        
                        private string _Phone;
                        
                        private bool InsertCustomer_PhoneBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["CustomerId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                    {
                                        this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CustomerId = 0;
                                }
                                if ((message.ContentArgumentsIn["Phone"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Phone"].ToString() != String.Empty))
                                    {
                                        this._Phone = message.ContentArgumentsIn["Phone"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Phone = "";
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertCustomer_PhoneEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._CustomerId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Digit", this._Phone) == false))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertCustomer_PhonePlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertCustomer_Phone", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                if ((this._CustomerId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("CustomerId", SqlDbType.Int);
                                    CustomerIdprm.Direction = ParameterDirection.Input;
                                    CustomerIdprm.Value = this._CustomerId;
                                }
                                System.Data.SqlClient.SqlParameter Phoneprm = cmd.Parameters.Add("Phone", SqlDbType.Char, 15);
                                Phoneprm.Direction = ParameterDirection.Input;
                                Phoneprm.Value = this._Phone;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertCustomer_PhoneCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertCustomer_PhoneBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertCustomer_PhoneEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertCustomer_PhonePlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateCustomer_PhoneCapability
                    {
                        
                        private int _Id;
                        
                        private int _CustomerId;
                        
                        private string _Phone;
                        
                        private bool UpdateCustomer_PhoneBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["CustomerId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                    {
                                        this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CustomerId = 0;
                                }
                                if ((message.ContentArgumentsIn["Phone"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Phone"].ToString() != String.Empty))
                                    {
                                        this._Phone = message.ContentArgumentsIn["Phone"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Phone = "";
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateCustomer_PhoneEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._CustomerId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Digit", this._Phone) == false))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateCustomer_PhonePlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateCustomer_Phone", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                if ((this._CustomerId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("CustomerId", SqlDbType.Int);
                                    CustomerIdprm.Direction = ParameterDirection.Input;
                                    CustomerIdprm.Value = this._CustomerId;
                                }
                                System.Data.SqlClient.SqlParameter Phoneprm = cmd.Parameters.Add("Phone", SqlDbType.Char, 15);
                                Phoneprm.Direction = ParameterDirection.Input;
                                Phoneprm.Value = this._Phone;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateCustomer_PhoneCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateCustomer_PhoneBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateCustomer_PhoneEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateCustomer_PhonePlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteCustomer_PhoneCapability
                    {
                        
                        private int _Id;
                        
                        private bool DeleteCustomer_PhoneBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteCustomer_PhoneEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteCustomer_PhonePlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteCustomer_Phone", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteCustomer_PhoneCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteCustomer_PhoneBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteCustomer_PhoneEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteCustomer_PhonePlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectCustomer_PhoneByCustomerIdCapability
                    {
                        
                        private int _CustomerId;
                        
                        private int _SelectCustomer_PhoneByCustomerIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectCustomer_PhoneByCustomerIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                {
                                    this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._CustomerId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectCustomer_PhoneByCustomerIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCustomer_PhoneByCustomerId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("@CustomerId", SqlDbType.Int);
                                CustomerIdprm.Direction = ParameterDirection.Input;
                                CustomerIdprm.Value = this._CustomerId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectCustomer_PhoneByCustomerIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCustomer_PhoneByCustomerId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("@CustomerId", SqlDbType.Int);
                                CustomerIdprm.Direction = ParameterDirection.Input;
                                CustomerIdprm.Value = this._CustomerId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectCustomer_PhoneByCustomerIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectCustomer_PhoneByCustomerIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectCustomer_PhoneByCustomerIdCount = this.SelectCustomer_PhoneByCustomerIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectCustomer_PhoneByCustomerIdCount", this._SelectCustomer_PhoneByCustomerIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectCustomer_PhoneByCustomerIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectMaxIdSupplierCapability
                    {
                        
                        private object SelectMaxIdSupplierBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdSupplier", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdSupplierEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdSupplierPlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdSupplierCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdSupplierBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdSupplierEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdSupplierPlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertSupplierCapability
                    {
                        
                        private int _Id;
                        
                        private string _SupplierName;
                        
                        private bool InsertSupplierBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["SupplierName"] != null))
                                {
                                    if ((message.ContentArgumentsIn["SupplierName"].ToString() != String.Empty))
                                    {
                                        this._SupplierName = message.ContentArgumentsIn["SupplierName"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._SupplierName = "";
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertSupplierEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("LetterOrDigit", this._SupplierName) == false))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertSupplierPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertSupplier", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter SupplierNameprm = cmd.Parameters.Add("SupplierName", SqlDbType.Char, 100);
                                SupplierNameprm.Direction = ParameterDirection.Input;
                                SupplierNameprm.Value = this._SupplierName;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertSupplierCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertSupplierBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertSupplierEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertSupplierPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateSupplierCapability
                    {
                        
                        private int _Id;
                        
                        private string _SupplierName;
                        
                        private bool UpdateSupplierBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["SupplierName"] != null))
                                {
                                    if ((message.ContentArgumentsIn["SupplierName"].ToString() != String.Empty))
                                    {
                                        this._SupplierName = message.ContentArgumentsIn["SupplierName"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._SupplierName = "";
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateSupplierEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("LetterOrDigit", this._SupplierName) == false))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateSupplierPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateSupplier", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter SupplierNameprm = cmd.Parameters.Add("SupplierName", SqlDbType.Char, 100);
                                SupplierNameprm.Direction = ParameterDirection.Input;
                                SupplierNameprm.Value = this._SupplierName;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateSupplierCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateSupplierBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateSupplierEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateSupplierPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteSupplierCapability
                    {
                        
                        private int _Id;
                        
                        private bool DeleteSupplierBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteSupplierEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteSupplierPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteSupplier", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteSupplierCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteSupplierBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteSupplierEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteSupplierPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectAllSupplierCapability
                    {
                        
                        private int _SelectAllSupplierCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectAllSupplierBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectAllSupplierEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAllSupplier", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectAllSupplierPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAllSupplier", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectAllSupplierCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing records...");
                            System.Data.DataTable temp = null;
                            bool v = this.SelectAllSupplierBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SelectAllSupplierCount = this.SelectAllSupplierEventFun();
                                    message.ContentArgumentsOut.Add("SelectAllSupplierCount", this._SelectAllSupplierCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectAllSupplierPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectMaxIdSupplier_AddressCapability
                    {
                        
                        private object SelectMaxIdSupplier_AddressBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdSupplier_Address", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdSupplier_AddressEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdSupplier_AddressPlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdSupplier_AddressCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdSupplier_AddressBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdSupplier_AddressEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdSupplier_AddressPlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertSupplier_AddressCapability
                    {
                        
                        private int _Id;
                        
                        private int _Number;
                        
                        private string _Street;
                        
                        private int _District;
                        
                        private string _Country;
                        
                        private string _City;
                        
                        private int _SupplierId;
                        
                        private bool InsertSupplier_AddressBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["Number"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Number"].ToString() != String.Empty))
                                    {
                                        this._Number = int.Parse(message.ContentArgumentsIn["Number"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Number = 0;
                                }
                                if ((message.ContentArgumentsIn["Street"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Street"].ToString() != String.Empty))
                                    {
                                        this._Street = message.ContentArgumentsIn["Street"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Street = "";
                                }
                                if ((message.ContentArgumentsIn["District"] != null))
                                {
                                    if ((message.ContentArgumentsIn["District"].ToString() != String.Empty))
                                    {
                                        this._District = int.Parse(message.ContentArgumentsIn["District"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._District = 0;
                                }
                                if ((message.ContentArgumentsIn["Country"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Country"].ToString() != String.Empty))
                                    {
                                        this._Country = message.ContentArgumentsIn["Country"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Country = "";
                                }
                                if ((message.ContentArgumentsIn["City"] != null))
                                {
                                    if ((message.ContentArgumentsIn["City"].ToString() != String.Empty))
                                    {
                                        this._City = message.ContentArgumentsIn["City"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._City = "";
                                }
                                if ((message.ContentArgumentsIn["SupplierId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["SupplierId"].ToString() != String.Empty))
                                    {
                                        this._SupplierId = int.Parse(message.ContentArgumentsIn["SupplierId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._SupplierId = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertSupplier_AddressEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Number < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("LetterOrDigit", this._Street) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._District < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Country) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._City) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._SupplierId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertSupplier_AddressPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertSupplier_Address", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter Numberprm = cmd.Parameters.Add("Number", SqlDbType.Int);
                                Numberprm.Direction = ParameterDirection.Input;
                                Numberprm.Value = this._Number;
                                System.Data.SqlClient.SqlParameter Streetprm = cmd.Parameters.Add("Street", SqlDbType.Char, 100);
                                Streetprm.Direction = ParameterDirection.Input;
                                Streetprm.Value = this._Street;
                                System.Data.SqlClient.SqlParameter Districtprm = cmd.Parameters.Add("District", SqlDbType.Int);
                                Districtprm.Direction = ParameterDirection.Input;
                                Districtprm.Value = this._District;
                                System.Data.SqlClient.SqlParameter Countryprm = cmd.Parameters.Add("Country", SqlDbType.Char, 30);
                                Countryprm.Direction = ParameterDirection.Input;
                                Countryprm.Value = this._Country;
                                System.Data.SqlClient.SqlParameter Cityprm = cmd.Parameters.Add("City", SqlDbType.Char, 30);
                                Cityprm.Direction = ParameterDirection.Input;
                                Cityprm.Value = this._City;
                                if ((this._SupplierId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter SupplierIdprm = cmd.Parameters.Add("SupplierId", SqlDbType.Int);
                                    SupplierIdprm.Direction = ParameterDirection.Input;
                                    SupplierIdprm.Value = this._SupplierId;
                                }
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertSupplier_AddressCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertSupplier_AddressBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertSupplier_AddressEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertSupplier_AddressPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateSupplier_AddressCapability
                    {
                        
                        private int _Id;
                        
                        private int _Number;
                        
                        private string _Street;
                        
                        private int _District;
                        
                        private string _Country;
                        
                        private string _City;
                        
                        private int _SupplierId;
                        
                        private bool UpdateSupplier_AddressBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["Number"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Number"].ToString() != String.Empty))
                                    {
                                        this._Number = int.Parse(message.ContentArgumentsIn["Number"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Number = 0;
                                }
                                if ((message.ContentArgumentsIn["Street"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Street"].ToString() != String.Empty))
                                    {
                                        this._Street = message.ContentArgumentsIn["Street"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Street = "";
                                }
                                if ((message.ContentArgumentsIn["District"] != null))
                                {
                                    if ((message.ContentArgumentsIn["District"].ToString() != String.Empty))
                                    {
                                        this._District = int.Parse(message.ContentArgumentsIn["District"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._District = 0;
                                }
                                if ((message.ContentArgumentsIn["Country"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Country"].ToString() != String.Empty))
                                    {
                                        this._Country = message.ContentArgumentsIn["Country"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Country = "";
                                }
                                if ((message.ContentArgumentsIn["City"] != null))
                                {
                                    if ((message.ContentArgumentsIn["City"].ToString() != String.Empty))
                                    {
                                        this._City = message.ContentArgumentsIn["City"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._City = "";
                                }
                                if ((message.ContentArgumentsIn["SupplierId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["SupplierId"].ToString() != String.Empty))
                                    {
                                        this._SupplierId = int.Parse(message.ContentArgumentsIn["SupplierId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._SupplierId = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateSupplier_AddressEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Number < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("LetterOrDigit", this._Street) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._District < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Country) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._City) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._SupplierId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateSupplier_AddressPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateSupplier_Address", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter Numberprm = cmd.Parameters.Add("Number", SqlDbType.Int);
                                Numberprm.Direction = ParameterDirection.Input;
                                Numberprm.Value = this._Number;
                                System.Data.SqlClient.SqlParameter Streetprm = cmd.Parameters.Add("Street", SqlDbType.Char, 100);
                                Streetprm.Direction = ParameterDirection.Input;
                                Streetprm.Value = this._Street;
                                System.Data.SqlClient.SqlParameter Districtprm = cmd.Parameters.Add("District", SqlDbType.Int);
                                Districtprm.Direction = ParameterDirection.Input;
                                Districtprm.Value = this._District;
                                System.Data.SqlClient.SqlParameter Countryprm = cmd.Parameters.Add("Country", SqlDbType.Char, 30);
                                Countryprm.Direction = ParameterDirection.Input;
                                Countryprm.Value = this._Country;
                                System.Data.SqlClient.SqlParameter Cityprm = cmd.Parameters.Add("City", SqlDbType.Char, 30);
                                Cityprm.Direction = ParameterDirection.Input;
                                Cityprm.Value = this._City;
                                if ((this._SupplierId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter SupplierIdprm = cmd.Parameters.Add("SupplierId", SqlDbType.Int);
                                    SupplierIdprm.Direction = ParameterDirection.Input;
                                    SupplierIdprm.Value = this._SupplierId;
                                }
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateSupplier_AddressCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateSupplier_AddressBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateSupplier_AddressEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateSupplier_AddressPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteSupplier_AddressCapability
                    {
                        
                        private int _Id;
                        
                        private bool DeleteSupplier_AddressBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteSupplier_AddressEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteSupplier_AddressPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteSupplier_Address", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteSupplier_AddressCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteSupplier_AddressBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteSupplier_AddressEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteSupplier_AddressPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectSupplier_AddressBySupplierIdCapability
                    {
                        
                        private int _SupplierId;
                        
                        private int _SelectSupplier_AddressBySupplierIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectSupplier_AddressBySupplierIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["SupplierId"].ToString() != String.Empty))
                                {
                                    this._SupplierId = int.Parse(message.ContentArgumentsIn["SupplierId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._SupplierId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectSupplier_AddressBySupplierIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectSupplier_AddressBySupplierId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter SupplierIdprm = cmd.Parameters.Add("@SupplierId", SqlDbType.Int);
                                SupplierIdprm.Direction = ParameterDirection.Input;
                                SupplierIdprm.Value = this._SupplierId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectSupplier_AddressBySupplierIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectSupplier_AddressBySupplierId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter SupplierIdprm = cmd.Parameters.Add("@SupplierId", SqlDbType.Int);
                                SupplierIdprm.Direction = ParameterDirection.Input;
                                SupplierIdprm.Value = this._SupplierId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectSupplier_AddressBySupplierIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectSupplier_AddressBySupplierIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectSupplier_AddressBySupplierIdCount = this.SelectSupplier_AddressBySupplierIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectSupplier_AddressBySupplierIdCount", this._SelectSupplier_AddressBySupplierIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectSupplier_AddressBySupplierIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectMaxIdSupplier_PhoneCapability
                    {
                        
                        private object SelectMaxIdSupplier_PhoneBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdSupplier_Phone", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdSupplier_PhoneEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdSupplier_PhonePlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdSupplier_PhoneCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdSupplier_PhoneBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdSupplier_PhoneEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdSupplier_PhonePlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertSupplier_PhoneCapability
                    {
                        
                        private int _Id;
                        
                        private string _Phone;
                        
                        private int _SupplierId;
                        
                        private bool InsertSupplier_PhoneBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["Phone"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Phone"].ToString() != String.Empty))
                                    {
                                        this._Phone = message.ContentArgumentsIn["Phone"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Phone = "";
                                }
                                if ((message.ContentArgumentsIn["SupplierId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["SupplierId"].ToString() != String.Empty))
                                    {
                                        this._SupplierId = int.Parse(message.ContentArgumentsIn["SupplierId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._SupplierId = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertSupplier_PhoneEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Digit", this._Phone) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._SupplierId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertSupplier_PhonePlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertSupplier_Phone", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter Phoneprm = cmd.Parameters.Add("Phone", SqlDbType.Char, 15);
                                Phoneprm.Direction = ParameterDirection.Input;
                                Phoneprm.Value = this._Phone;
                                if ((this._SupplierId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter SupplierIdprm = cmd.Parameters.Add("SupplierId", SqlDbType.Int);
                                    SupplierIdprm.Direction = ParameterDirection.Input;
                                    SupplierIdprm.Value = this._SupplierId;
                                }
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertSupplier_PhoneCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertSupplier_PhoneBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertSupplier_PhoneEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertSupplier_PhonePlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateSupplier_PhoneCapability
                    {
                        
                        private int _Id;
                        
                        private string _Phone;
                        
                        private int _SupplierId;
                        
                        private bool UpdateSupplier_PhoneBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["Phone"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Phone"].ToString() != String.Empty))
                                    {
                                        this._Phone = message.ContentArgumentsIn["Phone"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Phone = "";
                                }
                                if ((message.ContentArgumentsIn["SupplierId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["SupplierId"].ToString() != String.Empty))
                                    {
                                        this._SupplierId = int.Parse(message.ContentArgumentsIn["SupplierId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._SupplierId = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateSupplier_PhoneEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Digit", this._Phone) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._SupplierId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateSupplier_PhonePlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateSupplier_Phone", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter Phoneprm = cmd.Parameters.Add("Phone", SqlDbType.Char, 15);
                                Phoneprm.Direction = ParameterDirection.Input;
                                Phoneprm.Value = this._Phone;
                                if ((this._SupplierId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter SupplierIdprm = cmd.Parameters.Add("SupplierId", SqlDbType.Int);
                                    SupplierIdprm.Direction = ParameterDirection.Input;
                                    SupplierIdprm.Value = this._SupplierId;
                                }
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateSupplier_PhoneCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateSupplier_PhoneBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateSupplier_PhoneEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateSupplier_PhonePlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteSupplier_PhoneCapability
                    {
                        
                        private int _Id;
                        
                        private bool DeleteSupplier_PhoneBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteSupplier_PhoneEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteSupplier_PhonePlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteSupplier_Phone", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteSupplier_PhoneCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteSupplier_PhoneBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteSupplier_PhoneEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteSupplier_PhonePlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectSupplier_PhoneBySupplierIdCapability
                    {
                        
                        private int _SupplierId;
                        
                        private int _SelectSupplier_PhoneBySupplierIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectSupplier_PhoneBySupplierIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["SupplierId"].ToString() != String.Empty))
                                {
                                    this._SupplierId = int.Parse(message.ContentArgumentsIn["SupplierId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._SupplierId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectSupplier_PhoneBySupplierIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectSupplier_PhoneBySupplierId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter SupplierIdprm = cmd.Parameters.Add("@SupplierId", SqlDbType.Int);
                                SupplierIdprm.Direction = ParameterDirection.Input;
                                SupplierIdprm.Value = this._SupplierId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectSupplier_PhoneBySupplierIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectSupplier_PhoneBySupplierId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter SupplierIdprm = cmd.Parameters.Add("@SupplierId", SqlDbType.Int);
                                SupplierIdprm.Direction = ParameterDirection.Input;
                                SupplierIdprm.Value = this._SupplierId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectSupplier_PhoneBySupplierIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectSupplier_PhoneBySupplierIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectSupplier_PhoneBySupplierIdCount = this.SelectSupplier_PhoneBySupplierIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectSupplier_PhoneBySupplierIdCount", this._SelectSupplier_PhoneBySupplierIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectSupplier_PhoneBySupplierIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                }
            }
            
            public class CustomerContactAgent
            {
                
                private RespondToCustomerGoal _RespondToCustomerGoal = new RespondToCustomerGoal();
                
                public ACLMessage Execute(ACLMessage message)
                {
                    return _RespondToCustomerGoal.RespondToCustomerGoalExecute(message);
                }
                
                public class RespondToCustomerGoal
                {
                    
                    private object _Success;
                    
                    private SelectAllCustomerCapability _SelectAllCustomerCapability = new SelectAllCustomerCapability();
                    
                    public ACLMessage RespondToCustomerGoalExecute(ACLMessage message)
                    {
                        if ((message.Content == "SelectAllCustomerCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CustomerContactAgent";
                            _Success = _SelectAllCustomerCapability.SelectAllCustomerCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        return null;
                    }
                    
                    public class SelectAllCustomerCapability
                    {
                        
                        private int _SelectAllCustomerCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectAllCustomerBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectAllCustomerEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAllCustomer", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectAllCustomerPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAllCustomer", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectAllCustomerCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing records...");
                            System.Data.DataTable temp = null;
                            bool v = this.SelectAllCustomerBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SelectAllCustomerCount = this.SelectAllCustomerEventFun();
                                    message.ContentArgumentsOut.Add("SelectAllCustomerCount", this._SelectAllCustomerCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectAllCustomerPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                }
            }
            
            public class DeliveryAgent
            {
                
                private HandleDeliveryGoal _HandleDeliveryGoal = new HandleDeliveryGoal();
                
                public ACLMessage Execute(ACLMessage message)
                {
                    return _HandleDeliveryGoal.HandleDeliveryGoalExecute(message);
                }
                
                public class HandleDeliveryGoal
                {
                    
                    private object _Success;
                    
                    private InsertDeliveryCapability _InsertDeliveryCapability = new InsertDeliveryCapability();
                    
                    private UpdateDeliveryCapability _UpdateDeliveryCapability = new UpdateDeliveryCapability();
                    
                    private DeleteDeliveryCapability _DeleteDeliveryCapability = new DeleteDeliveryCapability();
                    
                    private SelectAllDeliveryCapability _SelectAllDeliveryCapability = new SelectAllDeliveryCapability();
                    
                    private SelectDeliveryByOrderOutIdCapability _SelectDeliveryByOrderOutIdCapability = new SelectDeliveryByOrderOutIdCapability();
                    
                    private SelectDeliveryByDeliveryMethodIdCapability _SelectDeliveryByDeliveryMethodIdCapability = new SelectDeliveryByDeliveryMethodIdCapability();
                    
                    private SelectMaxIdDeliveryMethodCapability _SelectMaxIdDeliveryMethodCapability = new SelectMaxIdDeliveryMethodCapability();
                    
                    private InsertDeliveryMethodCapability _InsertDeliveryMethodCapability = new InsertDeliveryMethodCapability();
                    
                    private UpdateDeliveryMethodCapability _UpdateDeliveryMethodCapability = new UpdateDeliveryMethodCapability();
                    
                    private DeleteDeliveryMethodCapability _DeleteDeliveryMethodCapability = new DeleteDeliveryMethodCapability();
                    
                    private SelectAllDeliveryMethodCapability _SelectAllDeliveryMethodCapability = new SelectAllDeliveryMethodCapability();
                    
                    public ACLMessage HandleDeliveryGoalExecute(ACLMessage message)
                    {
                        if ((message.Content == "InsertDeliveryCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "DeliveryAgent";
                            _Success = _InsertDeliveryCapability.InsertDeliveryCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateDeliveryCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "DeliveryAgent";
                            _Success = _UpdateDeliveryCapability.UpdateDeliveryCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteDeliveryCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "DeliveryAgent";
                            _Success = _DeleteDeliveryCapability.DeleteDeliveryCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectAllDeliveryCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "DeliveryAgent";
                            _Success = _SelectAllDeliveryCapability.SelectAllDeliveryCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectDeliveryByOrderOutIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "DeliveryAgent";
                            _Success = _SelectDeliveryByOrderOutIdCapability.SelectDeliveryByOrderOutIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectDeliveryByDeliveryMethodIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "DeliveryAgent";
                            _Success = _SelectDeliveryByDeliveryMethodIdCapability.SelectDeliveryByDeliveryMethodIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectMaxIdDeliveryMethodCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "DeliveryAgent";
                            _Success = _SelectMaxIdDeliveryMethodCapability.SelectMaxIdDeliveryMethodCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertDeliveryMethodCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "DeliveryAgent";
                            _Success = _InsertDeliveryMethodCapability.InsertDeliveryMethodCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateDeliveryMethodCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "DeliveryAgent";
                            _Success = _UpdateDeliveryMethodCapability.UpdateDeliveryMethodCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteDeliveryMethodCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "DeliveryAgent";
                            _Success = _DeleteDeliveryMethodCapability.DeleteDeliveryMethodCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectAllDeliveryMethodCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "DeliveryAgent";
                            _Success = _SelectAllDeliveryMethodCapability.SelectAllDeliveryMethodCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        return null;
                    }
                    
                    public class InsertDeliveryCapability
                    {
                        
                        private int _OrderOutId;
                        
                        private System.DateTime _StartDate;
                        
                        private System.DateTime _EndDate;
                        
                        private string _Status;
                        
                        private int _Number;
                        
                        private string _Street;
                        
                        private int _District;
                        
                        private string _Country;
                        
                        private string _City;
                        
                        private int _ZipCode;
                        
                        private int _DeliveryMethodId;
                        
                        private double _Cost;
                        
                        private bool InsertDeliveryBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["OrderOutId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["OrderOutId"].ToString() != String.Empty))
                                    {
                                        this._OrderOutId = int.Parse(message.ContentArgumentsIn["OrderOutId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._OrderOutId = 0;
                                }
                                if ((message.ContentArgumentsIn["StartDate"] != null))
                                {
                                    if ((message.ContentArgumentsIn["StartDate"].ToString() != String.Empty))
                                    {
                                        this._StartDate = DateTime.Parse(message.ContentArgumentsIn["StartDate"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._StartDate = DateTime.Now;
                                }
                                if ((message.ContentArgumentsIn["EndDate"] != null))
                                {
                                    if ((message.ContentArgumentsIn["EndDate"].ToString() != String.Empty))
                                    {
                                        this._EndDate = DateTime.Parse(message.ContentArgumentsIn["EndDate"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._EndDate = DateTime.Now;
                                }
                                if ((message.ContentArgumentsIn["Status"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Status"].ToString() != String.Empty))
                                    {
                                        this._Status = message.ContentArgumentsIn["Status"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Status = "";
                                }
                                if ((message.ContentArgumentsIn["Number"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Number"].ToString() != String.Empty))
                                    {
                                        this._Number = int.Parse(message.ContentArgumentsIn["Number"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Number = 0;
                                }
                                if ((message.ContentArgumentsIn["Street"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Street"].ToString() != String.Empty))
                                    {
                                        this._Street = message.ContentArgumentsIn["Street"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Street = "";
                                }
                                if ((message.ContentArgumentsIn["District"] != null))
                                {
                                    if ((message.ContentArgumentsIn["District"].ToString() != String.Empty))
                                    {
                                        this._District = int.Parse(message.ContentArgumentsIn["District"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._District = 0;
                                }
                                if ((message.ContentArgumentsIn["Country"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Country"].ToString() != String.Empty))
                                    {
                                        this._Country = message.ContentArgumentsIn["Country"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Country = "";
                                }
                                if ((message.ContentArgumentsIn["City"] != null))
                                {
                                    if ((message.ContentArgumentsIn["City"].ToString() != String.Empty))
                                    {
                                        this._City = message.ContentArgumentsIn["City"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._City = "";
                                }
                                if ((message.ContentArgumentsIn["ZipCode"] != null))
                                {
                                    if ((message.ContentArgumentsIn["ZipCode"].ToString() != String.Empty))
                                    {
                                        this._ZipCode = int.Parse(message.ContentArgumentsIn["ZipCode"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._ZipCode = 0;
                                }
                                if ((message.ContentArgumentsIn["DeliveryMethodId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["DeliveryMethodId"].ToString() != String.Empty))
                                    {
                                        this._DeliveryMethodId = int.Parse(message.ContentArgumentsIn["DeliveryMethodId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._DeliveryMethodId = 0;
                                }
                                if ((message.ContentArgumentsIn["Cost"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Cost"].ToString() != String.Empty))
                                    {
                                        this._Cost = float.Parse(message.ContentArgumentsIn["Cost"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Cost = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertDeliveryEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._OrderOutId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Status) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._Number < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("LetterOrDigit", this._Street) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._District < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Country) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._City) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._ZipCode < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._DeliveryMethodId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Cost < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertDeliveryPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertDelivery", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                if ((this._OrderOutId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter OrderOutIdprm = cmd.Parameters.Add("OrderOutId", SqlDbType.Int);
                                    OrderOutIdprm.Direction = ParameterDirection.Input;
                                    OrderOutIdprm.Value = this._OrderOutId;
                                }
                                System.Data.SqlClient.SqlParameter StartDateprm = cmd.Parameters.Add("StartDate", SqlDbType.DateTime);
                                StartDateprm.Direction = ParameterDirection.Input;
                                StartDateprm.Value = this._StartDate;
                                System.Data.SqlClient.SqlParameter EndDateprm = cmd.Parameters.Add("EndDate", SqlDbType.DateTime);
                                EndDateprm.Direction = ParameterDirection.Input;
                                EndDateprm.Value = this._EndDate;
                                System.Data.SqlClient.SqlParameter Statusprm = cmd.Parameters.Add("Status", SqlDbType.Char, 30);
                                Statusprm.Direction = ParameterDirection.Input;
                                Statusprm.Value = this._Status;
                                System.Data.SqlClient.SqlParameter Numberprm = cmd.Parameters.Add("Number", SqlDbType.Int);
                                Numberprm.Direction = ParameterDirection.Input;
                                Numberprm.Value = this._Number;
                                System.Data.SqlClient.SqlParameter Streetprm = cmd.Parameters.Add("Street", SqlDbType.Char, 100);
                                Streetprm.Direction = ParameterDirection.Input;
                                Streetprm.Value = this._Street;
                                System.Data.SqlClient.SqlParameter Districtprm = cmd.Parameters.Add("District", SqlDbType.Int);
                                Districtprm.Direction = ParameterDirection.Input;
                                Districtprm.Value = this._District;
                                System.Data.SqlClient.SqlParameter Countryprm = cmd.Parameters.Add("Country", SqlDbType.Char, 30);
                                Countryprm.Direction = ParameterDirection.Input;
                                Countryprm.Value = this._Country;
                                System.Data.SqlClient.SqlParameter Cityprm = cmd.Parameters.Add("City", SqlDbType.Char, 30);
                                Cityprm.Direction = ParameterDirection.Input;
                                Cityprm.Value = this._City;
                                System.Data.SqlClient.SqlParameter ZipCodeprm = cmd.Parameters.Add("ZipCode", SqlDbType.Int);
                                ZipCodeprm.Direction = ParameterDirection.Input;
                                ZipCodeprm.Value = this._ZipCode;
                                if ((this._DeliveryMethodId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter DeliveryMethodIdprm = cmd.Parameters.Add("DeliveryMethodId", SqlDbType.Int);
                                    DeliveryMethodIdprm.Direction = ParameterDirection.Input;
                                    DeliveryMethodIdprm.Value = this._DeliveryMethodId;
                                }
                                System.Data.SqlClient.SqlParameter Costprm = cmd.Parameters.Add("Cost", SqlDbType.Float);
                                Costprm.Direction = ParameterDirection.Input;
                                Costprm.Value = this._Cost;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertDeliveryCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertDeliveryBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertDeliveryEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertDeliveryPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateDeliveryCapability
                    {
                        
                        private int _OrderOutId;
                        
                        private System.DateTime _StartDate;
                        
                        private System.DateTime _EndDate;
                        
                        private string _Status;
                        
                        private int _Number;
                        
                        private string _Street;
                        
                        private int _District;
                        
                        private string _Country;
                        
                        private string _City;
                        
                        private int _ZipCode;
                        
                        private int _DeliveryMethodId;
                        
                        private double _Cost;
                        
                        private bool UpdateDeliveryBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["OrderOutId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["OrderOutId"].ToString() != String.Empty))
                                    {
                                        this._OrderOutId = int.Parse(message.ContentArgumentsIn["OrderOutId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._OrderOutId = 0;
                                }
                                if ((message.ContentArgumentsIn["StartDate"] != null))
                                {
                                    if ((message.ContentArgumentsIn["StartDate"].ToString() != String.Empty))
                                    {
                                        this._StartDate = DateTime.Parse(message.ContentArgumentsIn["StartDate"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._StartDate = DateTime.Now;
                                }
                                if ((message.ContentArgumentsIn["EndDate"] != null))
                                {
                                    if ((message.ContentArgumentsIn["EndDate"].ToString() != String.Empty))
                                    {
                                        this._EndDate = DateTime.Parse(message.ContentArgumentsIn["EndDate"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._EndDate = DateTime.Now;
                                }
                                if ((message.ContentArgumentsIn["Status"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Status"].ToString() != String.Empty))
                                    {
                                        this._Status = message.ContentArgumentsIn["Status"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Status = "";
                                }
                                if ((message.ContentArgumentsIn["Number"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Number"].ToString() != String.Empty))
                                    {
                                        this._Number = int.Parse(message.ContentArgumentsIn["Number"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Number = 0;
                                }
                                if ((message.ContentArgumentsIn["Street"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Street"].ToString() != String.Empty))
                                    {
                                        this._Street = message.ContentArgumentsIn["Street"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Street = "";
                                }
                                if ((message.ContentArgumentsIn["District"] != null))
                                {
                                    if ((message.ContentArgumentsIn["District"].ToString() != String.Empty))
                                    {
                                        this._District = int.Parse(message.ContentArgumentsIn["District"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._District = 0;
                                }
                                if ((message.ContentArgumentsIn["Country"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Country"].ToString() != String.Empty))
                                    {
                                        this._Country = message.ContentArgumentsIn["Country"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Country = "";
                                }
                                if ((message.ContentArgumentsIn["City"] != null))
                                {
                                    if ((message.ContentArgumentsIn["City"].ToString() != String.Empty))
                                    {
                                        this._City = message.ContentArgumentsIn["City"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._City = "";
                                }
                                if ((message.ContentArgumentsIn["ZipCode"] != null))
                                {
                                    if ((message.ContentArgumentsIn["ZipCode"].ToString() != String.Empty))
                                    {
                                        this._ZipCode = int.Parse(message.ContentArgumentsIn["ZipCode"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._ZipCode = 0;
                                }
                                if ((message.ContentArgumentsIn["DeliveryMethodId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["DeliveryMethodId"].ToString() != String.Empty))
                                    {
                                        this._DeliveryMethodId = int.Parse(message.ContentArgumentsIn["DeliveryMethodId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._DeliveryMethodId = 0;
                                }
                                if ((message.ContentArgumentsIn["Cost"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Cost"].ToString() != String.Empty))
                                    {
                                        this._Cost = float.Parse(message.ContentArgumentsIn["Cost"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Cost = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateDeliveryEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._OrderOutId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Status) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._Number < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("LetterOrDigit", this._Street) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._District < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Country) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._City) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._ZipCode < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._DeliveryMethodId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Cost < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateDeliveryPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateDelivery", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                if ((this._OrderOutId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter OrderOutIdprm = cmd.Parameters.Add("OrderOutId", SqlDbType.Int);
                                    OrderOutIdprm.Direction = ParameterDirection.Input;
                                    OrderOutIdprm.Value = this._OrderOutId;
                                }
                                System.Data.SqlClient.SqlParameter StartDateprm = cmd.Parameters.Add("StartDate", SqlDbType.DateTime);
                                StartDateprm.Direction = ParameterDirection.Input;
                                StartDateprm.Value = this._StartDate;
                                System.Data.SqlClient.SqlParameter EndDateprm = cmd.Parameters.Add("EndDate", SqlDbType.DateTime);
                                EndDateprm.Direction = ParameterDirection.Input;
                                EndDateprm.Value = this._EndDate;
                                System.Data.SqlClient.SqlParameter Statusprm = cmd.Parameters.Add("Status", SqlDbType.Char, 30);
                                Statusprm.Direction = ParameterDirection.Input;
                                Statusprm.Value = this._Status;
                                System.Data.SqlClient.SqlParameter Numberprm = cmd.Parameters.Add("Number", SqlDbType.Int);
                                Numberprm.Direction = ParameterDirection.Input;
                                Numberprm.Value = this._Number;
                                System.Data.SqlClient.SqlParameter Streetprm = cmd.Parameters.Add("Street", SqlDbType.Char, 100);
                                Streetprm.Direction = ParameterDirection.Input;
                                Streetprm.Value = this._Street;
                                System.Data.SqlClient.SqlParameter Districtprm = cmd.Parameters.Add("District", SqlDbType.Int);
                                Districtprm.Direction = ParameterDirection.Input;
                                Districtprm.Value = this._District;
                                System.Data.SqlClient.SqlParameter Countryprm = cmd.Parameters.Add("Country", SqlDbType.Char, 30);
                                Countryprm.Direction = ParameterDirection.Input;
                                Countryprm.Value = this._Country;
                                System.Data.SqlClient.SqlParameter Cityprm = cmd.Parameters.Add("City", SqlDbType.Char, 30);
                                Cityprm.Direction = ParameterDirection.Input;
                                Cityprm.Value = this._City;
                                System.Data.SqlClient.SqlParameter ZipCodeprm = cmd.Parameters.Add("ZipCode", SqlDbType.Int);
                                ZipCodeprm.Direction = ParameterDirection.Input;
                                ZipCodeprm.Value = this._ZipCode;
                                if ((this._DeliveryMethodId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter DeliveryMethodIdprm = cmd.Parameters.Add("DeliveryMethodId", SqlDbType.Int);
                                    DeliveryMethodIdprm.Direction = ParameterDirection.Input;
                                    DeliveryMethodIdprm.Value = this._DeliveryMethodId;
                                }
                                System.Data.SqlClient.SqlParameter Costprm = cmd.Parameters.Add("Cost", SqlDbType.Float);
                                Costprm.Direction = ParameterDirection.Input;
                                Costprm.Value = this._Cost;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateDeliveryCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateDeliveryBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateDeliveryEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateDeliveryPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteDeliveryCapability
                    {
                        
                        private int _OrderOutId;
                        
                        private bool DeleteDeliveryBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["OrderOutId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["OrderOutId"].ToString() != String.Empty))
                                    {
                                        this._OrderOutId = int.Parse(message.ContentArgumentsIn["OrderOutId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._OrderOutId = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteDeliveryEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._OrderOutId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteDeliveryPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteDelivery", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                if ((this._OrderOutId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter OrderOutIdprm = cmd.Parameters.Add("OrderOutId", SqlDbType.Int);
                                    OrderOutIdprm.Direction = ParameterDirection.Input;
                                    OrderOutIdprm.Value = this._OrderOutId;
                                }
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteDeliveryCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteDeliveryBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteDeliveryEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteDeliveryPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectAllDeliveryCapability
                    {
                        
                        private int _SelectAllDeliveryCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectAllDeliveryBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectAllDeliveryEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAllDelivery", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectAllDeliveryPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAllDelivery", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectAllDeliveryCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing records...");
                            System.Data.DataTable temp = null;
                            bool v = this.SelectAllDeliveryBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SelectAllDeliveryCount = this.SelectAllDeliveryEventFun();
                                    message.ContentArgumentsOut.Add("SelectAllDeliveryCount", this._SelectAllDeliveryCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectAllDeliveryPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectDeliveryByOrderOutIdCapability
                    {
                        
                        private int _OrderOutId;
                        
                        private int _SelectDeliveryByOrderOutIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectDeliveryByOrderOutIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["OrderOutId"].ToString() != String.Empty))
                                {
                                    this._OrderOutId = int.Parse(message.ContentArgumentsIn["OrderOutId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._OrderOutId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectDeliveryByOrderOutIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectDeliveryByOrderOutId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter OrderOutIdprm = cmd.Parameters.Add("@OrderOutId", SqlDbType.Int);
                                OrderOutIdprm.Direction = ParameterDirection.Input;
                                OrderOutIdprm.Value = this._OrderOutId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectDeliveryByOrderOutIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectDeliveryByOrderOutId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter OrderOutIdprm = cmd.Parameters.Add("@OrderOutId", SqlDbType.Int);
                                OrderOutIdprm.Direction = ParameterDirection.Input;
                                OrderOutIdprm.Value = this._OrderOutId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectDeliveryByOrderOutIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectDeliveryByOrderOutIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectDeliveryByOrderOutIdCount = this.SelectDeliveryByOrderOutIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectDeliveryByOrderOutIdCount", this._SelectDeliveryByOrderOutIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectDeliveryByOrderOutIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectDeliveryByDeliveryMethodIdCapability
                    {
                        
                        private int _DeliveryMethodId;
                        
                        private int _SelectDeliveryByDeliveryMethodIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectDeliveryByDeliveryMethodIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["DeliveryMethodId"].ToString() != String.Empty))
                                {
                                    this._DeliveryMethodId = int.Parse(message.ContentArgumentsIn["DeliveryMethodId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._DeliveryMethodId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectDeliveryByDeliveryMethodIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectDeliveryByDeliveryMethodId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter DeliveryMethodIdprm = cmd.Parameters.Add("@DeliveryMethodId", SqlDbType.Int);
                                DeliveryMethodIdprm.Direction = ParameterDirection.Input;
                                DeliveryMethodIdprm.Value = this._DeliveryMethodId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectDeliveryByDeliveryMethodIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectDeliveryByDeliveryMethodId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter DeliveryMethodIdprm = cmd.Parameters.Add("@DeliveryMethodId", SqlDbType.Int);
                                DeliveryMethodIdprm.Direction = ParameterDirection.Input;
                                DeliveryMethodIdprm.Value = this._DeliveryMethodId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectDeliveryByDeliveryMethodIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectDeliveryByDeliveryMethodIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectDeliveryByDeliveryMethodIdCount = this.SelectDeliveryByDeliveryMethodIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectDeliveryByDeliveryMethodIdCount", this._SelectDeliveryByDeliveryMethodIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectDeliveryByDeliveryMethodIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectMaxIdDeliveryMethodCapability
                    {
                        
                        private object SelectMaxIdDeliveryMethodBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdDeliveryMethod", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdDeliveryMethodEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdDeliveryMethodPlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdDeliveryMethodCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdDeliveryMethodBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdDeliveryMethodEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdDeliveryMethodPlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertDeliveryMethodCapability
                    {
                        
                        private int _Id;
                        
                        private string _Method;
                        
                        private double _Cost;
                        
                        private double _PerItemCost;
                        
                        private int _MaxDeliveryTime;
                        
                        private int _MinDeliveryTime;
                        
                        private bool InsertDeliveryMethodBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["Method"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Method"].ToString() != String.Empty))
                                    {
                                        this._Method = message.ContentArgumentsIn["Method"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Method = "";
                                }
                                if ((message.ContentArgumentsIn["Cost"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Cost"].ToString() != String.Empty))
                                    {
                                        this._Cost = float.Parse(message.ContentArgumentsIn["Cost"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Cost = 0;
                                }
                                if ((message.ContentArgumentsIn["PerItemCost"] != null))
                                {
                                    if ((message.ContentArgumentsIn["PerItemCost"].ToString() != String.Empty))
                                    {
                                        this._PerItemCost = float.Parse(message.ContentArgumentsIn["PerItemCost"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._PerItemCost = 0;
                                }
                                if ((message.ContentArgumentsIn["MaxDeliveryTime"] != null))
                                {
                                    if ((message.ContentArgumentsIn["MaxDeliveryTime"].ToString() != String.Empty))
                                    {
                                        this._MaxDeliveryTime = int.Parse(message.ContentArgumentsIn["MaxDeliveryTime"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._MaxDeliveryTime = 0;
                                }
                                if ((message.ContentArgumentsIn["MinDeliveryTime"] != null))
                                {
                                    if ((message.ContentArgumentsIn["MinDeliveryTime"].ToString() != String.Empty))
                                    {
                                        this._MinDeliveryTime = int.Parse(message.ContentArgumentsIn["MinDeliveryTime"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._MinDeliveryTime = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertDeliveryMethodEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Method) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._Cost < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._PerItemCost < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._MaxDeliveryTime < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._MinDeliveryTime < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertDeliveryMethodPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertDeliveryMethod", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter Methodprm = cmd.Parameters.Add("Method", SqlDbType.Char, 30);
                                Methodprm.Direction = ParameterDirection.Input;
                                Methodprm.Value = this._Method;
                                System.Data.SqlClient.SqlParameter Costprm = cmd.Parameters.Add("Cost", SqlDbType.Float);
                                Costprm.Direction = ParameterDirection.Input;
                                Costprm.Value = this._Cost;
                                System.Data.SqlClient.SqlParameter PerItemCostprm = cmd.Parameters.Add("PerItemCost", SqlDbType.Float);
                                PerItemCostprm.Direction = ParameterDirection.Input;
                                PerItemCostprm.Value = this._PerItemCost;
                                System.Data.SqlClient.SqlParameter MaxDeliveryTimeprm = cmd.Parameters.Add("MaxDeliveryTime", SqlDbType.Int);
                                MaxDeliveryTimeprm.Direction = ParameterDirection.Input;
                                MaxDeliveryTimeprm.Value = this._MaxDeliveryTime;
                                System.Data.SqlClient.SqlParameter MinDeliveryTimeprm = cmd.Parameters.Add("MinDeliveryTime", SqlDbType.Int);
                                MinDeliveryTimeprm.Direction = ParameterDirection.Input;
                                MinDeliveryTimeprm.Value = this._MinDeliveryTime;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertDeliveryMethodCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertDeliveryMethodBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertDeliveryMethodEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertDeliveryMethodPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateDeliveryMethodCapability
                    {
                        
                        private int _Id;
                        
                        private string _Method;
                        
                        private double _Cost;
                        
                        private double _PerItemCost;
                        
                        private int _MaxDeliveryTime;
                        
                        private int _MinDeliveryTime;
                        
                        private bool UpdateDeliveryMethodBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["Method"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Method"].ToString() != String.Empty))
                                    {
                                        this._Method = message.ContentArgumentsIn["Method"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Method = "";
                                }
                                if ((message.ContentArgumentsIn["Cost"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Cost"].ToString() != String.Empty))
                                    {
                                        this._Cost = float.Parse(message.ContentArgumentsIn["Cost"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Cost = 0;
                                }
                                if ((message.ContentArgumentsIn["PerItemCost"] != null))
                                {
                                    if ((message.ContentArgumentsIn["PerItemCost"].ToString() != String.Empty))
                                    {
                                        this._PerItemCost = float.Parse(message.ContentArgumentsIn["PerItemCost"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._PerItemCost = 0;
                                }
                                if ((message.ContentArgumentsIn["MaxDeliveryTime"] != null))
                                {
                                    if ((message.ContentArgumentsIn["MaxDeliveryTime"].ToString() != String.Empty))
                                    {
                                        this._MaxDeliveryTime = int.Parse(message.ContentArgumentsIn["MaxDeliveryTime"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._MaxDeliveryTime = 0;
                                }
                                if ((message.ContentArgumentsIn["MinDeliveryTime"] != null))
                                {
                                    if ((message.ContentArgumentsIn["MinDeliveryTime"].ToString() != String.Empty))
                                    {
                                        this._MinDeliveryTime = int.Parse(message.ContentArgumentsIn["MinDeliveryTime"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._MinDeliveryTime = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateDeliveryMethodEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Method) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._Cost < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._PerItemCost < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._MaxDeliveryTime < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._MinDeliveryTime < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateDeliveryMethodPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateDeliveryMethod", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter Methodprm = cmd.Parameters.Add("Method", SqlDbType.Char, 30);
                                Methodprm.Direction = ParameterDirection.Input;
                                Methodprm.Value = this._Method;
                                System.Data.SqlClient.SqlParameter Costprm = cmd.Parameters.Add("Cost", SqlDbType.Float);
                                Costprm.Direction = ParameterDirection.Input;
                                Costprm.Value = this._Cost;
                                System.Data.SqlClient.SqlParameter PerItemCostprm = cmd.Parameters.Add("PerItemCost", SqlDbType.Float);
                                PerItemCostprm.Direction = ParameterDirection.Input;
                                PerItemCostprm.Value = this._PerItemCost;
                                System.Data.SqlClient.SqlParameter MaxDeliveryTimeprm = cmd.Parameters.Add("MaxDeliveryTime", SqlDbType.Int);
                                MaxDeliveryTimeprm.Direction = ParameterDirection.Input;
                                MaxDeliveryTimeprm.Value = this._MaxDeliveryTime;
                                System.Data.SqlClient.SqlParameter MinDeliveryTimeprm = cmd.Parameters.Add("MinDeliveryTime", SqlDbType.Int);
                                MinDeliveryTimeprm.Direction = ParameterDirection.Input;
                                MinDeliveryTimeprm.Value = this._MinDeliveryTime;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateDeliveryMethodCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateDeliveryMethodBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateDeliveryMethodEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateDeliveryMethodPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteDeliveryMethodCapability
                    {
                        
                        private int _Id;
                        
                        private bool DeleteDeliveryMethodBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteDeliveryMethodEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteDeliveryMethodPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteDeliveryMethod", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteDeliveryMethodCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteDeliveryMethodBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteDeliveryMethodEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteDeliveryMethodPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectAllDeliveryMethodCapability
                    {
                        
                        private int _SelectAllDeliveryMethodCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectAllDeliveryMethodBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectAllDeliveryMethodEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAllDeliveryMethod", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectAllDeliveryMethodPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAllDeliveryMethod", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectAllDeliveryMethodCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing records...");
                            System.Data.DataTable temp = null;
                            bool v = this.SelectAllDeliveryMethodBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SelectAllDeliveryMethodCount = this.SelectAllDeliveryMethodEventFun();
                                    message.ContentArgumentsOut.Add("SelectAllDeliveryMethodCount", this._SelectAllDeliveryMethodCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectAllDeliveryMethodPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                }
            }
            
            public class LostGoodAgent
            {
                
                private TrackDeliveryGoal _TrackDeliveryGoal = new TrackDeliveryGoal();
                
                public ACLMessage Execute(ACLMessage message)
                {
                    return _TrackDeliveryGoal.TrackDeliveryGoalExecute(message);
                }
                
                public class TrackDeliveryGoal
                {
                    
                    private object _Success;
                    
                    private SelectMaxIdDeliveryLogCapability _SelectMaxIdDeliveryLogCapability = new SelectMaxIdDeliveryLogCapability();
                    
                    private InsertDeliveryLogCapability _InsertDeliveryLogCapability = new InsertDeliveryLogCapability();
                    
                    private UpdateDeliveryLogCapability _UpdateDeliveryLogCapability = new UpdateDeliveryLogCapability();
                    
                    private DeleteDeliveryLogCapability _DeleteDeliveryLogCapability = new DeleteDeliveryLogCapability();
                    
                    private SelectDeliveryLogByDeliveryIdCapability _SelectDeliveryLogByDeliveryIdCapability = new SelectDeliveryLogByDeliveryIdCapability();
                    
                    public ACLMessage TrackDeliveryGoalExecute(ACLMessage message)
                    {
                        if ((message.Content == "SelectMaxIdDeliveryLogCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "LostGoodAgent";
                            _Success = _SelectMaxIdDeliveryLogCapability.SelectMaxIdDeliveryLogCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertDeliveryLogCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "LostGoodAgent";
                            _Success = _InsertDeliveryLogCapability.InsertDeliveryLogCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateDeliveryLogCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "LostGoodAgent";
                            _Success = _UpdateDeliveryLogCapability.UpdateDeliveryLogCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteDeliveryLogCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "LostGoodAgent";
                            _Success = _DeleteDeliveryLogCapability.DeleteDeliveryLogCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectDeliveryLogByDeliveryIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "LostGoodAgent";
                            _Success = _SelectDeliveryLogByDeliveryIdCapability.SelectDeliveryLogByDeliveryIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        return null;
                    }
                    
                    public class SelectMaxIdDeliveryLogCapability
                    {
                        
                        private object SelectMaxIdDeliveryLogBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdDeliveryLog", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdDeliveryLogEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdDeliveryLogPlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdDeliveryLogCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdDeliveryLogBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdDeliveryLogEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdDeliveryLogPlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertDeliveryLogCapability
                    {
                        
                        private int _Id;
                        
                        private System.DateTime _Date;
                        
                        private System.DateTime _TimeOut;
                        
                        private System.DateTime _TimeIn;
                        
                        private string _Source;
                        
                        private string _Destination;
                        
                        private int _DeliveryId;
                        
                        private bool InsertDeliveryLogBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["Date"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Date"].ToString() != String.Empty))
                                    {
                                        this._Date = DateTime.Parse(message.ContentArgumentsIn["Date"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Date = DateTime.Now;
                                }
                                if ((message.ContentArgumentsIn["TimeOut"] != null))
                                {
                                    if ((message.ContentArgumentsIn["TimeOut"].ToString() != String.Empty))
                                    {
                                        this._TimeOut = DateTime.Parse(message.ContentArgumentsIn["TimeOut"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._TimeOut = DateTime.Now;
                                }
                                if ((message.ContentArgumentsIn["TimeIn"] != null))
                                {
                                    if ((message.ContentArgumentsIn["TimeIn"].ToString() != String.Empty))
                                    {
                                        this._TimeIn = DateTime.Parse(message.ContentArgumentsIn["TimeIn"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._TimeIn = DateTime.Now;
                                }
                                if ((message.ContentArgumentsIn["Source"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Source"].ToString() != String.Empty))
                                    {
                                        this._Source = message.ContentArgumentsIn["Source"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Source = "";
                                }
                                if ((message.ContentArgumentsIn["Destination"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Destination"].ToString() != String.Empty))
                                    {
                                        this._Destination = message.ContentArgumentsIn["Destination"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Destination = "";
                                }
                                if ((message.ContentArgumentsIn["DeliveryId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["DeliveryId"].ToString() != String.Empty))
                                    {
                                        this._DeliveryId = int.Parse(message.ContentArgumentsIn["DeliveryId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._DeliveryId = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertDeliveryLogEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("LetterOrDigit", this._Source) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("LetterOrDigit", this._Destination) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._DeliveryId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertDeliveryLogPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertDeliveryLog", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter Dateprm = cmd.Parameters.Add("Date", SqlDbType.DateTime);
                                Dateprm.Direction = ParameterDirection.Input;
                                Dateprm.Value = this._Date;
                                System.Data.SqlClient.SqlParameter TimeOutprm = cmd.Parameters.Add("TimeOut", SqlDbType.DateTime);
                                TimeOutprm.Direction = ParameterDirection.Input;
                                TimeOutprm.Value = this._TimeOut;
                                System.Data.SqlClient.SqlParameter TimeInprm = cmd.Parameters.Add("TimeIn", SqlDbType.DateTime);
                                TimeInprm.Direction = ParameterDirection.Input;
                                TimeInprm.Value = this._TimeIn;
                                System.Data.SqlClient.SqlParameter Sourceprm = cmd.Parameters.Add("Source", SqlDbType.Char, 100);
                                Sourceprm.Direction = ParameterDirection.Input;
                                Sourceprm.Value = this._Source;
                                System.Data.SqlClient.SqlParameter Destinationprm = cmd.Parameters.Add("Destination", SqlDbType.Char, 100);
                                Destinationprm.Direction = ParameterDirection.Input;
                                Destinationprm.Value = this._Destination;
                                if ((this._DeliveryId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter DeliveryIdprm = cmd.Parameters.Add("DeliveryId", SqlDbType.Int);
                                    DeliveryIdprm.Direction = ParameterDirection.Input;
                                    DeliveryIdprm.Value = this._DeliveryId;
                                }
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertDeliveryLogCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertDeliveryLogBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertDeliveryLogEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertDeliveryLogPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateDeliveryLogCapability
                    {
                        
                        private int _Id;
                        
                        private System.DateTime _Date;
                        
                        private System.DateTime _TimeOut;
                        
                        private System.DateTime _TimeIn;
                        
                        private string _Source;
                        
                        private string _Destination;
                        
                        private int _DeliveryId;
                        
                        private bool UpdateDeliveryLogBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["Date"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Date"].ToString() != String.Empty))
                                    {
                                        this._Date = DateTime.Parse(message.ContentArgumentsIn["Date"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Date = DateTime.Now;
                                }
                                if ((message.ContentArgumentsIn["TimeOut"] != null))
                                {
                                    if ((message.ContentArgumentsIn["TimeOut"].ToString() != String.Empty))
                                    {
                                        this._TimeOut = DateTime.Parse(message.ContentArgumentsIn["TimeOut"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._TimeOut = DateTime.Now;
                                }
                                if ((message.ContentArgumentsIn["TimeIn"] != null))
                                {
                                    if ((message.ContentArgumentsIn["TimeIn"].ToString() != String.Empty))
                                    {
                                        this._TimeIn = DateTime.Parse(message.ContentArgumentsIn["TimeIn"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._TimeIn = DateTime.Now;
                                }
                                if ((message.ContentArgumentsIn["Source"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Source"].ToString() != String.Empty))
                                    {
                                        this._Source = message.ContentArgumentsIn["Source"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Source = "";
                                }
                                if ((message.ContentArgumentsIn["Destination"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Destination"].ToString() != String.Empty))
                                    {
                                        this._Destination = message.ContentArgumentsIn["Destination"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Destination = "";
                                }
                                if ((message.ContentArgumentsIn["DeliveryId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["DeliveryId"].ToString() != String.Empty))
                                    {
                                        this._DeliveryId = int.Parse(message.ContentArgumentsIn["DeliveryId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._DeliveryId = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateDeliveryLogEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("LetterOrDigit", this._Source) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("LetterOrDigit", this._Destination) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._DeliveryId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateDeliveryLogPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateDeliveryLog", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter Dateprm = cmd.Parameters.Add("Date", SqlDbType.DateTime);
                                Dateprm.Direction = ParameterDirection.Input;
                                Dateprm.Value = this._Date;
                                System.Data.SqlClient.SqlParameter TimeOutprm = cmd.Parameters.Add("TimeOut", SqlDbType.DateTime);
                                TimeOutprm.Direction = ParameterDirection.Input;
                                TimeOutprm.Value = this._TimeOut;
                                System.Data.SqlClient.SqlParameter TimeInprm = cmd.Parameters.Add("TimeIn", SqlDbType.DateTime);
                                TimeInprm.Direction = ParameterDirection.Input;
                                TimeInprm.Value = this._TimeIn;
                                System.Data.SqlClient.SqlParameter Sourceprm = cmd.Parameters.Add("Source", SqlDbType.Char, 100);
                                Sourceprm.Direction = ParameterDirection.Input;
                                Sourceprm.Value = this._Source;
                                System.Data.SqlClient.SqlParameter Destinationprm = cmd.Parameters.Add("Destination", SqlDbType.Char, 100);
                                Destinationprm.Direction = ParameterDirection.Input;
                                Destinationprm.Value = this._Destination;
                                if ((this._DeliveryId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter DeliveryIdprm = cmd.Parameters.Add("DeliveryId", SqlDbType.Int);
                                    DeliveryIdprm.Direction = ParameterDirection.Input;
                                    DeliveryIdprm.Value = this._DeliveryId;
                                }
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateDeliveryLogCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateDeliveryLogBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateDeliveryLogEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateDeliveryLogPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteDeliveryLogCapability
                    {
                        
                        private int _Id;
                        
                        private bool DeleteDeliveryLogBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteDeliveryLogEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteDeliveryLogPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteDeliveryLog", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteDeliveryLogCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteDeliveryLogBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteDeliveryLogEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteDeliveryLogPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectDeliveryLogByDeliveryIdCapability
                    {
                        
                        private int _DeliveryId;
                        
                        private int _SelectDeliveryLogByDeliveryIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectDeliveryLogByDeliveryIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["DeliveryId"].ToString() != String.Empty))
                                {
                                    this._DeliveryId = int.Parse(message.ContentArgumentsIn["DeliveryId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._DeliveryId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectDeliveryLogByDeliveryIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectDeliveryLogByDeliveryId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter DeliveryIdprm = cmd.Parameters.Add("@DeliveryId", SqlDbType.Int);
                                DeliveryIdprm.Direction = ParameterDirection.Input;
                                DeliveryIdprm.Value = this._DeliveryId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectDeliveryLogByDeliveryIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectDeliveryLogByDeliveryId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter DeliveryIdprm = cmd.Parameters.Add("@DeliveryId", SqlDbType.Int);
                                DeliveryIdprm.Direction = ParameterDirection.Input;
                                DeliveryIdprm.Value = this._DeliveryId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectDeliveryLogByDeliveryIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectDeliveryLogByDeliveryIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectDeliveryLogByDeliveryIdCount = this.SelectDeliveryLogByDeliveryIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectDeliveryLogByDeliveryIdCount", this._SelectDeliveryLogByDeliveryIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectDeliveryLogByDeliveryIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                }
            }
            
            public class SearchAgent
            {
                
                private SearchGoal _SearchGoal = new SearchGoal();
                
                public ACLMessage Execute(ACLMessage message)
                {
                    return _SearchGoal.SearchGoalExecute(message);
                }
                
                public class SearchGoal
                {
                    
                    private object _Success;
                    
                    private SearchAuthorByNameCapability _SearchAuthorByNameCapability = new SearchAuthorByNameCapability();
                    
                    private SearchBookByISBNCapability _SearchBookByISBNCapability = new SearchBookByISBNCapability();
                    
                    private SearchBookByTitleCapability _SearchBookByTitleCapability = new SearchBookByTitleCapability();
                    
                    private SearchBookByEditionNumberCapability _SearchBookByEditionNumberCapability = new SearchBookByEditionNumberCapability();
                    
                    private SearchBookByCopyRightCapability _SearchBookByCopyRightCapability = new SearchBookByCopyRightCapability();
                    
                    private SearchBookByBookPriceCapability _SearchBookByBookPriceCapability = new SearchBookByBookPriceCapability();
                    
                    private SearchCategoryByNameCapability _SearchCategoryByNameCapability = new SearchCategoryByNameCapability();
                    
                    private SearchCustomerByFirstNameCapability _SearchCustomerByFirstNameCapability = new SearchCustomerByFirstNameCapability();
                    
                    private SearchCustomerByLastNameCapability _SearchCustomerByLastNameCapability = new SearchCustomerByLastNameCapability();
                    
                    private SearchCustomerByMiddleNameCapability _SearchCustomerByMiddleNameCapability = new SearchCustomerByMiddleNameCapability();
                    
                    private SearchCustomer_PhoneByPhoneCapability _SearchCustomer_PhoneByPhoneCapability = new SearchCustomer_PhoneByPhoneCapability();
                    
                    private SearchDeliveryByOrderOutIdCapability _SearchDeliveryByOrderOutIdCapability = new SearchDeliveryByOrderOutIdCapability();
                    
                    private SearchDeliveryMethodByMethodCapability _SearchDeliveryMethodByMethodCapability = new SearchDeliveryMethodByMethodCapability();
                    
                    private SearchOrderInByIdCapability _SearchOrderInByIdCapability = new SearchOrderInByIdCapability();
                    
                    private SearchOrderOutByIdCapability _SearchOrderOutByIdCapability = new SearchOrderOutByIdCapability();
                    
                    private SearchSupplierBySupplierNameCapability _SearchSupplierBySupplierNameCapability = new SearchSupplierBySupplierNameCapability();
                    
                    private SearchSupplier_PhoneByPhoneCapability _SearchSupplier_PhoneByPhoneCapability = new SearchSupplier_PhoneByPhoneCapability();
                    
                    public ACLMessage SearchGoalExecute(ACLMessage message)
                    {
                        if ((message.Content == "SearchAuthorByNameCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "SearchAgent";
                            _Success = _SearchAuthorByNameCapability.SearchAuthorByNameCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SearchBookByISBNCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "SearchAgent";
                            _Success = _SearchBookByISBNCapability.SearchBookByISBNCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SearchBookByTitleCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "SearchAgent";
                            _Success = _SearchBookByTitleCapability.SearchBookByTitleCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SearchBookByEditionNumberCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "SearchAgent";
                            _Success = _SearchBookByEditionNumberCapability.SearchBookByEditionNumberCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SearchBookByCopyRightCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "SearchAgent";
                            _Success = _SearchBookByCopyRightCapability.SearchBookByCopyRightCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SearchBookByBookPriceCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "SearchAgent";
                            _Success = _SearchBookByBookPriceCapability.SearchBookByBookPriceCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SearchCategoryByNameCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "SearchAgent";
                            _Success = _SearchCategoryByNameCapability.SearchCategoryByNameCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SearchCustomerByFirstNameCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "SearchAgent";
                            _Success = _SearchCustomerByFirstNameCapability.SearchCustomerByFirstNameCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SearchCustomerByLastNameCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "SearchAgent";
                            _Success = _SearchCustomerByLastNameCapability.SearchCustomerByLastNameCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SearchCustomerByMiddleNameCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "SearchAgent";
                            _Success = _SearchCustomerByMiddleNameCapability.SearchCustomerByMiddleNameCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SearchCustomer_PhoneByPhoneCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "SearchAgent";
                            _Success = _SearchCustomer_PhoneByPhoneCapability.SearchCustomer_PhoneByPhoneCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SearchDeliveryByOrderOutIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "SearchAgent";
                            _Success = _SearchDeliveryByOrderOutIdCapability.SearchDeliveryByOrderOutIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SearchDeliveryMethodByMethodCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "SearchAgent";
                            _Success = _SearchDeliveryMethodByMethodCapability.SearchDeliveryMethodByMethodCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SearchOrderInByIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "SearchAgent";
                            _Success = _SearchOrderInByIdCapability.SearchOrderInByIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SearchOrderOutByIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "SearchAgent";
                            _Success = _SearchOrderOutByIdCapability.SearchOrderOutByIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SearchSupplierBySupplierNameCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "SearchAgent";
                            _Success = _SearchSupplierBySupplierNameCapability.SearchSupplierBySupplierNameCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SearchSupplier_PhoneByPhoneCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "SearchAgent";
                            _Success = _SearchSupplier_PhoneByPhoneCapability.SearchSupplier_PhoneByPhoneCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        return null;
                    }
                    
                    public class SearchAuthorByNameCapability
                    {
                        
                        private string _Name;
                        
                        private int _SearchAuthorByNameCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SearchAuthorByNameBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["Name"].ToString() != String.Empty))
                                {
                                    this._Name = message.ContentArgumentsIn["Name"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((Validation.Validate("LetterOrDigit", this._Name) == false))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SearchAuthorByNameEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchAuthorByName", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Nameprm = cmd.Parameters.Add("@Name", SqlDbType.Char, 200);
                                Nameprm.Direction = ParameterDirection.Input;
                                Nameprm.Value = this._Name;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SearchAuthorByNamePlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchAuthorByName", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Nameprm = cmd.Parameters.Add("@Name", SqlDbType.Char, 200);
                                Nameprm.Direction = ParameterDirection.Input;
                                Nameprm.Value = this._Name;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SearchAuthorByNameCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SearchAuthorByNameBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SearchAuthorByNameCount = this.SearchAuthorByNameEventFun();
                                    message.ContentArgumentsOut.Add("SearchAuthorByNameCount", _SearchAuthorByNameCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SearchAuthorByNamePlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SearchBookByISBNCapability
                    {
                        
                        private string _ISBN;
                        
                        private int _SearchBookByISBNCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SearchBookByISBNBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["ISBN"].ToString() != String.Empty))
                                {
                                    this._ISBN = message.ContentArgumentsIn["ISBN"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((Validation.Validate("Digit", this._ISBN) == false))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SearchBookByISBNEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchBookByISBN", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter ISBNprm = cmd.Parameters.Add("@ISBN", SqlDbType.Char, 20);
                                ISBNprm.Direction = ParameterDirection.Input;
                                ISBNprm.Value = this._ISBN;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SearchBookByISBNPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchBookByISBN", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter ISBNprm = cmd.Parameters.Add("@ISBN", SqlDbType.Char, 20);
                                ISBNprm.Direction = ParameterDirection.Input;
                                ISBNprm.Value = this._ISBN;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SearchBookByISBNCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SearchBookByISBNBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SearchBookByISBNCount = this.SearchBookByISBNEventFun();
                                    message.ContentArgumentsOut.Add("SearchBookByISBNCount", _SearchBookByISBNCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SearchBookByISBNPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SearchBookByTitleCapability
                    {
                        
                        private string _Title;
                        
                        private int _SearchBookByTitleCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SearchBookByTitleBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["Title"].ToString() != String.Empty))
                                {
                                    this._Title = message.ContentArgumentsIn["Title"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((Validation.Validate("LetterOrDigit", this._Title) == false))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SearchBookByTitleEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchBookByTitle", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Titleprm = cmd.Parameters.Add("@Title", SqlDbType.Char, 500);
                                Titleprm.Direction = ParameterDirection.Input;
                                Titleprm.Value = this._Title;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SearchBookByTitlePlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchBookByTitle", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Titleprm = cmd.Parameters.Add("@Title", SqlDbType.Char, 500);
                                Titleprm.Direction = ParameterDirection.Input;
                                Titleprm.Value = this._Title;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SearchBookByTitleCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SearchBookByTitleBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SearchBookByTitleCount = this.SearchBookByTitleEventFun();
                                    message.ContentArgumentsOut.Add("SearchBookByTitleCount", _SearchBookByTitleCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SearchBookByTitlePlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SearchBookByEditionNumberCapability
                    {
                        
                        private int _EditionNumber;
                        
                        private int _SearchBookByEditionNumberCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SearchBookByEditionNumberBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["EditionNumber"].ToString() != String.Empty))
                                {
                                    this._EditionNumber = int.Parse(message.ContentArgumentsIn["EditionNumber"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._EditionNumber < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SearchBookByEditionNumberEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchBookByEditionNumber", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter EditionNumberprm = cmd.Parameters.Add("@EditionNumber", SqlDbType.Int);
                                EditionNumberprm.Direction = ParameterDirection.Input;
                                EditionNumberprm.Value = this._EditionNumber;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SearchBookByEditionNumberPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchBookByEditionNumber", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter EditionNumberprm = cmd.Parameters.Add("@EditionNumber", SqlDbType.Int);
                                EditionNumberprm.Direction = ParameterDirection.Input;
                                EditionNumberprm.Value = this._EditionNumber;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SearchBookByEditionNumberCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SearchBookByEditionNumberBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SearchBookByEditionNumberCount = this.SearchBookByEditionNumberEventFun();
                                    message.ContentArgumentsOut.Add("SearchBookByEditionNumberCount", _SearchBookByEditionNumberCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SearchBookByEditionNumberPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SearchBookByCopyRightCapability
                    {
                        
                        private int _CopyRight;
                        
                        private int _SearchBookByCopyRightCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SearchBookByCopyRightBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["CopyRight"].ToString() != String.Empty))
                                {
                                    this._CopyRight = int.Parse(message.ContentArgumentsIn["CopyRight"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._CopyRight < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SearchBookByCopyRightEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchBookByCopyRight", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter CopyRightprm = cmd.Parameters.Add("@CopyRight", SqlDbType.Int);
                                CopyRightprm.Direction = ParameterDirection.Input;
                                CopyRightprm.Value = this._CopyRight;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SearchBookByCopyRightPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchBookByCopyRight", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter CopyRightprm = cmd.Parameters.Add("@CopyRight", SqlDbType.Int);
                                CopyRightprm.Direction = ParameterDirection.Input;
                                CopyRightprm.Value = this._CopyRight;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SearchBookByCopyRightCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SearchBookByCopyRightBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SearchBookByCopyRightCount = this.SearchBookByCopyRightEventFun();
                                    message.ContentArgumentsOut.Add("SearchBookByCopyRightCount", _SearchBookByCopyRightCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SearchBookByCopyRightPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SearchBookByBookPriceCapability
                    {
                        
                        private double _BookPrice;
                        
                        private int _SearchBookByBookPriceCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SearchBookByBookPriceBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["BookPrice"].ToString() != String.Empty))
                                {
                                    this._BookPrice = float.Parse(message.ContentArgumentsIn["BookPrice"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SearchBookByBookPriceEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchBookByBookPrice", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter BookPriceprm = cmd.Parameters.Add("@BookPrice", SqlDbType.Float);
                                BookPriceprm.Direction = ParameterDirection.Input;
                                BookPriceprm.Value = this._BookPrice;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SearchBookByBookPricePlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchBookByBookPrice", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter BookPriceprm = cmd.Parameters.Add("@BookPrice", SqlDbType.Float);
                                BookPriceprm.Direction = ParameterDirection.Input;
                                BookPriceprm.Value = this._BookPrice;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SearchBookByBookPriceCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SearchBookByBookPriceBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SearchBookByBookPriceCount = this.SearchBookByBookPriceEventFun();
                                    message.ContentArgumentsOut.Add("SearchBookByBookPriceCount", _SearchBookByBookPriceCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SearchBookByBookPricePlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SearchCategoryByNameCapability
                    {
                        
                        private string _Name;
                        
                        private int _SearchCategoryByNameCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SearchCategoryByNameBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["Name"].ToString() != String.Empty))
                                {
                                    this._Name = message.ContentArgumentsIn["Name"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((Validation.Validate("LetterOrDigit", this._Name) == false))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SearchCategoryByNameEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchCategoryByName", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Nameprm = cmd.Parameters.Add("@Name", SqlDbType.Char, 200);
                                Nameprm.Direction = ParameterDirection.Input;
                                Nameprm.Value = this._Name;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SearchCategoryByNamePlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchCategoryByName", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Nameprm = cmd.Parameters.Add("@Name", SqlDbType.Char, 200);
                                Nameprm.Direction = ParameterDirection.Input;
                                Nameprm.Value = this._Name;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SearchCategoryByNameCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SearchCategoryByNameBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SearchCategoryByNameCount = this.SearchCategoryByNameEventFun();
                                    message.ContentArgumentsOut.Add("SearchCategoryByNameCount", _SearchCategoryByNameCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SearchCategoryByNamePlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SearchCustomerByFirstNameCapability
                    {
                        
                        private string _FirstName;
                        
                        private int _SearchCustomerByFirstNameCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SearchCustomerByFirstNameBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["FirstName"].ToString() != String.Empty))
                                {
                                    this._FirstName = message.ContentArgumentsIn["FirstName"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((Validation.Validate("Letter", this._FirstName) == false))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SearchCustomerByFirstNameEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchCustomerByFirstName", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter FirstNameprm = cmd.Parameters.Add("@FirstName", SqlDbType.Char, 30);
                                FirstNameprm.Direction = ParameterDirection.Input;
                                FirstNameprm.Value = this._FirstName;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SearchCustomerByFirstNamePlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchCustomerByFirstName", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter FirstNameprm = cmd.Parameters.Add("@FirstName", SqlDbType.Char, 30);
                                FirstNameprm.Direction = ParameterDirection.Input;
                                FirstNameprm.Value = this._FirstName;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SearchCustomerByFirstNameCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SearchCustomerByFirstNameBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SearchCustomerByFirstNameCount = this.SearchCustomerByFirstNameEventFun();
                                    message.ContentArgumentsOut.Add("SearchCustomerByFirstNameCount", _SearchCustomerByFirstNameCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SearchCustomerByFirstNamePlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SearchCustomerByLastNameCapability
                    {
                        
                        private string _LastName;
                        
                        private int _SearchCustomerByLastNameCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SearchCustomerByLastNameBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["LastName"].ToString() != String.Empty))
                                {
                                    this._LastName = message.ContentArgumentsIn["LastName"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((Validation.Validate("Letter", this._LastName) == false))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SearchCustomerByLastNameEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchCustomerByLastName", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter LastNameprm = cmd.Parameters.Add("@LastName", SqlDbType.Char, 30);
                                LastNameprm.Direction = ParameterDirection.Input;
                                LastNameprm.Value = this._LastName;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SearchCustomerByLastNamePlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchCustomerByLastName", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter LastNameprm = cmd.Parameters.Add("@LastName", SqlDbType.Char, 30);
                                LastNameprm.Direction = ParameterDirection.Input;
                                LastNameprm.Value = this._LastName;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SearchCustomerByLastNameCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SearchCustomerByLastNameBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SearchCustomerByLastNameCount = this.SearchCustomerByLastNameEventFun();
                                    message.ContentArgumentsOut.Add("SearchCustomerByLastNameCount", _SearchCustomerByLastNameCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SearchCustomerByLastNamePlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SearchCustomerByMiddleNameCapability
                    {
                        
                        private string _MiddleName;
                        
                        private int _SearchCustomerByMiddleNameCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SearchCustomerByMiddleNameBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["MiddleName"].ToString() != String.Empty))
                                {
                                    this._MiddleName = message.ContentArgumentsIn["MiddleName"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((Validation.Validate("Letter", this._MiddleName) == false))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SearchCustomerByMiddleNameEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchCustomerByMiddleName", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter MiddleNameprm = cmd.Parameters.Add("@MiddleName", SqlDbType.Char, 30);
                                MiddleNameprm.Direction = ParameterDirection.Input;
                                MiddleNameprm.Value = this._MiddleName;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SearchCustomerByMiddleNamePlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchCustomerByMiddleName", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter MiddleNameprm = cmd.Parameters.Add("@MiddleName", SqlDbType.Char, 30);
                                MiddleNameprm.Direction = ParameterDirection.Input;
                                MiddleNameprm.Value = this._MiddleName;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SearchCustomerByMiddleNameCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SearchCustomerByMiddleNameBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SearchCustomerByMiddleNameCount = this.SearchCustomerByMiddleNameEventFun();
                                    message.ContentArgumentsOut.Add("SearchCustomerByMiddleNameCount", _SearchCustomerByMiddleNameCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SearchCustomerByMiddleNamePlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SearchCustomer_PhoneByPhoneCapability
                    {
                        
                        private string _Phone;
                        
                        private int _SearchCustomer_PhoneByPhoneCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SearchCustomer_PhoneByPhoneBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["Phone"].ToString() != String.Empty))
                                {
                                    this._Phone = message.ContentArgumentsIn["Phone"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((Validation.Validate("Digit", this._Phone) == false))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SearchCustomer_PhoneByPhoneEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchCustomer_PhoneByPhone", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Phoneprm = cmd.Parameters.Add("@Phone", SqlDbType.Char, 15);
                                Phoneprm.Direction = ParameterDirection.Input;
                                Phoneprm.Value = this._Phone;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SearchCustomer_PhoneByPhonePlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchCustomer_PhoneByPhone", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Phoneprm = cmd.Parameters.Add("@Phone", SqlDbType.Char, 15);
                                Phoneprm.Direction = ParameterDirection.Input;
                                Phoneprm.Value = this._Phone;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SearchCustomer_PhoneByPhoneCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SearchCustomer_PhoneByPhoneBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SearchCustomer_PhoneByPhoneCount = this.SearchCustomer_PhoneByPhoneEventFun();
                                    message.ContentArgumentsOut.Add("SearchCustomer_PhoneByPhoneCount", _SearchCustomer_PhoneByPhoneCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SearchCustomer_PhoneByPhonePlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SearchDeliveryByOrderOutIdCapability
                    {
                        
                        private int _OrderOutId;
                        
                        private int _SearchDeliveryByOrderOutIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SearchDeliveryByOrderOutIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["OrderOutId"].ToString() != String.Empty))
                                {
                                    this._OrderOutId = int.Parse(message.ContentArgumentsIn["OrderOutId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._OrderOutId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SearchDeliveryByOrderOutIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchDeliveryByOrderOutId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter OrderOutIdprm = cmd.Parameters.Add("@OrderOutId", SqlDbType.Int);
                                OrderOutIdprm.Direction = ParameterDirection.Input;
                                OrderOutIdprm.Value = this._OrderOutId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SearchDeliveryByOrderOutIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchDeliveryByOrderOutId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter OrderOutIdprm = cmd.Parameters.Add("@OrderOutId", SqlDbType.Int);
                                OrderOutIdprm.Direction = ParameterDirection.Input;
                                OrderOutIdprm.Value = this._OrderOutId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SearchDeliveryByOrderOutIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SearchDeliveryByOrderOutIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SearchDeliveryByOrderOutIdCount = this.SearchDeliveryByOrderOutIdEventFun();
                                    message.ContentArgumentsOut.Add("SearchDeliveryByOrderOutIdCount", _SearchDeliveryByOrderOutIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SearchDeliveryByOrderOutIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SearchDeliveryMethodByMethodCapability
                    {
                        
                        private string _Method;
                        
                        private int _SearchDeliveryMethodByMethodCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SearchDeliveryMethodByMethodBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["Method"].ToString() != String.Empty))
                                {
                                    this._Method = message.ContentArgumentsIn["Method"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((Validation.Validate("Letter", this._Method) == false))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SearchDeliveryMethodByMethodEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchDeliveryMethodByMethod", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Methodprm = cmd.Parameters.Add("@Method", SqlDbType.Char, 30);
                                Methodprm.Direction = ParameterDirection.Input;
                                Methodprm.Value = this._Method;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SearchDeliveryMethodByMethodPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchDeliveryMethodByMethod", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Methodprm = cmd.Parameters.Add("@Method", SqlDbType.Char, 30);
                                Methodprm.Direction = ParameterDirection.Input;
                                Methodprm.Value = this._Method;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SearchDeliveryMethodByMethodCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SearchDeliveryMethodByMethodBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SearchDeliveryMethodByMethodCount = this.SearchDeliveryMethodByMethodEventFun();
                                    message.ContentArgumentsOut.Add("SearchDeliveryMethodByMethodCount", _SearchDeliveryMethodByMethodCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SearchDeliveryMethodByMethodPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SearchOrderInByIdCapability
                    {
                        
                        private int _Id;
                        
                        private int _SearchOrderInByIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SearchOrderInByIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                {
                                    this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._Id < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SearchOrderInByIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchOrderInById", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("@Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SearchOrderInByIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchOrderInById", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("@Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SearchOrderInByIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SearchOrderInByIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SearchOrderInByIdCount = this.SearchOrderInByIdEventFun();
                                    message.ContentArgumentsOut.Add("SearchOrderInByIdCount", _SearchOrderInByIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SearchOrderInByIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SearchOrderOutByIdCapability
                    {
                        
                        private int _Id;
                        
                        private int _SearchOrderOutByIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SearchOrderOutByIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                {
                                    this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._Id < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SearchOrderOutByIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchOrderOutById", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("@Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SearchOrderOutByIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchOrderOutById", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("@Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SearchOrderOutByIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SearchOrderOutByIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SearchOrderOutByIdCount = this.SearchOrderOutByIdEventFun();
                                    message.ContentArgumentsOut.Add("SearchOrderOutByIdCount", _SearchOrderOutByIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SearchOrderOutByIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SearchSupplierBySupplierNameCapability
                    {
                        
                        private string _SupplierName;
                        
                        private int _SearchSupplierBySupplierNameCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SearchSupplierBySupplierNameBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["SupplierName"].ToString() != String.Empty))
                                {
                                    this._SupplierName = message.ContentArgumentsIn["SupplierName"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((Validation.Validate("LetterOrDigit", this._SupplierName) == false))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SearchSupplierBySupplierNameEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchSupplierBySupplierName", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter SupplierNameprm = cmd.Parameters.Add("@SupplierName", SqlDbType.Char, 100);
                                SupplierNameprm.Direction = ParameterDirection.Input;
                                SupplierNameprm.Value = this._SupplierName;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SearchSupplierBySupplierNamePlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchSupplierBySupplierName", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter SupplierNameprm = cmd.Parameters.Add("@SupplierName", SqlDbType.Char, 100);
                                SupplierNameprm.Direction = ParameterDirection.Input;
                                SupplierNameprm.Value = this._SupplierName;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SearchSupplierBySupplierNameCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SearchSupplierBySupplierNameBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SearchSupplierBySupplierNameCount = this.SearchSupplierBySupplierNameEventFun();
                                    message.ContentArgumentsOut.Add("SearchSupplierBySupplierNameCount", _SearchSupplierBySupplierNameCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SearchSupplierBySupplierNamePlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SearchSupplier_PhoneByPhoneCapability
                    {
                        
                        private string _Phone;
                        
                        private int _SearchSupplier_PhoneByPhoneCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SearchSupplier_PhoneByPhoneBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["Phone"].ToString() != String.Empty))
                                {
                                    this._Phone = message.ContentArgumentsIn["Phone"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((Validation.Validate("Digit", this._Phone) == false))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SearchSupplier_PhoneByPhoneEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchSupplier_PhoneByPhone", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Phoneprm = cmd.Parameters.Add("@Phone", SqlDbType.Char, 15);
                                Phoneprm.Direction = ParameterDirection.Input;
                                Phoneprm.Value = this._Phone;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SearchSupplier_PhoneByPhonePlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SearchSupplier_PhoneByPhone", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Phoneprm = cmd.Parameters.Add("@Phone", SqlDbType.Char, 15);
                                Phoneprm.Direction = ParameterDirection.Input;
                                Phoneprm.Value = this._Phone;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SearchSupplier_PhoneByPhoneCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SearchSupplier_PhoneByPhoneBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SearchSupplier_PhoneByPhoneCount = this.SearchSupplier_PhoneByPhoneEventFun();
                                    message.ContentArgumentsOut.Add("SearchSupplier_PhoneByPhoneCount", _SearchSupplier_PhoneByPhoneCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SearchSupplier_PhoneByPhonePlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                }
            }
            
            public class PurchaseAgent
            {
                
                private AddToCartGoal _AddToCartGoal = new AddToCartGoal();
                
                public ACLMessage Execute(ACLMessage message)
                {
                    return _AddToCartGoal.AddToCartGoalExecute(message);
                }
                
                public class AddToCartGoal
                {
                    
                    private object _Success;
                    
                    private SelectMaxIdShoppingCartCapability _SelectMaxIdShoppingCartCapability = new SelectMaxIdShoppingCartCapability();
                    
                    private InsertShoppingCartCapability _InsertShoppingCartCapability = new InsertShoppingCartCapability();
                    
                    private UpdateShoppingCartCapability _UpdateShoppingCartCapability = new UpdateShoppingCartCapability();
                    
                    private DeleteShoppingCartCapability _DeleteShoppingCartCapability = new DeleteShoppingCartCapability();
                    
                    private SelectShoppingCartByCustomerIdCapability _SelectShoppingCartByCustomerIdCapability = new SelectShoppingCartByCustomerIdCapability();
                    
                    private SelectMaxIdShoppingCart_BookCapability _SelectMaxIdShoppingCart_BookCapability = new SelectMaxIdShoppingCart_BookCapability();
                    
                    private InsertShoppingCart_BookCapability _InsertShoppingCart_BookCapability = new InsertShoppingCart_BookCapability();
                    
                    private UpdateShoppingCart_BookCapability _UpdateShoppingCart_BookCapability = new UpdateShoppingCart_BookCapability();
                    
                    private DeleteShoppingCart_BookCapability _DeleteShoppingCart_BookCapability = new DeleteShoppingCart_BookCapability();
                    
                    private SelectShoppingCart_BookByShoppingCartIdCapability _SelectShoppingCart_BookByShoppingCartIdCapability = new SelectShoppingCart_BookByShoppingCartIdCapability();
                    
                    private SelectShoppingCart_BookByBookIdCapability _SelectShoppingCart_BookByBookIdCapability = new SelectShoppingCart_BookByBookIdCapability();
                    
                    private SelectMaxIdOfferCapability _SelectMaxIdOfferCapability = new SelectMaxIdOfferCapability();
                    
                    private InsertOfferCapability _InsertOfferCapability = new InsertOfferCapability();
                    
                    private UpdateOfferCapability _UpdateOfferCapability = new UpdateOfferCapability();
                    
                    private DeleteOfferCapability _DeleteOfferCapability = new DeleteOfferCapability();
                    
                    private SelectAllOfferCapability _SelectAllOfferCapability = new SelectAllOfferCapability();
                    
                    public ACLMessage AddToCartGoalExecute(ACLMessage message)
                    {
                        if ((message.Content == "SelectMaxIdShoppingCartCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "PurchaseAgent";
                            _Success = _SelectMaxIdShoppingCartCapability.SelectMaxIdShoppingCartCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertShoppingCartCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "PurchaseAgent";
                            _Success = _InsertShoppingCartCapability.InsertShoppingCartCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateShoppingCartCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "PurchaseAgent";
                            _Success = _UpdateShoppingCartCapability.UpdateShoppingCartCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteShoppingCartCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "PurchaseAgent";
                            _Success = _DeleteShoppingCartCapability.DeleteShoppingCartCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectShoppingCartByCustomerIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "PurchaseAgent";
                            _Success = _SelectShoppingCartByCustomerIdCapability.SelectShoppingCartByCustomerIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectMaxIdShoppingCart_BookCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "PurchaseAgent";
                            _Success = _SelectMaxIdShoppingCart_BookCapability.SelectMaxIdShoppingCart_BookCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertShoppingCart_BookCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "PurchaseAgent";
                            _Success = _InsertShoppingCart_BookCapability.InsertShoppingCart_BookCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateShoppingCart_BookCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "PurchaseAgent";
                            _Success = _UpdateShoppingCart_BookCapability.UpdateShoppingCart_BookCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteShoppingCart_BookCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "PurchaseAgent";
                            _Success = _DeleteShoppingCart_BookCapability.DeleteShoppingCart_BookCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectShoppingCart_BookByShoppingCartIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "PurchaseAgent";
                            _Success = _SelectShoppingCart_BookByShoppingCartIdCapability.SelectShoppingCart_BookByShoppingCartIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectShoppingCart_BookByBookIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "PurchaseAgent";
                            _Success = _SelectShoppingCart_BookByBookIdCapability.SelectShoppingCart_BookByBookIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectMaxIdOfferCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "PurchaseAgent";
                            _Success = _SelectMaxIdOfferCapability.SelectMaxIdOfferCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertOfferCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "PurchaseAgent";
                            _Success = _InsertOfferCapability.InsertOfferCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateOfferCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "PurchaseAgent";
                            _Success = _UpdateOfferCapability.UpdateOfferCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteOfferCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "PurchaseAgent";
                            _Success = _DeleteOfferCapability.DeleteOfferCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectAllOfferCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "PurchaseAgent";
                            _Success = _SelectAllOfferCapability.SelectAllOfferCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        return null;
                    }
                    
                    public class SelectMaxIdShoppingCartCapability
                    {
                        
                        private object SelectMaxIdShoppingCartBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdShoppingCart", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdShoppingCartEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdShoppingCartPlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdShoppingCartCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdShoppingCartBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdShoppingCartEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdShoppingCartPlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertShoppingCartCapability
                    {
                        
                        private int _CustomerId;
                        
                        private System.DateTime _Date;
                        
                        private double _Total;
                        
                        private bool InsertShoppingCartBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["CustomerId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                    {
                                        this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CustomerId = 0;
                                }
                                if ((message.ContentArgumentsIn["Date"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Date"].ToString() != String.Empty))
                                    {
                                        this._Date = DateTime.Parse(message.ContentArgumentsIn["Date"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Date = DateTime.Now;
                                }
                                if ((message.ContentArgumentsIn["Total"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Total"].ToString() != String.Empty))
                                    {
                                        this._Total = float.Parse(message.ContentArgumentsIn["Total"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Total = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertShoppingCartEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._CustomerId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Total < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertShoppingCartPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertShoppingCart", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                if ((this._CustomerId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("CustomerId", SqlDbType.Int);
                                    CustomerIdprm.Direction = ParameterDirection.Input;
                                    CustomerIdprm.Value = this._CustomerId;
                                }
                                System.Data.SqlClient.SqlParameter Dateprm = cmd.Parameters.Add("Date", SqlDbType.DateTime);
                                Dateprm.Direction = ParameterDirection.Input;
                                Dateprm.Value = this._Date;
                                System.Data.SqlClient.SqlParameter Totalprm = cmd.Parameters.Add("Total", SqlDbType.Float);
                                Totalprm.Direction = ParameterDirection.Input;
                                Totalprm.Value = this._Total;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertShoppingCartCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertShoppingCartBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertShoppingCartEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertShoppingCartPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateShoppingCartCapability
                    {
                        
                        private int _CustomerId;
                        
                        private System.DateTime _Date;
                        
                        private double _Total;
                        
                        private bool UpdateShoppingCartBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["CustomerId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                    {
                                        this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CustomerId = 0;
                                }
                                if ((message.ContentArgumentsIn["Date"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Date"].ToString() != String.Empty))
                                    {
                                        this._Date = DateTime.Parse(message.ContentArgumentsIn["Date"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Date = DateTime.Now;
                                }
                                if ((message.ContentArgumentsIn["Total"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Total"].ToString() != String.Empty))
                                    {
                                        this._Total = float.Parse(message.ContentArgumentsIn["Total"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Total = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateShoppingCartEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._CustomerId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Total < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateShoppingCartPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateShoppingCart", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                if ((this._CustomerId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("CustomerId", SqlDbType.Int);
                                    CustomerIdprm.Direction = ParameterDirection.Input;
                                    CustomerIdprm.Value = this._CustomerId;
                                }
                                System.Data.SqlClient.SqlParameter Dateprm = cmd.Parameters.Add("Date", SqlDbType.DateTime);
                                Dateprm.Direction = ParameterDirection.Input;
                                Dateprm.Value = this._Date;
                                System.Data.SqlClient.SqlParameter Totalprm = cmd.Parameters.Add("Total", SqlDbType.Float);
                                Totalprm.Direction = ParameterDirection.Input;
                                Totalprm.Value = this._Total;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateShoppingCartCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateShoppingCartBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateShoppingCartEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateShoppingCartPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteShoppingCartCapability
                    {
                        
                        private int _CustomerId;
                        
                        private bool DeleteShoppingCartBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["CustomerId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                    {
                                        this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CustomerId = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteShoppingCartEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._CustomerId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteShoppingCartPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteShoppingCart", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                if ((this._CustomerId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("CustomerId", SqlDbType.Int);
                                    CustomerIdprm.Direction = ParameterDirection.Input;
                                    CustomerIdprm.Value = this._CustomerId;
                                }
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteShoppingCartCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteShoppingCartBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteShoppingCartEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteShoppingCartPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectShoppingCartByCustomerIdCapability
                    {
                        
                        private int _CustomerId;
                        
                        private int _SelectShoppingCartByCustomerIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectShoppingCartByCustomerIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                {
                                    this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._CustomerId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectShoppingCartByCustomerIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectShoppingCartByCustomerId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("@CustomerId", SqlDbType.Int);
                                CustomerIdprm.Direction = ParameterDirection.Input;
                                CustomerIdprm.Value = this._CustomerId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectShoppingCartByCustomerIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectShoppingCartByCustomerId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("@CustomerId", SqlDbType.Int);
                                CustomerIdprm.Direction = ParameterDirection.Input;
                                CustomerIdprm.Value = this._CustomerId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectShoppingCartByCustomerIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectShoppingCartByCustomerIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectShoppingCartByCustomerIdCount = this.SelectShoppingCartByCustomerIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectShoppingCartByCustomerIdCount", this._SelectShoppingCartByCustomerIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectShoppingCartByCustomerIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectMaxIdShoppingCart_BookCapability
                    {
                        
                        private object SelectMaxIdShoppingCart_BookBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdShoppingCart_Book", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdShoppingCart_BookEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdShoppingCart_BookPlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdShoppingCart_BookCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdShoppingCart_BookBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdShoppingCart_BookEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdShoppingCart_BookPlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertShoppingCart_BookCapability
                    {
                        
                        private int _Id;
                        
                        private int _ShoppingCartId;
                        
                        private int _BookId;
                        
                        private int _Quantity;
                        
                        private double _Price;
                        
                        private double _Total;
                        
                        private string _Status;
                        
                        private bool InsertShoppingCart_BookBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["ShoppingCartId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["ShoppingCartId"].ToString() != String.Empty))
                                    {
                                        this._ShoppingCartId = int.Parse(message.ContentArgumentsIn["ShoppingCartId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._ShoppingCartId = 0;
                                }
                                if ((message.ContentArgumentsIn["BookId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["BookId"].ToString() != String.Empty))
                                    {
                                        this._BookId = int.Parse(message.ContentArgumentsIn["BookId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._BookId = 0;
                                }
                                if ((message.ContentArgumentsIn["Quantity"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Quantity"].ToString() != String.Empty))
                                    {
                                        this._Quantity = int.Parse(message.ContentArgumentsIn["Quantity"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Quantity = 0;
                                }
                                if ((message.ContentArgumentsIn["Price"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Price"].ToString() != String.Empty))
                                    {
                                        this._Price = float.Parse(message.ContentArgumentsIn["Price"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Price = 0;
                                }
                                if ((message.ContentArgumentsIn["Total"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Total"].ToString() != String.Empty))
                                    {
                                        this._Total = float.Parse(message.ContentArgumentsIn["Total"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Total = 0;
                                }
                                if ((message.ContentArgumentsIn["Status"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Status"].ToString() != String.Empty))
                                    {
                                        this._Status = message.ContentArgumentsIn["Status"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Status = "";
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertShoppingCart_BookEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._ShoppingCartId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._BookId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Quantity < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Price < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Total < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Status) == false))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertShoppingCart_BookPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertShoppingCart_Book", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                if ((this._ShoppingCartId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter ShoppingCartIdprm = cmd.Parameters.Add("ShoppingCartId", SqlDbType.Int);
                                    ShoppingCartIdprm.Direction = ParameterDirection.Input;
                                    ShoppingCartIdprm.Value = this._ShoppingCartId;
                                }
                                if ((this._BookId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("BookId", SqlDbType.Int);
                                    BookIdprm.Direction = ParameterDirection.Input;
                                    BookIdprm.Value = this._BookId;
                                }
                                System.Data.SqlClient.SqlParameter Quantityprm = cmd.Parameters.Add("Quantity", SqlDbType.Int);
                                Quantityprm.Direction = ParameterDirection.Input;
                                Quantityprm.Value = this._Quantity;
                                System.Data.SqlClient.SqlParameter Priceprm = cmd.Parameters.Add("Price", SqlDbType.Float);
                                Priceprm.Direction = ParameterDirection.Input;
                                Priceprm.Value = this._Price;
                                System.Data.SqlClient.SqlParameter Totalprm = cmd.Parameters.Add("Total", SqlDbType.Float);
                                Totalprm.Direction = ParameterDirection.Input;
                                Totalprm.Value = this._Total;
                                System.Data.SqlClient.SqlParameter Statusprm = cmd.Parameters.Add("Status", SqlDbType.Char, 30);
                                Statusprm.Direction = ParameterDirection.Input;
                                Statusprm.Value = this._Status;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertShoppingCart_BookCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertShoppingCart_BookBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertShoppingCart_BookEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertShoppingCart_BookPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateShoppingCart_BookCapability
                    {
                        
                        private int _Id;
                        
                        private int _ShoppingCartId;
                        
                        private int _BookId;
                        
                        private int _Quantity;
                        
                        private double _Price;
                        
                        private double _Total;
                        
                        private string _Status;
                        
                        private bool UpdateShoppingCart_BookBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["ShoppingCartId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["ShoppingCartId"].ToString() != String.Empty))
                                    {
                                        this._ShoppingCartId = int.Parse(message.ContentArgumentsIn["ShoppingCartId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._ShoppingCartId = 0;
                                }
                                if ((message.ContentArgumentsIn["BookId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["BookId"].ToString() != String.Empty))
                                    {
                                        this._BookId = int.Parse(message.ContentArgumentsIn["BookId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._BookId = 0;
                                }
                                if ((message.ContentArgumentsIn["Quantity"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Quantity"].ToString() != String.Empty))
                                    {
                                        this._Quantity = int.Parse(message.ContentArgumentsIn["Quantity"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Quantity = 0;
                                }
                                if ((message.ContentArgumentsIn["Price"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Price"].ToString() != String.Empty))
                                    {
                                        this._Price = float.Parse(message.ContentArgumentsIn["Price"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Price = 0;
                                }
                                if ((message.ContentArgumentsIn["Total"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Total"].ToString() != String.Empty))
                                    {
                                        this._Total = float.Parse(message.ContentArgumentsIn["Total"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Total = 0;
                                }
                                if ((message.ContentArgumentsIn["Status"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Status"].ToString() != String.Empty))
                                    {
                                        this._Status = message.ContentArgumentsIn["Status"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Status = "";
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateShoppingCart_BookEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._ShoppingCartId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._BookId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Quantity < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Price < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Total < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Status) == false))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateShoppingCart_BookPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateShoppingCart_Book", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                if ((this._ShoppingCartId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter ShoppingCartIdprm = cmd.Parameters.Add("ShoppingCartId", SqlDbType.Int);
                                    ShoppingCartIdprm.Direction = ParameterDirection.Input;
                                    ShoppingCartIdprm.Value = this._ShoppingCartId;
                                }
                                if ((this._BookId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("BookId", SqlDbType.Int);
                                    BookIdprm.Direction = ParameterDirection.Input;
                                    BookIdprm.Value = this._BookId;
                                }
                                System.Data.SqlClient.SqlParameter Quantityprm = cmd.Parameters.Add("Quantity", SqlDbType.Int);
                                Quantityprm.Direction = ParameterDirection.Input;
                                Quantityprm.Value = this._Quantity;
                                System.Data.SqlClient.SqlParameter Priceprm = cmd.Parameters.Add("Price", SqlDbType.Float);
                                Priceprm.Direction = ParameterDirection.Input;
                                Priceprm.Value = this._Price;
                                System.Data.SqlClient.SqlParameter Totalprm = cmd.Parameters.Add("Total", SqlDbType.Float);
                                Totalprm.Direction = ParameterDirection.Input;
                                Totalprm.Value = this._Total;
                                System.Data.SqlClient.SqlParameter Statusprm = cmd.Parameters.Add("Status", SqlDbType.Char, 30);
                                Statusprm.Direction = ParameterDirection.Input;
                                Statusprm.Value = this._Status;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateShoppingCart_BookCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateShoppingCart_BookBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateShoppingCart_BookEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateShoppingCart_BookPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteShoppingCart_BookCapability
                    {
                        
                        private int _Id;
                        
                        private bool DeleteShoppingCart_BookBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteShoppingCart_BookEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteShoppingCart_BookPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteShoppingCart_Book", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteShoppingCart_BookCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteShoppingCart_BookBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteShoppingCart_BookEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteShoppingCart_BookPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectShoppingCart_BookByShoppingCartIdCapability
                    {
                        
                        private int _ShoppingCartId;
                        
                        private int _SelectShoppingCart_BookByShoppingCartIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectShoppingCart_BookByShoppingCartIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["ShoppingCartId"].ToString() != String.Empty))
                                {
                                    this._ShoppingCartId = int.Parse(message.ContentArgumentsIn["ShoppingCartId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._ShoppingCartId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectShoppingCart_BookByShoppingCartIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectShoppingCart_BookByShoppingCartId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter ShoppingCartIdprm = cmd.Parameters.Add("@ShoppingCartId", SqlDbType.Int);
                                ShoppingCartIdprm.Direction = ParameterDirection.Input;
                                ShoppingCartIdprm.Value = this._ShoppingCartId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectShoppingCart_BookByShoppingCartIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectShoppingCart_BookByShoppingCartId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter ShoppingCartIdprm = cmd.Parameters.Add("@ShoppingCartId", SqlDbType.Int);
                                ShoppingCartIdprm.Direction = ParameterDirection.Input;
                                ShoppingCartIdprm.Value = this._ShoppingCartId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectShoppingCart_BookByShoppingCartIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectShoppingCart_BookByShoppingCartIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectShoppingCart_BookByShoppingCartIdCount = this.SelectShoppingCart_BookByShoppingCartIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectShoppingCart_BookByShoppingCartIdCount", this._SelectShoppingCart_BookByShoppingCartIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectShoppingCart_BookByShoppingCartIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectShoppingCart_BookByBookIdCapability
                    {
                        
                        private int _BookId;
                        
                        private int _SelectShoppingCart_BookByBookIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectShoppingCart_BookByBookIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["BookId"].ToString() != String.Empty))
                                {
                                    this._BookId = int.Parse(message.ContentArgumentsIn["BookId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._BookId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectShoppingCart_BookByBookIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectShoppingCart_BookByBookId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("@BookId", SqlDbType.Int);
                                BookIdprm.Direction = ParameterDirection.Input;
                                BookIdprm.Value = this._BookId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectShoppingCart_BookByBookIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectShoppingCart_BookByBookId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("@BookId", SqlDbType.Int);
                                BookIdprm.Direction = ParameterDirection.Input;
                                BookIdprm.Value = this._BookId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectShoppingCart_BookByBookIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectShoppingCart_BookByBookIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectShoppingCart_BookByBookIdCount = this.SelectShoppingCart_BookByBookIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectShoppingCart_BookByBookIdCount", this._SelectShoppingCart_BookByBookIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectShoppingCart_BookByBookIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectMaxIdOfferCapability
                    {
                        
                        private object SelectMaxIdOfferBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdOffer", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdOfferEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdOfferPlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdOfferCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdOfferBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdOfferEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdOfferPlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertOfferCapability
                    {
                        
                        private int _Id;
                        
                        private System.DateTime _StartDate;
                        
                        private System.DateTime _EndDate;
                        
                        private double _Discount;
                        
                        private string _Status;
                        
                        private bool InsertOfferBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["StartDate"] != null))
                                {
                                    if ((message.ContentArgumentsIn["StartDate"].ToString() != String.Empty))
                                    {
                                        this._StartDate = DateTime.Parse(message.ContentArgumentsIn["StartDate"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._StartDate = DateTime.Now;
                                }
                                if ((message.ContentArgumentsIn["EndDate"] != null))
                                {
                                    if ((message.ContentArgumentsIn["EndDate"].ToString() != String.Empty))
                                    {
                                        this._EndDate = DateTime.Parse(message.ContentArgumentsIn["EndDate"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._EndDate = DateTime.Now;
                                }
                                if ((message.ContentArgumentsIn["Discount"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Discount"].ToString() != String.Empty))
                                    {
                                        this._Discount = float.Parse(message.ContentArgumentsIn["Discount"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Discount = 0;
                                }
                                if ((message.ContentArgumentsIn["Status"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Status"].ToString() != String.Empty))
                                    {
                                        this._Status = message.ContentArgumentsIn["Status"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Status = "";
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertOfferEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Discount < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Status) == false))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertOfferPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertOffer", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter StartDateprm = cmd.Parameters.Add("StartDate", SqlDbType.DateTime);
                                StartDateprm.Direction = ParameterDirection.Input;
                                StartDateprm.Value = this._StartDate;
                                System.Data.SqlClient.SqlParameter EndDateprm = cmd.Parameters.Add("EndDate", SqlDbType.DateTime);
                                EndDateprm.Direction = ParameterDirection.Input;
                                EndDateprm.Value = this._EndDate;
                                System.Data.SqlClient.SqlParameter Discountprm = cmd.Parameters.Add("Discount", SqlDbType.Float);
                                Discountprm.Direction = ParameterDirection.Input;
                                Discountprm.Value = this._Discount;
                                System.Data.SqlClient.SqlParameter Statusprm = cmd.Parameters.Add("Status", SqlDbType.Char, 25);
                                Statusprm.Direction = ParameterDirection.Input;
                                Statusprm.Value = this._Status;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertOfferCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertOfferBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertOfferEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertOfferPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateOfferCapability
                    {
                        
                        private int _Id;
                        
                        private System.DateTime _StartDate;
                        
                        private System.DateTime _EndDate;
                        
                        private double _Discount;
                        
                        private string _Status;
                        
                        private bool UpdateOfferBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["StartDate"] != null))
                                {
                                    if ((message.ContentArgumentsIn["StartDate"].ToString() != String.Empty))
                                    {
                                        this._StartDate = DateTime.Parse(message.ContentArgumentsIn["StartDate"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._StartDate = DateTime.Now;
                                }
                                if ((message.ContentArgumentsIn["EndDate"] != null))
                                {
                                    if ((message.ContentArgumentsIn["EndDate"].ToString() != String.Empty))
                                    {
                                        this._EndDate = DateTime.Parse(message.ContentArgumentsIn["EndDate"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._EndDate = DateTime.Now;
                                }
                                if ((message.ContentArgumentsIn["Discount"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Discount"].ToString() != String.Empty))
                                    {
                                        this._Discount = float.Parse(message.ContentArgumentsIn["Discount"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Discount = 0;
                                }
                                if ((message.ContentArgumentsIn["Status"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Status"].ToString() != String.Empty))
                                    {
                                        this._Status = message.ContentArgumentsIn["Status"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Status = "";
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateOfferEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Discount < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Status) == false))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateOfferPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateOffer", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter StartDateprm = cmd.Parameters.Add("StartDate", SqlDbType.DateTime);
                                StartDateprm.Direction = ParameterDirection.Input;
                                StartDateprm.Value = this._StartDate;
                                System.Data.SqlClient.SqlParameter EndDateprm = cmd.Parameters.Add("EndDate", SqlDbType.DateTime);
                                EndDateprm.Direction = ParameterDirection.Input;
                                EndDateprm.Value = this._EndDate;
                                System.Data.SqlClient.SqlParameter Discountprm = cmd.Parameters.Add("Discount", SqlDbType.Float);
                                Discountprm.Direction = ParameterDirection.Input;
                                Discountprm.Value = this._Discount;
                                System.Data.SqlClient.SqlParameter Statusprm = cmd.Parameters.Add("Status", SqlDbType.Char, 25);
                                Statusprm.Direction = ParameterDirection.Input;
                                Statusprm.Value = this._Status;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateOfferCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateOfferBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateOfferEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateOfferPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteOfferCapability
                    {
                        
                        private int _Id;
                        
                        private bool DeleteOfferBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteOfferEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteOfferPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteOffer", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteOfferCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteOfferBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteOfferEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteOfferPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectAllOfferCapability
                    {
                        
                        private int _SelectAllOfferCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectAllOfferBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectAllOfferEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAllOffer", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectAllOfferPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAllOffer", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectAllOfferCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing records...");
                            System.Data.DataTable temp = null;
                            bool v = this.SelectAllOfferBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SelectAllOfferCount = this.SelectAllOfferEventFun();
                                    message.ContentArgumentsOut.Add("SelectAllOfferCount", this._SelectAllOfferCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectAllOfferPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                }
            }
            
            public class CompetitiveAgent
            {
                
                private CompetitivePriceGoal _CompetitivePriceGoal = new CompetitivePriceGoal();
                
                public ACLMessage Execute(ACLMessage message)
                {
                    return _CompetitivePriceGoal.CompetitivePriceGoalExecute(message);
                }
                
                public class CompetitivePriceGoal
                {
                    
                    private object _Success;
                    
                    private UpdateBookPriceInBookCapability _UpdateBookPriceInBookCapability = new UpdateBookPriceInBookCapability();
                    
                    public ACLMessage CompetitivePriceGoalExecute(ACLMessage message)
                    {
                        if ((message.Content == "UpdateBookPriceInBookCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CompetitiveAgent";
                            _Success = _UpdateBookPriceInBookCapability.UpdateBookPriceInBookCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        return null;
                    }
                    
                    public class UpdateBookPriceInBookCapability
                    {
                        
                        private int _Id;
                        
                        private double _BookPrice;
                        
                        private bool UpdateBookPriceInBookBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["BookPrice"] != null))
                                {
                                    if ((message.ContentArgumentsIn["BookPrice"].ToString() != String.Empty))
                                    {
                                        this._BookPrice = float.Parse(message.ContentArgumentsIn["BookPrice"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._BookPrice = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateBookPriceInBookEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._BookPrice < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateBookPriceInBookPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateBookPriceInBook", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter BookPriceprm = cmd.Parameters.Add("BookPrice", SqlDbType.Float);
                                BookPriceprm.Direction = ParameterDirection.Input;
                                BookPriceprm.Value = this._BookPrice;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateBookPriceInBookCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateBookPriceInBookBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateBookPriceInBookEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateBookPriceInBookPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                }
            }
            
            public class CatalogueAgent
            {
                
                private UpdateCatalogueGoal _UpdateCatalogueGoal = new UpdateCatalogueGoal();
                
                public ACLMessage Execute(ACLMessage message)
                {
                    return _UpdateCatalogueGoal.UpdateCatalogueGoalExecute(message);
                }
                
                public class UpdateCatalogueGoal
                {
                    
                    private object _Success;
                    
                    private SelectMaxIdAuthorCapability _SelectMaxIdAuthorCapability = new SelectMaxIdAuthorCapability();
                    
                    private InsertAuthorCapability _InsertAuthorCapability = new InsertAuthorCapability();
                    
                    private UpdateAuthorCapability _UpdateAuthorCapability = new UpdateAuthorCapability();
                    
                    private DeleteAuthorCapability _DeleteAuthorCapability = new DeleteAuthorCapability();
                    
                    private SelectAllAuthorCapability _SelectAllAuthorCapability = new SelectAllAuthorCapability();
                    
                    private SelectMaxIdAuthorBookCapability _SelectMaxIdAuthorBookCapability = new SelectMaxIdAuthorBookCapability();
                    
                    private InsertAuthorBookCapability _InsertAuthorBookCapability = new InsertAuthorBookCapability();
                    
                    private UpdateAuthorBookCapability _UpdateAuthorBookCapability = new UpdateAuthorBookCapability();
                    
                    private DeleteAuthorBookCapability _DeleteAuthorBookCapability = new DeleteAuthorBookCapability();
                    
                    private SelectAuthorBookByAuthorIdCapability _SelectAuthorBookByAuthorIdCapability = new SelectAuthorBookByAuthorIdCapability();
                    
                    private SelectAuthorBookByBookIdCapability _SelectAuthorBookByBookIdCapability = new SelectAuthorBookByBookIdCapability();
                    
                    private SelectMaxIdBookCapability _SelectMaxIdBookCapability = new SelectMaxIdBookCapability();
                    
                    private InsertBookCapability _InsertBookCapability = new InsertBookCapability();
                    
                    private UpdateBookCapability _UpdateBookCapability = new UpdateBookCapability();
                    
                    private DeleteBookCapability _DeleteBookCapability = new DeleteBookCapability();
                    
                    private UpdateAmountInBookCapability _UpdateAmountInBookCapability = new UpdateAmountInBookCapability();
                    
                    private SelectAllBookCapability _SelectAllBookCapability = new SelectAllBookCapability();
                    
                    private SelectBookByCategoryIdCapability _SelectBookByCategoryIdCapability = new SelectBookByCategoryIdCapability();
                    
                    private SelectBookByOfferIdCapability _SelectBookByOfferIdCapability = new SelectBookByOfferIdCapability();
                    
                    private SelectBookByAmountCapability _SelectBookByAmountCapability = new SelectBookByAmountCapability();
                    
                    private SelectMaxIdCategoryCapability _SelectMaxIdCategoryCapability = new SelectMaxIdCategoryCapability();
                    
                    private InsertCategoryCapability _InsertCategoryCapability = new InsertCategoryCapability();
                    
                    private UpdateCategoryCapability _UpdateCategoryCapability = new UpdateCategoryCapability();
                    
                    private DeleteCategoryCapability _DeleteCategoryCapability = new DeleteCategoryCapability();
                    
                    private SelectAllCategoryCapability _SelectAllCategoryCapability = new SelectAllCategoryCapability();
                    
                    private SelectCategoryBySubCategoryIdCapability _SelectCategoryBySubCategoryIdCapability = new SelectCategoryBySubCategoryIdCapability();
                    
                    public ACLMessage UpdateCatalogueGoalExecute(ACLMessage message)
                    {
                        if ((message.Content == "SelectMaxIdAuthorCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _SelectMaxIdAuthorCapability.SelectMaxIdAuthorCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertAuthorCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _InsertAuthorCapability.InsertAuthorCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateAuthorCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _UpdateAuthorCapability.UpdateAuthorCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteAuthorCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _DeleteAuthorCapability.DeleteAuthorCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectAllAuthorCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _SelectAllAuthorCapability.SelectAllAuthorCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectMaxIdAuthorBookCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _SelectMaxIdAuthorBookCapability.SelectMaxIdAuthorBookCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertAuthorBookCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _InsertAuthorBookCapability.InsertAuthorBookCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateAuthorBookCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _UpdateAuthorBookCapability.UpdateAuthorBookCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteAuthorBookCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _DeleteAuthorBookCapability.DeleteAuthorBookCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectAuthorBookByAuthorIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _SelectAuthorBookByAuthorIdCapability.SelectAuthorBookByAuthorIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectAuthorBookByBookIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _SelectAuthorBookByBookIdCapability.SelectAuthorBookByBookIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectMaxIdBookCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _SelectMaxIdBookCapability.SelectMaxIdBookCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertBookCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _InsertBookCapability.InsertBookCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateBookCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _UpdateBookCapability.UpdateBookCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteBookCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _DeleteBookCapability.DeleteBookCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateAmountInBookCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _UpdateAmountInBookCapability.UpdateAmountInBookCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectAllBookCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _SelectAllBookCapability.SelectAllBookCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectBookByCategoryIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _SelectBookByCategoryIdCapability.SelectBookByCategoryIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectBookByOfferIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _SelectBookByOfferIdCapability.SelectBookByOfferIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectBookByAmountCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _SelectBookByAmountCapability.SelectBookByAmountCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectMaxIdCategoryCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _SelectMaxIdCategoryCapability.SelectMaxIdCategoryCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertCategoryCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _InsertCategoryCapability.InsertCategoryCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateCategoryCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _UpdateCategoryCapability.UpdateCategoryCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteCategoryCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _DeleteCategoryCapability.DeleteCategoryCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectAllCategoryCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _SelectAllCategoryCapability.SelectAllCategoryCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectCategoryBySubCategoryIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "CatalogueAgent";
                            _Success = _SelectCategoryBySubCategoryIdCapability.SelectCategoryBySubCategoryIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        return null;
                    }
                    
                    public class SelectMaxIdAuthorCapability
                    {
                        
                        private object SelectMaxIdAuthorBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdAuthor", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdAuthorEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdAuthorPlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdAuthorCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdAuthorBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdAuthorEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdAuthorPlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertAuthorCapability
                    {
                        
                        private int _Id;
                        
                        private string _Name;
                        
                        private bool InsertAuthorBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["Name"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Name"].ToString() != String.Empty))
                                    {
                                        this._Name = message.ContentArgumentsIn["Name"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Name = "";
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertAuthorEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("LetterOrDigit", this._Name) == false))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertAuthorPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertAuthor", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter Nameprm = cmd.Parameters.Add("Name", SqlDbType.Char, 200);
                                Nameprm.Direction = ParameterDirection.Input;
                                Nameprm.Value = this._Name;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertAuthorCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertAuthorBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertAuthorEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertAuthorPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateAuthorCapability
                    {
                        
                        private int _Id;
                        
                        private string _Name;
                        
                        private bool UpdateAuthorBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["Name"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Name"].ToString() != String.Empty))
                                    {
                                        this._Name = message.ContentArgumentsIn["Name"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Name = "";
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateAuthorEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("LetterOrDigit", this._Name) == false))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateAuthorPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateAuthor", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter Nameprm = cmd.Parameters.Add("Name", SqlDbType.Char, 200);
                                Nameprm.Direction = ParameterDirection.Input;
                                Nameprm.Value = this._Name;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateAuthorCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateAuthorBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateAuthorEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateAuthorPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteAuthorCapability
                    {
                        
                        private int _Id;
                        
                        private bool DeleteAuthorBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteAuthorEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteAuthorPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteAuthor", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteAuthorCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteAuthorBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteAuthorEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteAuthorPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectAllAuthorCapability
                    {
                        
                        private int _SelectAllAuthorCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectAllAuthorBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectAllAuthorEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAllAuthor", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectAllAuthorPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAllAuthor", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectAllAuthorCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing records...");
                            System.Data.DataTable temp = null;
                            bool v = this.SelectAllAuthorBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SelectAllAuthorCount = this.SelectAllAuthorEventFun();
                                    message.ContentArgumentsOut.Add("SelectAllAuthorCount", this._SelectAllAuthorCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectAllAuthorPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectMaxIdAuthorBookCapability
                    {
                        
                        private object SelectMaxIdAuthorBookBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdAuthorBook", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdAuthorBookEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdAuthorBookPlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdAuthorBookCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdAuthorBookBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdAuthorBookEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdAuthorBookPlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertAuthorBookCapability
                    {
                        
                        private int _Id;
                        
                        private int _AuthorId;
                        
                        private int _BookId;
                        
                        private bool InsertAuthorBookBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["AuthorId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["AuthorId"].ToString() != String.Empty))
                                    {
                                        this._AuthorId = int.Parse(message.ContentArgumentsIn["AuthorId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._AuthorId = 0;
                                }
                                if ((message.ContentArgumentsIn["BookId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["BookId"].ToString() != String.Empty))
                                    {
                                        this._BookId = int.Parse(message.ContentArgumentsIn["BookId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._BookId = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertAuthorBookEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._AuthorId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._BookId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertAuthorBookPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertAuthorBook", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                if ((this._AuthorId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter AuthorIdprm = cmd.Parameters.Add("AuthorId", SqlDbType.Int);
                                    AuthorIdprm.Direction = ParameterDirection.Input;
                                    AuthorIdprm.Value = this._AuthorId;
                                }
                                if ((this._BookId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("BookId", SqlDbType.Int);
                                    BookIdprm.Direction = ParameterDirection.Input;
                                    BookIdprm.Value = this._BookId;
                                }
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertAuthorBookCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertAuthorBookBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertAuthorBookEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertAuthorBookPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateAuthorBookCapability
                    {
                        
                        private int _Id;
                        
                        private int _AuthorId;
                        
                        private int _BookId;
                        
                        private bool UpdateAuthorBookBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["AuthorId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["AuthorId"].ToString() != String.Empty))
                                    {
                                        this._AuthorId = int.Parse(message.ContentArgumentsIn["AuthorId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._AuthorId = 0;
                                }
                                if ((message.ContentArgumentsIn["BookId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["BookId"].ToString() != String.Empty))
                                    {
                                        this._BookId = int.Parse(message.ContentArgumentsIn["BookId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._BookId = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateAuthorBookEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._AuthorId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._BookId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateAuthorBookPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateAuthorBook", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                if ((this._AuthorId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter AuthorIdprm = cmd.Parameters.Add("AuthorId", SqlDbType.Int);
                                    AuthorIdprm.Direction = ParameterDirection.Input;
                                    AuthorIdprm.Value = this._AuthorId;
                                }
                                if ((this._BookId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("BookId", SqlDbType.Int);
                                    BookIdprm.Direction = ParameterDirection.Input;
                                    BookIdprm.Value = this._BookId;
                                }
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateAuthorBookCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateAuthorBookBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateAuthorBookEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateAuthorBookPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteAuthorBookCapability
                    {
                        
                        private int _Id;
                        
                        private bool DeleteAuthorBookBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteAuthorBookEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteAuthorBookPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteAuthorBook", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteAuthorBookCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteAuthorBookBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteAuthorBookEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteAuthorBookPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectAuthorBookByAuthorIdCapability
                    {
                        
                        private int _AuthorId;
                        
                        private int _SelectAuthorBookByAuthorIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectAuthorBookByAuthorIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["AuthorId"].ToString() != String.Empty))
                                {
                                    this._AuthorId = int.Parse(message.ContentArgumentsIn["AuthorId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._AuthorId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectAuthorBookByAuthorIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAuthorBookByAuthorId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter AuthorIdprm = cmd.Parameters.Add("@AuthorId", SqlDbType.Int);
                                AuthorIdprm.Direction = ParameterDirection.Input;
                                AuthorIdprm.Value = this._AuthorId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectAuthorBookByAuthorIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAuthorBookByAuthorId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter AuthorIdprm = cmd.Parameters.Add("@AuthorId", SqlDbType.Int);
                                AuthorIdprm.Direction = ParameterDirection.Input;
                                AuthorIdprm.Value = this._AuthorId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectAuthorBookByAuthorIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectAuthorBookByAuthorIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectAuthorBookByAuthorIdCount = this.SelectAuthorBookByAuthorIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectAuthorBookByAuthorIdCount", this._SelectAuthorBookByAuthorIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectAuthorBookByAuthorIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectAuthorBookByBookIdCapability
                    {
                        
                        private int _BookId;
                        
                        private int _SelectAuthorBookByBookIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectAuthorBookByBookIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["BookId"].ToString() != String.Empty))
                                {
                                    this._BookId = int.Parse(message.ContentArgumentsIn["BookId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._BookId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectAuthorBookByBookIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAuthorBookByBookId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("@BookId", SqlDbType.Int);
                                BookIdprm.Direction = ParameterDirection.Input;
                                BookIdprm.Value = this._BookId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectAuthorBookByBookIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAuthorBookByBookId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("@BookId", SqlDbType.Int);
                                BookIdprm.Direction = ParameterDirection.Input;
                                BookIdprm.Value = this._BookId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectAuthorBookByBookIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectAuthorBookByBookIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectAuthorBookByBookIdCount = this.SelectAuthorBookByBookIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectAuthorBookByBookIdCount", this._SelectAuthorBookByBookIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectAuthorBookByBookIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectMaxIdBookCapability
                    {
                        
                        private object SelectMaxIdBookBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdBook", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdBookEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdBookPlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdBookCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdBookBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdBookEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdBookPlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertBookCapability
                    {
                        
                        private int _Id;
                        
                        private string _ISBN;
                        
                        private string _Title;
                        
                        private int _EditionNumber;
                        
                        private int _CopyRight;
                        
                        private int _Amount;
                        
                        private double _BookPrice;
                        
                        private int _CategoryId;
                        
                        private int _NumOfVisits;
                        
                        private int _OfferId;
                        
                        private bool InsertBookBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["ISBN"] != null))
                                {
                                    if ((message.ContentArgumentsIn["ISBN"].ToString() != String.Empty))
                                    {
                                        this._ISBN = message.ContentArgumentsIn["ISBN"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._ISBN = "";
                                }
                                if ((message.ContentArgumentsIn["Title"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Title"].ToString() != String.Empty))
                                    {
                                        this._Title = message.ContentArgumentsIn["Title"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Title = "";
                                }
                                if ((message.ContentArgumentsIn["EditionNumber"] != null))
                                {
                                    if ((message.ContentArgumentsIn["EditionNumber"].ToString() != String.Empty))
                                    {
                                        this._EditionNumber = int.Parse(message.ContentArgumentsIn["EditionNumber"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._EditionNumber = 0;
                                }
                                if ((message.ContentArgumentsIn["CopyRight"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CopyRight"].ToString() != String.Empty))
                                    {
                                        this._CopyRight = int.Parse(message.ContentArgumentsIn["CopyRight"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CopyRight = 0;
                                }
                                if ((message.ContentArgumentsIn["Amount"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Amount"].ToString() != String.Empty))
                                    {
                                        this._Amount = int.Parse(message.ContentArgumentsIn["Amount"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Amount = 0;
                                }
                                if ((message.ContentArgumentsIn["BookPrice"] != null))
                                {
                                    if ((message.ContentArgumentsIn["BookPrice"].ToString() != String.Empty))
                                    {
                                        this._BookPrice = float.Parse(message.ContentArgumentsIn["BookPrice"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._BookPrice = 0;
                                }
                                if ((message.ContentArgumentsIn["CategoryId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CategoryId"].ToString() != String.Empty))
                                    {
                                        this._CategoryId = int.Parse(message.ContentArgumentsIn["CategoryId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CategoryId = 0;
                                }
                                if ((message.ContentArgumentsIn["NumOfVisits"] != null))
                                {
                                    if ((message.ContentArgumentsIn["NumOfVisits"].ToString() != String.Empty))
                                    {
                                        this._NumOfVisits = int.Parse(message.ContentArgumentsIn["NumOfVisits"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._NumOfVisits = 0;
                                }
                                if ((message.ContentArgumentsIn["OfferId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["OfferId"].ToString() != String.Empty))
                                    {
                                        this._OfferId = int.Parse(message.ContentArgumentsIn["OfferId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._OfferId = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertBookEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Digit", this._ISBN) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("LetterOrDigit", this._Title) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._EditionNumber < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._CopyRight < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Amount < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._BookPrice < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._CategoryId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._NumOfVisits < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._OfferId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertBookPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertBook", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter ISBNprm = cmd.Parameters.Add("ISBN", SqlDbType.Char, 20);
                                ISBNprm.Direction = ParameterDirection.Input;
                                ISBNprm.Value = this._ISBN;
                                System.Data.SqlClient.SqlParameter Titleprm = cmd.Parameters.Add("Title", SqlDbType.Char, 500);
                                Titleprm.Direction = ParameterDirection.Input;
                                Titleprm.Value = this._Title;
                                System.Data.SqlClient.SqlParameter EditionNumberprm = cmd.Parameters.Add("EditionNumber", SqlDbType.Int);
                                EditionNumberprm.Direction = ParameterDirection.Input;
                                EditionNumberprm.Value = this._EditionNumber;
                                System.Data.SqlClient.SqlParameter CopyRightprm = cmd.Parameters.Add("CopyRight", SqlDbType.Int);
                                CopyRightprm.Direction = ParameterDirection.Input;
                                CopyRightprm.Value = this._CopyRight;
                                System.Data.SqlClient.SqlParameter Amountprm = cmd.Parameters.Add("Amount", SqlDbType.Int);
                                Amountprm.Direction = ParameterDirection.Input;
                                Amountprm.Value = this._Amount;
                                System.Data.SqlClient.SqlParameter BookPriceprm = cmd.Parameters.Add("BookPrice", SqlDbType.Float);
                                BookPriceprm.Direction = ParameterDirection.Input;
                                BookPriceprm.Value = this._BookPrice;
                                if ((this._CategoryId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter CategoryIdprm = cmd.Parameters.Add("CategoryId", SqlDbType.Int);
                                    CategoryIdprm.Direction = ParameterDirection.Input;
                                    CategoryIdprm.Value = this._CategoryId;
                                }
                                System.Data.SqlClient.SqlParameter NumOfVisitsprm = cmd.Parameters.Add("NumOfVisits", SqlDbType.Int);
                                NumOfVisitsprm.Direction = ParameterDirection.Input;
                                NumOfVisitsprm.Value = this._NumOfVisits;
                                if ((this._OfferId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter OfferIdprm = cmd.Parameters.Add("OfferId", SqlDbType.Int);
                                    OfferIdprm.Direction = ParameterDirection.Input;
                                    OfferIdprm.Value = this._OfferId;
                                }
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertBookCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertBookBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertBookEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertBookPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateBookCapability
                    {
                        
                        private int _Id;
                        
                        private string _ISBN;
                        
                        private string _Title;
                        
                        private int _EditionNumber;
                        
                        private int _CopyRight;
                        
                        private int _Amount;
                        
                        private double _BookPrice;
                        
                        private int _CategoryId;
                        
                        private int _NumOfVisits;
                        
                        private int _OfferId;
                        
                        private bool UpdateBookBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["ISBN"] != null))
                                {
                                    if ((message.ContentArgumentsIn["ISBN"].ToString() != String.Empty))
                                    {
                                        this._ISBN = message.ContentArgumentsIn["ISBN"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._ISBN = "";
                                }
                                if ((message.ContentArgumentsIn["Title"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Title"].ToString() != String.Empty))
                                    {
                                        this._Title = message.ContentArgumentsIn["Title"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Title = "";
                                }
                                if ((message.ContentArgumentsIn["EditionNumber"] != null))
                                {
                                    if ((message.ContentArgumentsIn["EditionNumber"].ToString() != String.Empty))
                                    {
                                        this._EditionNumber = int.Parse(message.ContentArgumentsIn["EditionNumber"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._EditionNumber = 0;
                                }
                                if ((message.ContentArgumentsIn["CopyRight"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CopyRight"].ToString() != String.Empty))
                                    {
                                        this._CopyRight = int.Parse(message.ContentArgumentsIn["CopyRight"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CopyRight = 0;
                                }
                                if ((message.ContentArgumentsIn["Amount"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Amount"].ToString() != String.Empty))
                                    {
                                        this._Amount = int.Parse(message.ContentArgumentsIn["Amount"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Amount = 0;
                                }
                                if ((message.ContentArgumentsIn["BookPrice"] != null))
                                {
                                    if ((message.ContentArgumentsIn["BookPrice"].ToString() != String.Empty))
                                    {
                                        this._BookPrice = float.Parse(message.ContentArgumentsIn["BookPrice"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._BookPrice = 0;
                                }
                                if ((message.ContentArgumentsIn["CategoryId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CategoryId"].ToString() != String.Empty))
                                    {
                                        this._CategoryId = int.Parse(message.ContentArgumentsIn["CategoryId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CategoryId = 0;
                                }
                                if ((message.ContentArgumentsIn["NumOfVisits"] != null))
                                {
                                    if ((message.ContentArgumentsIn["NumOfVisits"].ToString() != String.Empty))
                                    {
                                        this._NumOfVisits = int.Parse(message.ContentArgumentsIn["NumOfVisits"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._NumOfVisits = 0;
                                }
                                if ((message.ContentArgumentsIn["OfferId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["OfferId"].ToString() != String.Empty))
                                    {
                                        this._OfferId = int.Parse(message.ContentArgumentsIn["OfferId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._OfferId = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateBookEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Digit", this._ISBN) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("LetterOrDigit", this._Title) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._EditionNumber < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._CopyRight < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Amount < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._BookPrice < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._CategoryId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._NumOfVisits < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._OfferId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateBookPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateBook", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter ISBNprm = cmd.Parameters.Add("ISBN", SqlDbType.Char, 20);
                                ISBNprm.Direction = ParameterDirection.Input;
                                ISBNprm.Value = this._ISBN;
                                System.Data.SqlClient.SqlParameter Titleprm = cmd.Parameters.Add("Title", SqlDbType.Char, 500);
                                Titleprm.Direction = ParameterDirection.Input;
                                Titleprm.Value = this._Title;
                                System.Data.SqlClient.SqlParameter EditionNumberprm = cmd.Parameters.Add("EditionNumber", SqlDbType.Int);
                                EditionNumberprm.Direction = ParameterDirection.Input;
                                EditionNumberprm.Value = this._EditionNumber;
                                System.Data.SqlClient.SqlParameter CopyRightprm = cmd.Parameters.Add("CopyRight", SqlDbType.Int);
                                CopyRightprm.Direction = ParameterDirection.Input;
                                CopyRightprm.Value = this._CopyRight;
                                System.Data.SqlClient.SqlParameter Amountprm = cmd.Parameters.Add("Amount", SqlDbType.Int);
                                Amountprm.Direction = ParameterDirection.Input;
                                Amountprm.Value = this._Amount;
                                System.Data.SqlClient.SqlParameter BookPriceprm = cmd.Parameters.Add("BookPrice", SqlDbType.Float);
                                BookPriceprm.Direction = ParameterDirection.Input;
                                BookPriceprm.Value = this._BookPrice;
                                if ((this._CategoryId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter CategoryIdprm = cmd.Parameters.Add("CategoryId", SqlDbType.Int);
                                    CategoryIdprm.Direction = ParameterDirection.Input;
                                    CategoryIdprm.Value = this._CategoryId;
                                }
                                System.Data.SqlClient.SqlParameter NumOfVisitsprm = cmd.Parameters.Add("NumOfVisits", SqlDbType.Int);
                                NumOfVisitsprm.Direction = ParameterDirection.Input;
                                NumOfVisitsprm.Value = this._NumOfVisits;
                                if ((this._OfferId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter OfferIdprm = cmd.Parameters.Add("OfferId", SqlDbType.Int);
                                    OfferIdprm.Direction = ParameterDirection.Input;
                                    OfferIdprm.Value = this._OfferId;
                                }
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateBookCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateBookBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateBookEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateBookPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteBookCapability
                    {
                        
                        private int _Id;
                        
                        private bool DeleteBookBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteBookEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteBookPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteBook", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteBookCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteBookBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteBookEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteBookPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateAmountInBookCapability
                    {
                        
                        private int _Id;
                        
                        private int _Amount;
                        
                        private bool UpdateAmountInBookBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["Amount"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Amount"].ToString() != String.Empty))
                                    {
                                        this._Amount = int.Parse(message.ContentArgumentsIn["Amount"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Amount = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateAmountInBookEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Amount < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateAmountInBookPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateAmountInBook", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter Amountprm = cmd.Parameters.Add("Amount", SqlDbType.Int);
                                Amountprm.Direction = ParameterDirection.Input;
                                Amountprm.Value = this._Amount;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateAmountInBookCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateAmountInBookBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateAmountInBookEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateAmountInBookPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectAllBookCapability
                    {
                        
                        private int _SelectAllBookCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectAllBookBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectAllBookEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAllBook", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectAllBookPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAllBook", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectAllBookCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing records...");
                            System.Data.DataTable temp = null;
                            bool v = this.SelectAllBookBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SelectAllBookCount = this.SelectAllBookEventFun();
                                    message.ContentArgumentsOut.Add("SelectAllBookCount", this._SelectAllBookCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectAllBookPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectBookByCategoryIdCapability
                    {
                        
                        private int _CategoryId;
                        
                        private int _SelectBookByCategoryIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectBookByCategoryIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["CategoryId"].ToString() != String.Empty))
                                {
                                    this._CategoryId = int.Parse(message.ContentArgumentsIn["CategoryId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._CategoryId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectBookByCategoryIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectBookByCategoryId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter CategoryIdprm = cmd.Parameters.Add("@CategoryId", SqlDbType.Int);
                                CategoryIdprm.Direction = ParameterDirection.Input;
                                CategoryIdprm.Value = this._CategoryId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectBookByCategoryIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectBookByCategoryId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter CategoryIdprm = cmd.Parameters.Add("@CategoryId", SqlDbType.Int);
                                CategoryIdprm.Direction = ParameterDirection.Input;
                                CategoryIdprm.Value = this._CategoryId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectBookByCategoryIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectBookByCategoryIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectBookByCategoryIdCount = this.SelectBookByCategoryIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectBookByCategoryIdCount", this._SelectBookByCategoryIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectBookByCategoryIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectBookByOfferIdCapability
                    {
                        
                        private int _OfferId;
                        
                        private int _SelectBookByOfferIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectBookByOfferIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["OfferId"].ToString() != String.Empty))
                                {
                                    this._OfferId = int.Parse(message.ContentArgumentsIn["OfferId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._OfferId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectBookByOfferIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectBookByOfferId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter OfferIdprm = cmd.Parameters.Add("@OfferId", SqlDbType.Int);
                                OfferIdprm.Direction = ParameterDirection.Input;
                                OfferIdprm.Value = this._OfferId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectBookByOfferIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectBookByOfferId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter OfferIdprm = cmd.Parameters.Add("@OfferId", SqlDbType.Int);
                                OfferIdprm.Direction = ParameterDirection.Input;
                                OfferIdprm.Value = this._OfferId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectBookByOfferIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectBookByOfferIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectBookByOfferIdCount = this.SelectBookByOfferIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectBookByOfferIdCount", this._SelectBookByOfferIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectBookByOfferIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectBookByAmountCapability
                    {
                        
                        private int _Amount;
                        
                        private int _SelectBookByAmountCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectBookByAmountBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["Amount"].ToString() != String.Empty))
                                {
                                    this._Amount = int.Parse(message.ContentArgumentsIn["Amount"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._Amount < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectBookByAmountEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectBookByAmount", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Amountprm = cmd.Parameters.Add("@Amount", SqlDbType.Int);
                                Amountprm.Direction = ParameterDirection.Input;
                                Amountprm.Value = this._Amount;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectBookByAmountPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectBookByAmount", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Amountprm = cmd.Parameters.Add("@Amount", SqlDbType.Int);
                                Amountprm.Direction = ParameterDirection.Input;
                                Amountprm.Value = this._Amount;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectBookByAmountCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectBookByAmountBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectBookByAmountCount = this.SelectBookByAmountEventFun();
                                    message.ContentArgumentsOut.Add("SelectBookByAmountCount", this._SelectBookByAmountCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectBookByAmountPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectMaxIdCategoryCapability
                    {
                        
                        private object SelectMaxIdCategoryBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdCategory", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdCategoryEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdCategoryPlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdCategoryCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdCategoryBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdCategoryEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdCategoryPlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertCategoryCapability
                    {
                        
                        private int _Id;
                        
                        private string _Name;
                        
                        private int _SubCategoryId;
                        
                        private bool InsertCategoryBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["Name"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Name"].ToString() != String.Empty))
                                    {
                                        this._Name = message.ContentArgumentsIn["Name"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Name = "";
                                }
                                if ((message.ContentArgumentsIn["SubCategoryId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["SubCategoryId"].ToString() != String.Empty))
                                    {
                                        this._SubCategoryId = int.Parse(message.ContentArgumentsIn["SubCategoryId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._SubCategoryId = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertCategoryEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("LetterOrDigit", this._Name) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._SubCategoryId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertCategoryPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertCategory", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter Nameprm = cmd.Parameters.Add("Name", SqlDbType.Char, 200);
                                Nameprm.Direction = ParameterDirection.Input;
                                Nameprm.Value = this._Name;
                                if ((this._SubCategoryId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter SubCategoryIdprm = cmd.Parameters.Add("SubCategoryId", SqlDbType.Int);
                                    SubCategoryIdprm.Direction = ParameterDirection.Input;
                                    SubCategoryIdprm.Value = this._SubCategoryId;
                                }
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertCategoryCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertCategoryBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertCategoryEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertCategoryPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateCategoryCapability
                    {
                        
                        private int _Id;
                        
                        private string _Name;
                        
                        private int _SubCategoryId;
                        
                        private bool UpdateCategoryBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["Name"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Name"].ToString() != String.Empty))
                                    {
                                        this._Name = message.ContentArgumentsIn["Name"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Name = "";
                                }
                                if ((message.ContentArgumentsIn["SubCategoryId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["SubCategoryId"].ToString() != String.Empty))
                                    {
                                        this._SubCategoryId = int.Parse(message.ContentArgumentsIn["SubCategoryId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._SubCategoryId = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateCategoryEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("LetterOrDigit", this._Name) == false))
                            {
                                ce = ce+1;
                            }
                            if ((this._SubCategoryId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateCategoryPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateCategory", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter Nameprm = cmd.Parameters.Add("Name", SqlDbType.Char, 200);
                                Nameprm.Direction = ParameterDirection.Input;
                                Nameprm.Value = this._Name;
                                if ((this._SubCategoryId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter SubCategoryIdprm = cmd.Parameters.Add("SubCategoryId", SqlDbType.Int);
                                    SubCategoryIdprm.Direction = ParameterDirection.Input;
                                    SubCategoryIdprm.Value = this._SubCategoryId;
                                }
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateCategoryCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateCategoryBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateCategoryEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateCategoryPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteCategoryCapability
                    {
                        
                        private int _Id;
                        
                        private bool DeleteCategoryBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteCategoryEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteCategoryPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteCategory", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteCategoryCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteCategoryBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteCategoryEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteCategoryPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectAllCategoryCapability
                    {
                        
                        private int _SelectAllCategoryCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectAllCategoryBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectAllCategoryEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAllCategory", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectAllCategoryPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAllCategory", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectAllCategoryCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing records...");
                            System.Data.DataTable temp = null;
                            bool v = this.SelectAllCategoryBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SelectAllCategoryCount = this.SelectAllCategoryEventFun();
                                    message.ContentArgumentsOut.Add("SelectAllCategoryCount", this._SelectAllCategoryCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectAllCategoryPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectCategoryBySubCategoryIdCapability
                    {
                        
                        private int _SubCategoryId;
                        
                        private int _SelectCategoryBySubCategoryIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectCategoryBySubCategoryIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["SubCategoryId"].ToString() != String.Empty))
                                {
                                    this._SubCategoryId = int.Parse(message.ContentArgumentsIn["SubCategoryId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._SubCategoryId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectCategoryBySubCategoryIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCategoryBySubCategoryId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter SubCategoryIdprm = cmd.Parameters.Add("@SubCategoryId", SqlDbType.Int);
                                SubCategoryIdprm.Direction = ParameterDirection.Input;
                                SubCategoryIdprm.Value = this._SubCategoryId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectCategoryBySubCategoryIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectCategoryBySubCategoryId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter SubCategoryIdprm = cmd.Parameters.Add("@SubCategoryId", SqlDbType.Int);
                                SubCategoryIdprm.Direction = ParameterDirection.Input;
                                SubCategoryIdprm.Value = this._SubCategoryId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectCategoryBySubCategoryIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectCategoryBySubCategoryIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectCategoryBySubCategoryIdCount = this.SelectCategoryBySubCategoryIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectCategoryBySubCategoryIdCount", this._SelectCategoryBySubCategoryIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectCategoryBySubCategoryIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                }
            }
            
            public class StockAgent
            {
                
                private UpdateStockGoal _UpdateStockGoal = new UpdateStockGoal();
                
                public ACLMessage Execute(ACLMessage message)
                {
                    return _UpdateStockGoal.UpdateStockGoalExecute(message);
                }
                
                public class UpdateStockGoal
                {
                    
                    private object _Success;
                    
                    private SelectMaxIdOrderInCapability _SelectMaxIdOrderInCapability = new SelectMaxIdOrderInCapability();
                    
                    private InsertOrderInCapability _InsertOrderInCapability = new InsertOrderInCapability();
                    
                    private UpdateOrderInCapability _UpdateOrderInCapability = new UpdateOrderInCapability();
                    
                    private DeleteOrderInCapability _DeleteOrderInCapability = new DeleteOrderInCapability();
                    
                    private SelectAllOrderInCapability _SelectAllOrderInCapability = new SelectAllOrderInCapability();
                    
                    private SelectOrderInBySupplierIdCapability _SelectOrderInBySupplierIdCapability = new SelectOrderInBySupplierIdCapability();
                    
                    private SelectMaxIdOrderIn_ItemCapability _SelectMaxIdOrderIn_ItemCapability = new SelectMaxIdOrderIn_ItemCapability();
                    
                    private InsertOrderIn_ItemCapability _InsertOrderIn_ItemCapability = new InsertOrderIn_ItemCapability();
                    
                    private UpdateOrderIn_ItemCapability _UpdateOrderIn_ItemCapability = new UpdateOrderIn_ItemCapability();
                    
                    private DeleteOrderIn_ItemCapability _DeleteOrderIn_ItemCapability = new DeleteOrderIn_ItemCapability();
                    
                    private SelectOrderIn_ItemByBookIdCapability _SelectOrderIn_ItemByBookIdCapability = new SelectOrderIn_ItemByBookIdCapability();
                    
                    private SelectOrderIn_ItemByOrderInIdCapability _SelectOrderIn_ItemByOrderInIdCapability = new SelectOrderIn_ItemByOrderInIdCapability();
                    
                    private SelectMaxIdOrderOutCapability _SelectMaxIdOrderOutCapability = new SelectMaxIdOrderOutCapability();
                    
                    private InsertOrderOutCapability _InsertOrderOutCapability = new InsertOrderOutCapability();
                    
                    private UpdateOrderOutCapability _UpdateOrderOutCapability = new UpdateOrderOutCapability();
                    
                    private DeleteOrderOutCapability _DeleteOrderOutCapability = new DeleteOrderOutCapability();
                    
                    private SelectAllOrderOutCapability _SelectAllOrderOutCapability = new SelectAllOrderOutCapability();
                    
                    private SelectOrderOutByCustomerIdCapability _SelectOrderOutByCustomerIdCapability = new SelectOrderOutByCustomerIdCapability();
                    
                    private SelectMaxIdOrderOut_ItemCapability _SelectMaxIdOrderOut_ItemCapability = new SelectMaxIdOrderOut_ItemCapability();
                    
                    private InsertOrderOut_ItemCapability _InsertOrderOut_ItemCapability = new InsertOrderOut_ItemCapability();
                    
                    private UpdateOrderOut_ItemCapability _UpdateOrderOut_ItemCapability = new UpdateOrderOut_ItemCapability();
                    
                    private DeleteOrderOut_ItemCapability _DeleteOrderOut_ItemCapability = new DeleteOrderOut_ItemCapability();
                    
                    private SelectOrderOut_ItemByBookIdCapability _SelectOrderOut_ItemByBookIdCapability = new SelectOrderOut_ItemByBookIdCapability();
                    
                    private SelectOrderOut_ItemByOrderOutIdCapability _SelectOrderOut_ItemByOrderOutIdCapability = new SelectOrderOut_ItemByOrderOutIdCapability();
                    
                    public ACLMessage UpdateStockGoalExecute(ACLMessage message)
                    {
                        if ((message.Content == "SelectMaxIdOrderInCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _SelectMaxIdOrderInCapability.SelectMaxIdOrderInCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertOrderInCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _InsertOrderInCapability.InsertOrderInCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateOrderInCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _UpdateOrderInCapability.UpdateOrderInCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteOrderInCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _DeleteOrderInCapability.DeleteOrderInCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectAllOrderInCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _SelectAllOrderInCapability.SelectAllOrderInCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectOrderInBySupplierIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _SelectOrderInBySupplierIdCapability.SelectOrderInBySupplierIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectMaxIdOrderIn_ItemCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _SelectMaxIdOrderIn_ItemCapability.SelectMaxIdOrderIn_ItemCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertOrderIn_ItemCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _InsertOrderIn_ItemCapability.InsertOrderIn_ItemCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateOrderIn_ItemCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _UpdateOrderIn_ItemCapability.UpdateOrderIn_ItemCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteOrderIn_ItemCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _DeleteOrderIn_ItemCapability.DeleteOrderIn_ItemCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectOrderIn_ItemByBookIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _SelectOrderIn_ItemByBookIdCapability.SelectOrderIn_ItemByBookIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectOrderIn_ItemByOrderInIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _SelectOrderIn_ItemByOrderInIdCapability.SelectOrderIn_ItemByOrderInIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectMaxIdOrderOutCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _SelectMaxIdOrderOutCapability.SelectMaxIdOrderOutCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertOrderOutCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _InsertOrderOutCapability.InsertOrderOutCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateOrderOutCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _UpdateOrderOutCapability.UpdateOrderOutCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteOrderOutCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _DeleteOrderOutCapability.DeleteOrderOutCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectAllOrderOutCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _SelectAllOrderOutCapability.SelectAllOrderOutCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectOrderOutByCustomerIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _SelectOrderOutByCustomerIdCapability.SelectOrderOutByCustomerIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectMaxIdOrderOut_ItemCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _SelectMaxIdOrderOut_ItemCapability.SelectMaxIdOrderOut_ItemCapabilityExecute();
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "InsertOrderOut_ItemCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _InsertOrderOut_ItemCapability.InsertOrderOut_ItemCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "UpdateOrderOut_ItemCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _UpdateOrderOut_ItemCapability.UpdateOrderOut_ItemCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "DeleteOrderOut_ItemCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _DeleteOrderOut_ItemCapability.DeleteOrderOut_ItemCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectOrderOut_ItemByBookIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _SelectOrderOut_ItemByBookIdCapability.SelectOrderOut_ItemByBookIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        if ((message.Content == "SelectOrderOut_ItemByOrderOutIdCapability"))
                        {
                            message.Receiver = message.Sender;
                            message.Sender = "StockAgent";
                            _Success = _SelectOrderOut_ItemByOrderOutIdCapability.SelectOrderOut_ItemByOrderOutIdCapabilityExecute(message);
                            if ((_Success == null))
                            {
                                message.Act = ACLMessage.Performative.Refuse;
                                _Success = "Error";
                            }
                            else
                            {
                                message.Act = ACLMessage.Performative.Inform;
                            }
                            message.ContentArgumentsOut.Add("Success", _Success);
                            return message;
                        }
                        return null;
                    }
                    
                    public class SelectMaxIdOrderInCapability
                    {
                        
                        private object SelectMaxIdOrderInBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdOrderIn", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdOrderInEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdOrderInPlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdOrderInCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdOrderInBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdOrderInEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdOrderInPlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertOrderInCapability
                    {
                        
                        private int _Id;
                        
                        private System.DateTime _OrderDate;
                        
                        private int _SupplierId;
                        
                        private string _Status;
                        
                        private bool InsertOrderInBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["OrderDate"] != null))
                                {
                                    if ((message.ContentArgumentsIn["OrderDate"].ToString() != String.Empty))
                                    {
                                        this._OrderDate = DateTime.Parse(message.ContentArgumentsIn["OrderDate"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._OrderDate = DateTime.Now;
                                }
                                if ((message.ContentArgumentsIn["SupplierId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["SupplierId"].ToString() != String.Empty))
                                    {
                                        this._SupplierId = int.Parse(message.ContentArgumentsIn["SupplierId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._SupplierId = 0;
                                }
                                if ((message.ContentArgumentsIn["Status"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Status"].ToString() != String.Empty))
                                    {
                                        this._Status = message.ContentArgumentsIn["Status"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Status = "";
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertOrderInEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._SupplierId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Status) == false))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertOrderInPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertOrderIn", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter OrderDateprm = cmd.Parameters.Add("OrderDate", SqlDbType.DateTime);
                                OrderDateprm.Direction = ParameterDirection.Input;
                                OrderDateprm.Value = this._OrderDate;
                                if ((this._SupplierId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter SupplierIdprm = cmd.Parameters.Add("SupplierId", SqlDbType.Int);
                                    SupplierIdprm.Direction = ParameterDirection.Input;
                                    SupplierIdprm.Value = this._SupplierId;
                                }
                                System.Data.SqlClient.SqlParameter Statusprm = cmd.Parameters.Add("Status", SqlDbType.Char, 30);
                                Statusprm.Direction = ParameterDirection.Input;
                                Statusprm.Value = this._Status;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertOrderInCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertOrderInBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertOrderInEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertOrderInPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateOrderInCapability
                    {
                        
                        private int _Id;
                        
                        private System.DateTime _OrderDate;
                        
                        private int _SupplierId;
                        
                        private string _Status;
                        
                        private bool UpdateOrderInBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["OrderDate"] != null))
                                {
                                    if ((message.ContentArgumentsIn["OrderDate"].ToString() != String.Empty))
                                    {
                                        this._OrderDate = DateTime.Parse(message.ContentArgumentsIn["OrderDate"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._OrderDate = DateTime.Now;
                                }
                                if ((message.ContentArgumentsIn["SupplierId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["SupplierId"].ToString() != String.Empty))
                                    {
                                        this._SupplierId = int.Parse(message.ContentArgumentsIn["SupplierId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._SupplierId = 0;
                                }
                                if ((message.ContentArgumentsIn["Status"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Status"].ToString() != String.Empty))
                                    {
                                        this._Status = message.ContentArgumentsIn["Status"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Status = "";
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateOrderInEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._SupplierId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Status) == false))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateOrderInPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateOrderIn", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter OrderDateprm = cmd.Parameters.Add("OrderDate", SqlDbType.DateTime);
                                OrderDateprm.Direction = ParameterDirection.Input;
                                OrderDateprm.Value = this._OrderDate;
                                if ((this._SupplierId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter SupplierIdprm = cmd.Parameters.Add("SupplierId", SqlDbType.Int);
                                    SupplierIdprm.Direction = ParameterDirection.Input;
                                    SupplierIdprm.Value = this._SupplierId;
                                }
                                System.Data.SqlClient.SqlParameter Statusprm = cmd.Parameters.Add("Status", SqlDbType.Char, 30);
                                Statusprm.Direction = ParameterDirection.Input;
                                Statusprm.Value = this._Status;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateOrderInCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateOrderInBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateOrderInEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateOrderInPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteOrderInCapability
                    {
                        
                        private int _Id;
                        
                        private bool DeleteOrderInBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteOrderInEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteOrderInPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteOrderIn", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteOrderInCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteOrderInBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteOrderInEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteOrderInPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectAllOrderInCapability
                    {
                        
                        private int _SelectAllOrderInCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectAllOrderInBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectAllOrderInEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAllOrderIn", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectAllOrderInPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAllOrderIn", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectAllOrderInCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing records...");
                            System.Data.DataTable temp = null;
                            bool v = this.SelectAllOrderInBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SelectAllOrderInCount = this.SelectAllOrderInEventFun();
                                    message.ContentArgumentsOut.Add("SelectAllOrderInCount", this._SelectAllOrderInCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectAllOrderInPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectOrderInBySupplierIdCapability
                    {
                        
                        private int _SupplierId;
                        
                        private int _SelectOrderInBySupplierIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectOrderInBySupplierIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["SupplierId"].ToString() != String.Empty))
                                {
                                    this._SupplierId = int.Parse(message.ContentArgumentsIn["SupplierId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._SupplierId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectOrderInBySupplierIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectOrderInBySupplierId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter SupplierIdprm = cmd.Parameters.Add("@SupplierId", SqlDbType.Int);
                                SupplierIdprm.Direction = ParameterDirection.Input;
                                SupplierIdprm.Value = this._SupplierId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectOrderInBySupplierIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectOrderInBySupplierId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter SupplierIdprm = cmd.Parameters.Add("@SupplierId", SqlDbType.Int);
                                SupplierIdprm.Direction = ParameterDirection.Input;
                                SupplierIdprm.Value = this._SupplierId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectOrderInBySupplierIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectOrderInBySupplierIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectOrderInBySupplierIdCount = this.SelectOrderInBySupplierIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectOrderInBySupplierIdCount", this._SelectOrderInBySupplierIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectOrderInBySupplierIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectMaxIdOrderIn_ItemCapability
                    {
                        
                        private object SelectMaxIdOrderIn_ItemBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdOrderIn_Item", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdOrderIn_ItemEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdOrderIn_ItemPlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdOrderIn_ItemCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdOrderIn_ItemBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdOrderIn_ItemEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdOrderIn_ItemPlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertOrderIn_ItemCapability
                    {
                        
                        private int _Id;
                        
                        private int _BookId;
                        
                        private double _Price;
                        
                        private double _Quantity;
                        
                        private int _OrderInId;
                        
                        private double _Total;
                        
                        private bool InsertOrderIn_ItemBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["BookId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["BookId"].ToString() != String.Empty))
                                    {
                                        this._BookId = int.Parse(message.ContentArgumentsIn["BookId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._BookId = 0;
                                }
                                if ((message.ContentArgumentsIn["Price"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Price"].ToString() != String.Empty))
                                    {
                                        this._Price = float.Parse(message.ContentArgumentsIn["Price"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Price = 0;
                                }
                                if ((message.ContentArgumentsIn["Quantity"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Quantity"].ToString() != String.Empty))
                                    {
                                        this._Quantity = float.Parse(message.ContentArgumentsIn["Quantity"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Quantity = 0;
                                }
                                if ((message.ContentArgumentsIn["OrderInId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["OrderInId"].ToString() != String.Empty))
                                    {
                                        this._OrderInId = int.Parse(message.ContentArgumentsIn["OrderInId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._OrderInId = 0;
                                }
                                if ((message.ContentArgumentsIn["Total"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Total"].ToString() != String.Empty))
                                    {
                                        this._Total = float.Parse(message.ContentArgumentsIn["Total"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Total = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertOrderIn_ItemEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._BookId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Price < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Quantity < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._OrderInId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Total < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertOrderIn_ItemPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertOrderIn_Item", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                if ((this._BookId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("BookId", SqlDbType.Int);
                                    BookIdprm.Direction = ParameterDirection.Input;
                                    BookIdprm.Value = this._BookId;
                                }
                                System.Data.SqlClient.SqlParameter Priceprm = cmd.Parameters.Add("Price", SqlDbType.Float);
                                Priceprm.Direction = ParameterDirection.Input;
                                Priceprm.Value = this._Price;
                                System.Data.SqlClient.SqlParameter Quantityprm = cmd.Parameters.Add("Quantity", SqlDbType.Float);
                                Quantityprm.Direction = ParameterDirection.Input;
                                Quantityprm.Value = this._Quantity;
                                if ((this._OrderInId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter OrderInIdprm = cmd.Parameters.Add("OrderInId", SqlDbType.Int);
                                    OrderInIdprm.Direction = ParameterDirection.Input;
                                    OrderInIdprm.Value = this._OrderInId;
                                }
                                System.Data.SqlClient.SqlParameter Totalprm = cmd.Parameters.Add("Total", SqlDbType.Float);
                                Totalprm.Direction = ParameterDirection.Input;
                                Totalprm.Value = this._Total;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertOrderIn_ItemCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertOrderIn_ItemBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertOrderIn_ItemEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertOrderIn_ItemPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateOrderIn_ItemCapability
                    {
                        
                        private int _Id;
                        
                        private int _BookId;
                        
                        private double _Price;
                        
                        private double _Quantity;
                        
                        private int _OrderInId;
                        
                        private double _Total;
                        
                        private bool UpdateOrderIn_ItemBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["BookId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["BookId"].ToString() != String.Empty))
                                    {
                                        this._BookId = int.Parse(message.ContentArgumentsIn["BookId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._BookId = 0;
                                }
                                if ((message.ContentArgumentsIn["Price"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Price"].ToString() != String.Empty))
                                    {
                                        this._Price = float.Parse(message.ContentArgumentsIn["Price"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Price = 0;
                                }
                                if ((message.ContentArgumentsIn["Quantity"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Quantity"].ToString() != String.Empty))
                                    {
                                        this._Quantity = float.Parse(message.ContentArgumentsIn["Quantity"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Quantity = 0;
                                }
                                if ((message.ContentArgumentsIn["OrderInId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["OrderInId"].ToString() != String.Empty))
                                    {
                                        this._OrderInId = int.Parse(message.ContentArgumentsIn["OrderInId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._OrderInId = 0;
                                }
                                if ((message.ContentArgumentsIn["Total"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Total"].ToString() != String.Empty))
                                    {
                                        this._Total = float.Parse(message.ContentArgumentsIn["Total"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Total = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateOrderIn_ItemEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._BookId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Price < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Quantity < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._OrderInId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Total < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateOrderIn_ItemPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateOrderIn_Item", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                if ((this._BookId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("BookId", SqlDbType.Int);
                                    BookIdprm.Direction = ParameterDirection.Input;
                                    BookIdprm.Value = this._BookId;
                                }
                                System.Data.SqlClient.SqlParameter Priceprm = cmd.Parameters.Add("Price", SqlDbType.Float);
                                Priceprm.Direction = ParameterDirection.Input;
                                Priceprm.Value = this._Price;
                                System.Data.SqlClient.SqlParameter Quantityprm = cmd.Parameters.Add("Quantity", SqlDbType.Float);
                                Quantityprm.Direction = ParameterDirection.Input;
                                Quantityprm.Value = this._Quantity;
                                if ((this._OrderInId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter OrderInIdprm = cmd.Parameters.Add("OrderInId", SqlDbType.Int);
                                    OrderInIdprm.Direction = ParameterDirection.Input;
                                    OrderInIdprm.Value = this._OrderInId;
                                }
                                System.Data.SqlClient.SqlParameter Totalprm = cmd.Parameters.Add("Total", SqlDbType.Float);
                                Totalprm.Direction = ParameterDirection.Input;
                                Totalprm.Value = this._Total;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateOrderIn_ItemCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateOrderIn_ItemBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateOrderIn_ItemEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateOrderIn_ItemPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteOrderIn_ItemCapability
                    {
                        
                        private int _Id;
                        
                        private bool DeleteOrderIn_ItemBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteOrderIn_ItemEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteOrderIn_ItemPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteOrderIn_Item", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteOrderIn_ItemCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteOrderIn_ItemBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteOrderIn_ItemEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteOrderIn_ItemPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectOrderIn_ItemByBookIdCapability
                    {
                        
                        private int _BookId;
                        
                        private int _SelectOrderIn_ItemByBookIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectOrderIn_ItemByBookIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["BookId"].ToString() != String.Empty))
                                {
                                    this._BookId = int.Parse(message.ContentArgumentsIn["BookId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._BookId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectOrderIn_ItemByBookIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectOrderIn_ItemByBookId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("@BookId", SqlDbType.Int);
                                BookIdprm.Direction = ParameterDirection.Input;
                                BookIdprm.Value = this._BookId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectOrderIn_ItemByBookIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectOrderIn_ItemByBookId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("@BookId", SqlDbType.Int);
                                BookIdprm.Direction = ParameterDirection.Input;
                                BookIdprm.Value = this._BookId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectOrderIn_ItemByBookIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectOrderIn_ItemByBookIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectOrderIn_ItemByBookIdCount = this.SelectOrderIn_ItemByBookIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectOrderIn_ItemByBookIdCount", this._SelectOrderIn_ItemByBookIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectOrderIn_ItemByBookIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectOrderIn_ItemByOrderInIdCapability
                    {
                        
                        private int _OrderInId;
                        
                        private int _SelectOrderIn_ItemByOrderInIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectOrderIn_ItemByOrderInIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["OrderInId"].ToString() != String.Empty))
                                {
                                    this._OrderInId = int.Parse(message.ContentArgumentsIn["OrderInId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._OrderInId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectOrderIn_ItemByOrderInIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectOrderIn_ItemByOrderInId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter OrderInIdprm = cmd.Parameters.Add("@OrderInId", SqlDbType.Int);
                                OrderInIdprm.Direction = ParameterDirection.Input;
                                OrderInIdprm.Value = this._OrderInId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectOrderIn_ItemByOrderInIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectOrderIn_ItemByOrderInId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter OrderInIdprm = cmd.Parameters.Add("@OrderInId", SqlDbType.Int);
                                OrderInIdprm.Direction = ParameterDirection.Input;
                                OrderInIdprm.Value = this._OrderInId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectOrderIn_ItemByOrderInIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectOrderIn_ItemByOrderInIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectOrderIn_ItemByOrderInIdCount = this.SelectOrderIn_ItemByOrderInIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectOrderIn_ItemByOrderInIdCount", this._SelectOrderIn_ItemByOrderInIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectOrderIn_ItemByOrderInIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectMaxIdOrderOutCapability
                    {
                        
                        private object SelectMaxIdOrderOutBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdOrderOut", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdOrderOutEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdOrderOutPlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdOrderOutCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdOrderOutBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdOrderOutEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdOrderOutPlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertOrderOutCapability
                    {
                        
                        private int _Id;
                        
                        private System.DateTime _OrderDate;
                        
                        private int _CustomerId;
                        
                        private double _Total;
                        
                        private double _Paid;
                        
                        private double _Change;
                        
                        private string _CreditCardNumber;
                        
                        private string _Holder;
                        
                        private string _Flag;
                        
                        private bool InsertOrderOutBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["OrderDate"] != null))
                                {
                                    if ((message.ContentArgumentsIn["OrderDate"].ToString() != String.Empty))
                                    {
                                        this._OrderDate = DateTime.Parse(message.ContentArgumentsIn["OrderDate"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._OrderDate = DateTime.Now;
                                }
                                if ((message.ContentArgumentsIn["CustomerId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                    {
                                        this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CustomerId = 0;
                                }
                                if ((message.ContentArgumentsIn["Total"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Total"].ToString() != String.Empty))
                                    {
                                        this._Total = float.Parse(message.ContentArgumentsIn["Total"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Total = 0;
                                }
                                if ((message.ContentArgumentsIn["Paid"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Paid"].ToString() != String.Empty))
                                    {
                                        this._Paid = float.Parse(message.ContentArgumentsIn["Paid"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Paid = 0;
                                }
                                if ((message.ContentArgumentsIn["Change"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Change"].ToString() != String.Empty))
                                    {
                                        this._Change = float.Parse(message.ContentArgumentsIn["Change"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Change = 0;
                                }
                                if ((message.ContentArgumentsIn["CreditCardNumber"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CreditCardNumber"].ToString() != String.Empty))
                                    {
                                        this._CreditCardNumber = message.ContentArgumentsIn["CreditCardNumber"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CreditCardNumber = "";
                                }
                                if ((message.ContentArgumentsIn["Holder"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Holder"].ToString() != String.Empty))
                                    {
                                        this._Holder = message.ContentArgumentsIn["Holder"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Holder = "";
                                }
                                if ((message.ContentArgumentsIn["Flag"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                    {
                                        this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Flag = "";
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertOrderOutEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._CustomerId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Total < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Paid < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Change < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Digit", this._CreditCardNumber) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Holder) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Flag) == false))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertOrderOutPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertOrderOut", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter OrderDateprm = cmd.Parameters.Add("OrderDate", SqlDbType.DateTime);
                                OrderDateprm.Direction = ParameterDirection.Input;
                                OrderDateprm.Value = this._OrderDate;
                                if ((this._CustomerId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("CustomerId", SqlDbType.Int);
                                    CustomerIdprm.Direction = ParameterDirection.Input;
                                    CustomerIdprm.Value = this._CustomerId;
                                }
                                System.Data.SqlClient.SqlParameter Totalprm = cmd.Parameters.Add("Total", SqlDbType.Float);
                                Totalprm.Direction = ParameterDirection.Input;
                                Totalprm.Value = this._Total;
                                System.Data.SqlClient.SqlParameter Paidprm = cmd.Parameters.Add("Paid", SqlDbType.Float);
                                Paidprm.Direction = ParameterDirection.Input;
                                Paidprm.Value = this._Paid;
                                System.Data.SqlClient.SqlParameter Changeprm = cmd.Parameters.Add("Change", SqlDbType.Float);
                                Changeprm.Direction = ParameterDirection.Input;
                                Changeprm.Value = this._Change;
                                System.Data.SqlClient.SqlParameter CreditCardNumberprm = cmd.Parameters.Add("CreditCardNumber", SqlDbType.Char, 20);
                                CreditCardNumberprm.Direction = ParameterDirection.Input;
                                CreditCardNumberprm.Value = this._CreditCardNumber;
                                System.Data.SqlClient.SqlParameter Holderprm = cmd.Parameters.Add("Holder", SqlDbType.Char, 30);
                                Holderprm.Direction = ParameterDirection.Input;
                                Holderprm.Value = this._Holder;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("Flag", SqlDbType.Char, 30);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertOrderOutCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertOrderOutBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertOrderOutEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertOrderOutPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateOrderOutCapability
                    {
                        
                        private int _Id;
                        
                        private System.DateTime _OrderDate;
                        
                        private int _CustomerId;
                        
                        private double _Total;
                        
                        private double _Paid;
                        
                        private double _Change;
                        
                        private string _CreditCardNumber;
                        
                        private string _Holder;
                        
                        private string _Flag;
                        
                        private bool UpdateOrderOutBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["OrderDate"] != null))
                                {
                                    if ((message.ContentArgumentsIn["OrderDate"].ToString() != String.Empty))
                                    {
                                        this._OrderDate = DateTime.Parse(message.ContentArgumentsIn["OrderDate"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._OrderDate = DateTime.Now;
                                }
                                if ((message.ContentArgumentsIn["CustomerId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                    {
                                        this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CustomerId = 0;
                                }
                                if ((message.ContentArgumentsIn["Total"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Total"].ToString() != String.Empty))
                                    {
                                        this._Total = float.Parse(message.ContentArgumentsIn["Total"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Total = 0;
                                }
                                if ((message.ContentArgumentsIn["Paid"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Paid"].ToString() != String.Empty))
                                    {
                                        this._Paid = float.Parse(message.ContentArgumentsIn["Paid"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Paid = 0;
                                }
                                if ((message.ContentArgumentsIn["Change"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Change"].ToString() != String.Empty))
                                    {
                                        this._Change = float.Parse(message.ContentArgumentsIn["Change"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Change = 0;
                                }
                                if ((message.ContentArgumentsIn["CreditCardNumber"] != null))
                                {
                                    if ((message.ContentArgumentsIn["CreditCardNumber"].ToString() != String.Empty))
                                    {
                                        this._CreditCardNumber = message.ContentArgumentsIn["CreditCardNumber"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._CreditCardNumber = "";
                                }
                                if ((message.ContentArgumentsIn["Holder"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Holder"].ToString() != String.Empty))
                                    {
                                        this._Holder = message.ContentArgumentsIn["Holder"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Holder = "";
                                }
                                if ((message.ContentArgumentsIn["Flag"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                    {
                                        this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Flag = "";
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateOrderOutEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._CustomerId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Total < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Paid < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Change < 0))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Digit", this._CreditCardNumber) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Holder) == false))
                            {
                                ce = ce+1;
                            }
                            if ((Validation.Validate("Letter", this._Flag) == false))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateOrderOutPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateOrderOut", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                System.Data.SqlClient.SqlParameter OrderDateprm = cmd.Parameters.Add("OrderDate", SqlDbType.DateTime);
                                OrderDateprm.Direction = ParameterDirection.Input;
                                OrderDateprm.Value = this._OrderDate;
                                if ((this._CustomerId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("CustomerId", SqlDbType.Int);
                                    CustomerIdprm.Direction = ParameterDirection.Input;
                                    CustomerIdprm.Value = this._CustomerId;
                                }
                                System.Data.SqlClient.SqlParameter Totalprm = cmd.Parameters.Add("Total", SqlDbType.Float);
                                Totalprm.Direction = ParameterDirection.Input;
                                Totalprm.Value = this._Total;
                                System.Data.SqlClient.SqlParameter Paidprm = cmd.Parameters.Add("Paid", SqlDbType.Float);
                                Paidprm.Direction = ParameterDirection.Input;
                                Paidprm.Value = this._Paid;
                                System.Data.SqlClient.SqlParameter Changeprm = cmd.Parameters.Add("Change", SqlDbType.Float);
                                Changeprm.Direction = ParameterDirection.Input;
                                Changeprm.Value = this._Change;
                                System.Data.SqlClient.SqlParameter CreditCardNumberprm = cmd.Parameters.Add("CreditCardNumber", SqlDbType.Char, 20);
                                CreditCardNumberprm.Direction = ParameterDirection.Input;
                                CreditCardNumberprm.Value = this._CreditCardNumber;
                                System.Data.SqlClient.SqlParameter Holderprm = cmd.Parameters.Add("Holder", SqlDbType.Char, 30);
                                Holderprm.Direction = ParameterDirection.Input;
                                Holderprm.Value = this._Holder;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("Flag", SqlDbType.Char, 30);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateOrderOutCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateOrderOutBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateOrderOutEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateOrderOutPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteOrderOutCapability
                    {
                        
                        private int _Id;
                        
                        private bool DeleteOrderOutBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteOrderOutEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteOrderOutPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteOrderOut", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteOrderOutCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteOrderOutBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteOrderOutEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteOrderOutPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectAllOrderOutCapability
                    {
                        
                        private int _SelectAllOrderOutCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectAllOrderOutBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectAllOrderOutEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAllOrderOut", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectAllOrderOutPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectAllOrderOut", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectAllOrderOutCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing records...");
                            System.Data.DataTable temp = null;
                            bool v = this.SelectAllOrderOutBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    this._SelectAllOrderOutCount = this.SelectAllOrderOutEventFun();
                                    message.ContentArgumentsOut.Add("SelectAllOrderOutCount", this._SelectAllOrderOutCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectAllOrderOutPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectOrderOutByCustomerIdCapability
                    {
                        
                        private int _CustomerId;
                        
                        private int _SelectOrderOutByCustomerIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectOrderOutByCustomerIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["CustomerId"].ToString() != String.Empty))
                                {
                                    this._CustomerId = int.Parse(message.ContentArgumentsIn["CustomerId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._CustomerId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectOrderOutByCustomerIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectOrderOutByCustomerId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("@CustomerId", SqlDbType.Int);
                                CustomerIdprm.Direction = ParameterDirection.Input;
                                CustomerIdprm.Value = this._CustomerId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectOrderOutByCustomerIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectOrderOutByCustomerId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter CustomerIdprm = cmd.Parameters.Add("@CustomerId", SqlDbType.Int);
                                CustomerIdprm.Direction = ParameterDirection.Input;
                                CustomerIdprm.Value = this._CustomerId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectOrderOutByCustomerIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectOrderOutByCustomerIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectOrderOutByCustomerIdCount = this.SelectOrderOutByCustomerIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectOrderOutByCustomerIdCount", this._SelectOrderOutByCustomerIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectOrderOutByCustomerIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectMaxIdOrderOut_ItemCapability
                    {
                        
                        private object SelectMaxIdOrderOut_ItemBeliefFun()
                        {
                            object val = null;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectMaxIdOrderOut_Item", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                val = cmd.ExecuteScalar();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return val;
                        }
                        
                        private int SelectMaxIdOrderOut_ItemEventFun(object CurrentId)
                        {
                            int _CurrentId = 0;
                            if ((CurrentId.ToString() != string.Empty))
                            {
                                _CurrentId = ((int)(CurrentId));
                            }
                            return _CurrentId;
                        }
                        
                        private int SelectMaxIdOrderOut_ItemPlanFun(int CurrentId)
                        {
                            if ((CurrentId == 0))
                            {
                                CurrentId = 1;
                            }
                            else
                            {
                                CurrentId = (CurrentId + 1);
                            }
                            return CurrentId;
                        }
                        
                        public int SelectMaxIdOrderOut_ItemCapabilityExecute()
                        {
                            AgentLog.WriteToFile(null, "Counting Records...");
                            object v = this.SelectMaxIdOrderOut_ItemBeliefFun();
                            AgentLog.WriteToFile(null, "Checking Count...");
                            int v1 = this.SelectMaxIdOrderOut_ItemEventFun(v);
                            AgentLog.WriteToFile(null, "Calculating New Key...");
                            int v2 = this.SelectMaxIdOrderOut_ItemPlanFun(v1);
                            return v2;
                        }
                    }
                    
                    public class InsertOrderOut_ItemCapability
                    {
                        
                        private int _Id;
                        
                        private int _BookId;
                        
                        private double _Price;
                        
                        private double _Quantity;
                        
                        private int _OrderOutId;
                        
                        private double _Total;
                        
                        private bool InsertOrderOut_ItemBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["BookId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["BookId"].ToString() != String.Empty))
                                    {
                                        this._BookId = int.Parse(message.ContentArgumentsIn["BookId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._BookId = 0;
                                }
                                if ((message.ContentArgumentsIn["Price"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Price"].ToString() != String.Empty))
                                    {
                                        this._Price = float.Parse(message.ContentArgumentsIn["Price"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Price = 0;
                                }
                                if ((message.ContentArgumentsIn["Quantity"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Quantity"].ToString() != String.Empty))
                                    {
                                        this._Quantity = float.Parse(message.ContentArgumentsIn["Quantity"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Quantity = 0;
                                }
                                if ((message.ContentArgumentsIn["OrderOutId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["OrderOutId"].ToString() != String.Empty))
                                    {
                                        this._OrderOutId = int.Parse(message.ContentArgumentsIn["OrderOutId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._OrderOutId = 0;
                                }
                                if ((message.ContentArgumentsIn["Total"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Total"].ToString() != String.Empty))
                                    {
                                        this._Total = float.Parse(message.ContentArgumentsIn["Total"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Total = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertOrderOut_ItemEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._BookId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Price < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Quantity < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._OrderOutId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Total < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool InsertOrderOut_ItemPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("InsertOrderOut_Item", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                if ((this._BookId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("BookId", SqlDbType.Int);
                                    BookIdprm.Direction = ParameterDirection.Input;
                                    BookIdprm.Value = this._BookId;
                                }
                                System.Data.SqlClient.SqlParameter Priceprm = cmd.Parameters.Add("Price", SqlDbType.Float);
                                Priceprm.Direction = ParameterDirection.Input;
                                Priceprm.Value = this._Price;
                                System.Data.SqlClient.SqlParameter Quantityprm = cmd.Parameters.Add("Quantity", SqlDbType.Float);
                                Quantityprm.Direction = ParameterDirection.Input;
                                Quantityprm.Value = this._Quantity;
                                if ((this._OrderOutId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter OrderOutIdprm = cmd.Parameters.Add("OrderOutId", SqlDbType.Int);
                                    OrderOutIdprm.Direction = ParameterDirection.Input;
                                    OrderOutIdprm.Value = this._OrderOutId;
                                }
                                System.Data.SqlClient.SqlParameter Totalprm = cmd.Parameters.Add("Total", SqlDbType.Float);
                                Totalprm.Direction = ParameterDirection.Input;
                                Totalprm.Value = this._Total;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool InsertOrderOut_ItemCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.InsertOrderOut_ItemBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.InsertOrderOut_ItemEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.InsertOrderOut_ItemPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class UpdateOrderOut_ItemCapability
                    {
                        
                        private int _Id;
                        
                        private int _BookId;
                        
                        private double _Price;
                        
                        private double _Quantity;
                        
                        private int _OrderOutId;
                        
                        private double _Total;
                        
                        private bool UpdateOrderOut_ItemBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((message.ContentArgumentsIn["BookId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["BookId"].ToString() != String.Empty))
                                    {
                                        this._BookId = int.Parse(message.ContentArgumentsIn["BookId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._BookId = 0;
                                }
                                if ((message.ContentArgumentsIn["Price"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Price"].ToString() != String.Empty))
                                    {
                                        this._Price = float.Parse(message.ContentArgumentsIn["Price"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Price = 0;
                                }
                                if ((message.ContentArgumentsIn["Quantity"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Quantity"].ToString() != String.Empty))
                                    {
                                        this._Quantity = float.Parse(message.ContentArgumentsIn["Quantity"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Quantity = 0;
                                }
                                if ((message.ContentArgumentsIn["OrderOutId"] != null))
                                {
                                    if ((message.ContentArgumentsIn["OrderOutId"].ToString() != String.Empty))
                                    {
                                        this._OrderOutId = int.Parse(message.ContentArgumentsIn["OrderOutId"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._OrderOutId = 0;
                                }
                                if ((message.ContentArgumentsIn["Total"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Total"].ToString() != String.Empty))
                                    {
                                        this._Total = float.Parse(message.ContentArgumentsIn["Total"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Total = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateOrderOut_ItemEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._BookId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Price < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Quantity < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._OrderOutId < 0))
                            {
                                ce = ce+1;
                            }
                            if ((this._Total < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool UpdateOrderOut_ItemPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("UpdateOrderOut_Item", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                if ((this._BookId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("BookId", SqlDbType.Int);
                                    BookIdprm.Direction = ParameterDirection.Input;
                                    BookIdprm.Value = this._BookId;
                                }
                                System.Data.SqlClient.SqlParameter Priceprm = cmd.Parameters.Add("Price", SqlDbType.Float);
                                Priceprm.Direction = ParameterDirection.Input;
                                Priceprm.Value = this._Price;
                                System.Data.SqlClient.SqlParameter Quantityprm = cmd.Parameters.Add("Quantity", SqlDbType.Float);
                                Quantityprm.Direction = ParameterDirection.Input;
                                Quantityprm.Value = this._Quantity;
                                if ((this._OrderOutId > 0))
                                {
                                    System.Data.SqlClient.SqlParameter OrderOutIdprm = cmd.Parameters.Add("OrderOutId", SqlDbType.Int);
                                    OrderOutIdprm.Direction = ParameterDirection.Input;
                                    OrderOutIdprm.Value = this._OrderOutId;
                                }
                                System.Data.SqlClient.SqlParameter Totalprm = cmd.Parameters.Add("Total", SqlDbType.Float);
                                Totalprm.Direction = ParameterDirection.Input;
                                Totalprm.Value = this._Total;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool UpdateOrderOut_ItemCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.UpdateOrderOut_ItemBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.UpdateOrderOut_ItemEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.UpdateOrderOut_ItemPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class DeleteOrderOut_ItemCapability
                    {
                        
                        private int _Id;
                        
                        private bool DeleteOrderOut_ItemBeliefFun(ACLMessage message)
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            try
                            {
                                if ((message.ContentArgumentsIn["Id"] != null))
                                {
                                    if ((message.ContentArgumentsIn["Id"].ToString() != String.Empty))
                                    {
                                        this._Id = int.Parse(message.ContentArgumentsIn["Id"].ToString());
                                    }
                                    else
                                    {
                                        ce = (ce + 1);
                                    }
                                }
                                else
                                {
                                    this._Id = 0;
                                }
                                if ((ce > 0))
                                {
                                    IsCheck = false;
                                }
                                else
                                {
                                    IsCheck = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteOrderOut_ItemEventFun()
                        {
                            int ce = 0;
                            bool IsCheck = false;
                            if ((this._Id < 0))
                            {
                                ce = ce+1;
                            }
                            if ((ce > 0))
                            {
                                IsCheck = false;
                            }
                            else
                            {
                                IsCheck = true;
                            }
                            return IsCheck;
                        }
                        
                        private bool DeleteOrderOut_ItemPlanFun()
                        {
                            bool IsCheck = false;
                            int rc = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("DeleteOrderOut_Item", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter Idprm = cmd.Parameters.Add("Id", SqlDbType.Int);
                                Idprm.Direction = ParameterDirection.Input;
                                Idprm.Value = this._Id;
                                rc = cmd.ExecuteNonQuery();
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            if ((rc > 0))
                            {
                                IsCheck = true;
                            }
                            else
                            {
                                IsCheck = false;
                            }
                            return IsCheck;
                        }
                        
                        public bool DeleteOrderOut_ItemCapabilityExecute(ACLMessage message)
                        {
                            AgentLog.WriteToFile(null, "Processing Data...");
                            bool v = this.DeleteOrderOut_ItemBeliefFun(message);
                            if ((v == true))
                            {
                                AgentLog.WriteToFile(null, "Validating Data...");
                                v = this.DeleteOrderOut_ItemEventFun();
                                if ((v == true))
                                {
                                    AgentLog.WriteToFile(null, "Executing Message...");
                                    v = this.DeleteOrderOut_ItemPlanFun();
                                }
                            }
                            return v;
                        }
                    }
                    
                    public class SelectOrderOut_ItemByBookIdCapability
                    {
                        
                        private int _BookId;
                        
                        private int _SelectOrderOut_ItemByBookIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectOrderOut_ItemByBookIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["BookId"].ToString() != String.Empty))
                                {
                                    this._BookId = int.Parse(message.ContentArgumentsIn["BookId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._BookId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectOrderOut_ItemByBookIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectOrderOut_ItemByBookId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("@BookId", SqlDbType.Int);
                                BookIdprm.Direction = ParameterDirection.Input;
                                BookIdprm.Value = this._BookId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectOrderOut_ItemByBookIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectOrderOut_ItemByBookId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter BookIdprm = cmd.Parameters.Add("@BookId", SqlDbType.Int);
                                BookIdprm.Direction = ParameterDirection.Input;
                                BookIdprm.Value = this._BookId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectOrderOut_ItemByBookIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectOrderOut_ItemByBookIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectOrderOut_ItemByBookIdCount = this.SelectOrderOut_ItemByBookIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectOrderOut_ItemByBookIdCount", this._SelectOrderOut_ItemByBookIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectOrderOut_ItemByBookIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                    
                    public class SelectOrderOut_ItemByOrderOutIdCapability
                    {
                        
                        private int _OrderOutId;
                        
                        private int _SelectOrderOut_ItemByOrderOutIdCount;
                        
                        private int _Top;
                        
                        private int _PageSize;
                        
                        private string _Flag;
                        
                        private bool SelectOrderOut_ItemByOrderOutIdBeliefFun(ACLMessage message)
                        {
                            bool IsCheck = false;
                            int ce = 0;
                            try
                            {
                                if ((message.ContentArgumentsIn["OrderOutId"].ToString() != String.Empty))
                                {
                                    this._OrderOutId = int.Parse(message.ContentArgumentsIn["OrderOutId"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Top"].ToString() != String.Empty))
                                {
                                    this._Top = int.Parse(message.ContentArgumentsIn["Top"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["PageSize"].ToString() != String.Empty))
                                {
                                    this._PageSize = int.Parse(message.ContentArgumentsIn["PageSize"].ToString());
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((message.ContentArgumentsIn["Flag"].ToString() != String.Empty))
                                {
                                    this._Flag = message.ContentArgumentsIn["Flag"].ToString();
                                }
                                else
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._OrderOutId < 0))
                                {
                                    ce = (ce + 1);
                                }
                                bool cond = (((this._Flag == "C") 
                                            && (this._Flag != "R")) 
                                            || ((this._Flag != "C") 
                                            && (this._Flag == "R")));
                                if ((this._Top <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((this._PageSize <= 0))
                                {
                                    ce = (ce + 1);
                                }
                                if ((cond == false))
                                {
                                    ce = (ce + 1);
                                }
                                if ((ce == 0))
                                {
                                    IsCheck = true;
                                }
                                else
                                {
                                    IsCheck = false;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return IsCheck;
                        }
                        
                        private int SelectOrderOut_ItemByOrderOutIdEventFun()
                        {
                            int temp = 0;
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectOrderOut_ItemByOrderOutId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter OrderOutIdprm = cmd.Parameters.Add("@OrderOutId", SqlDbType.Int);
                                OrderOutIdprm.Direction = ParameterDirection.Input;
                                OrderOutIdprm.Value = this._OrderOutId;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                temp = (int)cmd.ExecuteScalar();
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return -1;
                        }
                        
                        private System.Data.DataTable SelectOrderOut_ItemByOrderOutIdPlanFun()
                        {
                            System.Data.DataTable temp = new System.Data.DataTable();
                            try
                            {
                                System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(ItemStoreDBPath.Path);
                                conn.Open();
                                System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("SelectOrderOut_ItemByOrderOutId", conn);
                                cmd.CommandType = CommandType.StoredProcedure;
                                System.Data.SqlClient.SqlParameter OrderOutIdprm = cmd.Parameters.Add("@OrderOutId", SqlDbType.Int);
                                OrderOutIdprm.Direction = ParameterDirection.Input;
                                OrderOutIdprm.Value = this._OrderOutId;
                                System.Data.SqlClient.SqlParameter Topprm = cmd.Parameters.Add("@Top", SqlDbType.Int);
                                Topprm.Direction = ParameterDirection.Input;
                                Topprm.Value = this._Top;
                                System.Data.SqlClient.SqlParameter PageSizeprm = cmd.Parameters.Add("@PageSize", SqlDbType.Int);
                                PageSizeprm.Direction = ParameterDirection.Input;
                                PageSizeprm.Value = this._PageSize;
                                System.Data.SqlClient.SqlParameter Flagprm = cmd.Parameters.Add("@Flag", SqlDbType.Char, 1);
                                Flagprm.Direction = ParameterDirection.Input;
                                Flagprm.Value = this._Flag;
                                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(cmd);
                                adapter.Fill(temp);
                                conn.Close();
                                return temp;
                            }
                            catch (System.Exception ex)
                            {
                                // error
                            }
                            return null;
                        }
                        
                        public System.Data.DataTable SelectOrderOut_ItemByOrderOutIdCapabilityExecute(ACLMessage message)
                        {
                            System.Data.DataTable temp = null;
                            AgentLog.WriteToFile(null, "Processing records...");
                            bool v = this.SelectOrderOut_ItemByOrderOutIdBeliefFun(message);
                            if ((v == true))
                            {
                                if ((this._Flag == "C"))
                                {
                                    AgentLog.WriteToFile(null, "Validating records...");
                                    _SelectOrderOut_ItemByOrderOutIdCount = this.SelectOrderOut_ItemByOrderOutIdEventFun();
                                    message.ContentArgumentsOut.Add("SelectOrderOut_ItemByOrderOutIdCount", this._SelectOrderOut_ItemByOrderOutIdCount);
                                    this._Flag = "R";
                                }
                                if ((this._Flag == "R"))
                                {
                                    AgentLog.WriteToFile(null, "Getting records...");
                                    temp = this.SelectOrderOut_ItemByOrderOutIdPlanFun();
                                }
                            }
                            return temp;
                        }
                    }
                }
            }
        }
    }
    
    public class CustomerAgent
    {
        
        public object Success;
        
        public int _SelectAuthorBookByAuthorIdCount;
        
        public int _AuthorId;
        
        public int _SelectAuthorBookByBookIdCount;
        
        public int _BookId;
        
        public int _Top;
        
        public int _PageSize;
        
        public string _Flag;
        
        public int _Id;
        
        public int _NumOfVisits;
        
        public int _Amount;
        
        public string _ISBN;
        
        public string _Title;
        
        public int _EditionNumber;
        
        public int _CopyRight;
        
        public float _BookPrice;
        
        public int _CategoryId;
        
        public int _OfferId;
        
        public int _SelectAllBookCount;
        
        public int _SelectBookByCategoryIdCount;
        
        public int _SelectBookByOfferIdCount;
        
        public int _SearchBookByISBNCount;
        
        public int _SearchBookByTitleCount;
        
        public int _SearchBookByEditionNumberCount;
        
        public int _SearchBookByCopyRightCount;
        
        public int _SearchBookByBookPriceCount;
        
        public string _Name;
        
        public int _SubCategoryId;
        
        public int _SelectAllCategoryCount;
        
        public int _SelectCategoryBySubCategoryIdCount;
        
        public string _FirstName;
        
        public string _LastName;
        
        public string _MiddleName;
        
        public System.DateTime _DateOfBirth;
        
        public string _Email;
        
        public string _City;
        
        public string _Country;
        
        public string _Username;
        
        public string _Password;
        
        public int _SelectCustomerByUsernameAndPasswordCount;
        
        public int _Number;
        
        public string _Street;
        
        public int _District;
        
        public int _ZipCode;
        
        public int _CustomerId;
        
        public int _SelectCustomer_AddressByCustomerIdCount;
        
        public string _CCNumber;
        
        public string _CardType;
        
        public int _ExpirationMonth;
        
        public int _ExpirationYear;
        
        public int _SelectCustomer_CreditCardByCustomerIdCount;
        
        public string _Phone;
        
        public int _SelectCustomer_PhoneByCustomerIdCount;
        
        public string _Data;
        
        public int _SelectCustomer_SearchByCustomerIdCount;
        
        public float _Rate;
        
        public int _SelectCustomerRateByBookIdCount;
        
        public int _SelectCustomerRateByCustomerIdCount;
        
        public string _Review;
        
        public int _SelectCustomerReviewByBookIdCount;
        
        public int _SelectCustomerReviewByCustomerIdCount;
        
        public int _SelectCustomerWishListByBookIdCount;
        
        public int _SelectCustomerWishListByCustomerIdCount;
        
        public int _OrderOutId;
        
        public System.DateTime _StartDate;
        
        public System.DateTime _EndDate;
        
        public string _Status;
        
        public int _DeliveryMethodId;
        
        public float _Cost;
        
        public int _SelectDeliveryByOrderOutIdCount;
        
        public int _SelectDeliveryByDeliveryMethodIdCount;
        
        public int _SearchDeliveryByOrderOutIdCount;
        
        public string _Method;
        
        public float _PerItemCost;
        
        public int _MaxDeliveryTime;
        
        public int _MinDeliveryTime;
        
        public int _SelectAllDeliveryMethodCount;
        
        public System.DateTime _OrderDate;
        
        public float _Total;
        
        public float _Paid;
        
        public float _Change;
        
        public string _CreditCardNumber;
        
        public string _Holder;
        
        public int _SelectOrderOutByCustomerIdCount;
        
        public int _SearchOrderOutByIdCount;
        
        public float _Price;
        
        public float _Quantity;
        
        public int _SelectOrderOut_ItemByBookIdCount;
        
        public int _SelectOrderOut_ItemByOrderOutIdCount;
        
        public System.DateTime _Date;
        
        public int _SelectShoppingCartByCustomerIdCount;
        
        public int _ShoppingCartId;
        
        public int _SelectShoppingCart_BookByShoppingCartIdCount;
        
        public int _SelectShoppingCart_BookByBookIdCount;
        
        public void Execute(string Content)
        {
            ItemStoreDB.EShopAgent _EShopAgent = new ItemStoreDB.EShopAgent();
            ACLMessage message = new ACLMessage();
            ACLMessage OutMessage;
            if ((Content == "SelectAuthorBookByAuthorIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("AuthorId", _AuthorId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectAuthorBookByAuthorIdCount") == true))
                        {
                            _SelectAuthorBookByAuthorIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectAuthorBookByAuthorIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectAuthorBookByBookIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectAuthorBookByBookIdCount") == true))
                        {
                            _SelectAuthorBookByBookIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectAuthorBookByBookIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateNumOfVisitsInBookCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("NumOfVisits", _NumOfVisits);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateAmountInBookCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Amount", _Amount);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectAllBookCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectAllBookCount") == true))
                        {
                            _SelectAllBookCount = int.Parse(OutMessage.ContentArgumentsOut["SelectAllBookCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectBookByCategoryIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("CategoryId", _CategoryId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectBookByCategoryIdCount") == true))
                        {
                            _SelectBookByCategoryIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectBookByCategoryIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectBookByOfferIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("OfferId", _OfferId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectBookByOfferIdCount") == true))
                        {
                            _SelectBookByOfferIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectBookByOfferIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchBookByISBNCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("ISBN", _ISBN);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchBookByISBNCount") == true))
                        {
                            _SearchBookByISBNCount = int.Parse(OutMessage.ContentArgumentsOut["SearchBookByISBNCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchBookByTitleCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Title", _Title);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchBookByTitleCount") == true))
                        {
                            _SearchBookByTitleCount = int.Parse(OutMessage.ContentArgumentsOut["SearchBookByTitleCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchBookByEditionNumberCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("EditionNumber", _EditionNumber);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchBookByEditionNumberCount") == true))
                        {
                            _SearchBookByEditionNumberCount = int.Parse(OutMessage.ContentArgumentsOut["SearchBookByEditionNumberCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchBookByCopyRightCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("CopyRight", _CopyRight);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchBookByCopyRightCount") == true))
                        {
                            _SearchBookByCopyRightCount = int.Parse(OutMessage.ContentArgumentsOut["SearchBookByCopyRightCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchBookByBookPriceCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("BookPrice", _BookPrice);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchBookByBookPriceCount") == true))
                        {
                            _SearchBookByBookPriceCount = int.Parse(OutMessage.ContentArgumentsOut["SearchBookByBookPriceCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectAllCategoryCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectAllCategoryCount") == true))
                        {
                            _SelectAllCategoryCount = int.Parse(OutMessage.ContentArgumentsOut["SelectAllCategoryCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectCategoryBySubCategoryIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("SubCategoryId", _SubCategoryId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectCategoryBySubCategoryIdCount") == true))
                        {
                            _SelectCategoryBySubCategoryIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectCategoryBySubCategoryIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdCustomerCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertCustomerCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("FirstName", _FirstName);
                message.ContentArgumentsIn.Add("LastName", _LastName);
                message.ContentArgumentsIn.Add("MiddleName", _MiddleName);
                message.ContentArgumentsIn.Add("DateOfBirth", _DateOfBirth);
                message.ContentArgumentsIn.Add("Email", _Email);
                message.ContentArgumentsIn.Add("City", _City);
                message.ContentArgumentsIn.Add("Country", _Country);
                message.ContentArgumentsIn.Add("Username", _Username);
                message.ContentArgumentsIn.Add("Password", _Password);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateCustomerCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("FirstName", _FirstName);
                message.ContentArgumentsIn.Add("LastName", _LastName);
                message.ContentArgumentsIn.Add("MiddleName", _MiddleName);
                message.ContentArgumentsIn.Add("DateOfBirth", _DateOfBirth);
                message.ContentArgumentsIn.Add("Email", _Email);
                message.ContentArgumentsIn.Add("City", _City);
                message.ContentArgumentsIn.Add("Country", _Country);
                message.ContentArgumentsIn.Add("Username", _Username);
                message.ContentArgumentsIn.Add("Password", _Password);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteCustomerCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectCustomerByUsernameAndPasswordCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Username", _Username);
                message.ContentArgumentsIn.Add("Password", _Password);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectCustomerByUsernameAndPasswordCount") == true))
                        {
                            _SelectCustomerByUsernameAndPasswordCount = int.Parse(OutMessage.ContentArgumentsOut["SelectCustomerByUsernameAndPasswordCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdCustomer_AddressCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertCustomer_AddressCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Number", _Number);
                message.ContentArgumentsIn.Add("Street", _Street);
                message.ContentArgumentsIn.Add("District", _District);
                message.ContentArgumentsIn.Add("Country", _Country);
                message.ContentArgumentsIn.Add("City", _City);
                message.ContentArgumentsIn.Add("ZipCode", _ZipCode);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateCustomer_AddressCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Number", _Number);
                message.ContentArgumentsIn.Add("Street", _Street);
                message.ContentArgumentsIn.Add("District", _District);
                message.ContentArgumentsIn.Add("Country", _Country);
                message.ContentArgumentsIn.Add("City", _City);
                message.ContentArgumentsIn.Add("ZipCode", _ZipCode);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteCustomer_AddressCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectCustomer_AddressByCustomerIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectCustomer_AddressByCustomerIdCount") == true))
                        {
                            _SelectCustomer_AddressByCustomerIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectCustomer_AddressByCustomerIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdCustomer_CreditCardCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertCustomer_CreditCardCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("CCNumber", _CCNumber);
                message.ContentArgumentsIn.Add("Name", _Name);
                message.ContentArgumentsIn.Add("CardType", _CardType);
                message.ContentArgumentsIn.Add("ExpirationMonth", _ExpirationMonth);
                message.ContentArgumentsIn.Add("ExpirationYear", _ExpirationYear);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateCustomer_CreditCardCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("CCNumber", _CCNumber);
                message.ContentArgumentsIn.Add("Name", _Name);
                message.ContentArgumentsIn.Add("CardType", _CardType);
                message.ContentArgumentsIn.Add("ExpirationMonth", _ExpirationMonth);
                message.ContentArgumentsIn.Add("ExpirationYear", _ExpirationYear);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteCustomer_CreditCardCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectCustomer_CreditCardByCustomerIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectCustomer_CreditCardByCustomerIdCount") == true))
                        {
                            _SelectCustomer_CreditCardByCustomerIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectCustomer_CreditCardByCustomerIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdCustomer_PhoneCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertCustomer_PhoneCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Phone", _Phone);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateCustomer_PhoneCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Phone", _Phone);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteCustomer_PhoneCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectCustomer_PhoneByCustomerIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectCustomer_PhoneByCustomerIdCount") == true))
                        {
                            _SelectCustomer_PhoneByCustomerIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectCustomer_PhoneByCustomerIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdCustomer_SearchCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertCustomer_SearchCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Data", _Data);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateCustomer_SearchCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Data", _Data);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteCustomer_SearchCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectCustomer_SearchByCustomerIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectCustomer_SearchByCustomerIdCount") == true))
                        {
                            _SelectCustomer_SearchByCustomerIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectCustomer_SearchByCustomerIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdCustomerRateCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertCustomerRateCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Rate", _Rate);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateCustomerRateCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Rate", _Rate);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteCustomerRateCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectCustomerRateByBookIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectCustomerRateByBookIdCount") == true))
                        {
                            _SelectCustomerRateByBookIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectCustomerRateByBookIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectCustomerRateByCustomerIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectCustomerRateByCustomerIdCount") == true))
                        {
                            _SelectCustomerRateByCustomerIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectCustomerRateByCustomerIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdCustomerReviewCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertCustomerReviewCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Review", _Review);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateCustomerReviewCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Review", _Review);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteCustomerReviewCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectCustomerReviewByBookIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectCustomerReviewByBookIdCount") == true))
                        {
                            _SelectCustomerReviewByBookIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectCustomerReviewByBookIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectCustomerReviewByCustomerIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectCustomerReviewByCustomerIdCount") == true))
                        {
                            _SelectCustomerReviewByCustomerIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectCustomerReviewByCustomerIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdCustomerWishListCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertCustomerWishListCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateCustomerWishListCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteCustomerWishListCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectCustomerWishListByBookIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectCustomerWishListByBookIdCount") == true))
                        {
                            _SelectCustomerWishListByBookIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectCustomerWishListByBookIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectCustomerWishListByCustomerIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectCustomerWishListByCustomerIdCount") == true))
                        {
                            _SelectCustomerWishListByCustomerIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectCustomerWishListByCustomerIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertDeliveryCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "DeliveryAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("OrderOutId", _OrderOutId);
                message.ContentArgumentsIn.Add("StartDate", _StartDate);
                message.ContentArgumentsIn.Add("EndDate", _EndDate);
                message.ContentArgumentsIn.Add("Status", _Status);
                message.ContentArgumentsIn.Add("Number", _Number);
                message.ContentArgumentsIn.Add("Street", _Street);
                message.ContentArgumentsIn.Add("District", _District);
                message.ContentArgumentsIn.Add("Country", _Country);
                message.ContentArgumentsIn.Add("City", _City);
                message.ContentArgumentsIn.Add("ZipCode", _ZipCode);
                message.ContentArgumentsIn.Add("DeliveryMethodId", _DeliveryMethodId);
                message.ContentArgumentsIn.Add("Cost", _Cost);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateDeliveryCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "DeliveryAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("OrderOutId", _OrderOutId);
                message.ContentArgumentsIn.Add("StartDate", _StartDate);
                message.ContentArgumentsIn.Add("EndDate", _EndDate);
                message.ContentArgumentsIn.Add("Status", _Status);
                message.ContentArgumentsIn.Add("Number", _Number);
                message.ContentArgumentsIn.Add("Street", _Street);
                message.ContentArgumentsIn.Add("District", _District);
                message.ContentArgumentsIn.Add("Country", _Country);
                message.ContentArgumentsIn.Add("City", _City);
                message.ContentArgumentsIn.Add("ZipCode", _ZipCode);
                message.ContentArgumentsIn.Add("DeliveryMethodId", _DeliveryMethodId);
                message.ContentArgumentsIn.Add("Cost", _Cost);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteDeliveryCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "DeliveryAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("OrderOutId", _OrderOutId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectDeliveryByOrderOutIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "DeliveryAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("OrderOutId", _OrderOutId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectDeliveryByOrderOutIdCount") == true))
                        {
                            _SelectDeliveryByOrderOutIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectDeliveryByOrderOutIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectDeliveryByDeliveryMethodIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "DeliveryAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("DeliveryMethodId", _DeliveryMethodId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectDeliveryByDeliveryMethodIdCount") == true))
                        {
                            _SelectDeliveryByDeliveryMethodIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectDeliveryByDeliveryMethodIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchDeliveryByOrderOutIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("OrderOutId", _OrderOutId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchDeliveryByOrderOutIdCount") == true))
                        {
                            _SearchDeliveryByOrderOutIdCount = int.Parse(OutMessage.ContentArgumentsOut["SearchDeliveryByOrderOutIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectAllDeliveryMethodCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "DeliveryAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectAllDeliveryMethodCount") == true))
                        {
                            _SelectAllDeliveryMethodCount = int.Parse(OutMessage.ContentArgumentsOut["SelectAllDeliveryMethodCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdOrderOutCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertOrderOutCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("OrderDate", _OrderDate);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Total", _Total);
                message.ContentArgumentsIn.Add("Paid", _Paid);
                message.ContentArgumentsIn.Add("Change", _Change);
                message.ContentArgumentsIn.Add("CreditCardNumber", _CreditCardNumber);
                message.ContentArgumentsIn.Add("Holder", _Holder);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateOrderOutCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("OrderDate", _OrderDate);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Total", _Total);
                message.ContentArgumentsIn.Add("Paid", _Paid);
                message.ContentArgumentsIn.Add("Change", _Change);
                message.ContentArgumentsIn.Add("CreditCardNumber", _CreditCardNumber);
                message.ContentArgumentsIn.Add("Holder", _Holder);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteOrderOutCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectOrderOutByCustomerIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectOrderOutByCustomerIdCount") == true))
                        {
                            _SelectOrderOutByCustomerIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectOrderOutByCustomerIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchOrderOutByIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchOrderOutByIdCount") == true))
                        {
                            _SearchOrderOutByIdCount = int.Parse(OutMessage.ContentArgumentsOut["SearchOrderOutByIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdOrderOut_ItemCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertOrderOut_ItemCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("Price", _Price);
                message.ContentArgumentsIn.Add("Quantity", _Quantity);
                message.ContentArgumentsIn.Add("OrderOutId", _OrderOutId);
                message.ContentArgumentsIn.Add("Total", _Total);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateOrderOut_ItemCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("Price", _Price);
                message.ContentArgumentsIn.Add("Quantity", _Quantity);
                message.ContentArgumentsIn.Add("OrderOutId", _OrderOutId);
                message.ContentArgumentsIn.Add("Total", _Total);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteOrderOut_ItemCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectOrderOut_ItemByBookIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectOrderOut_ItemByBookIdCount") == true))
                        {
                            _SelectOrderOut_ItemByBookIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectOrderOut_ItemByBookIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectOrderOut_ItemByOrderOutIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("OrderOutId", _OrderOutId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectOrderOut_ItemByOrderOutIdCount") == true))
                        {
                            _SelectOrderOut_ItemByOrderOutIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectOrderOut_ItemByOrderOutIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdShoppingCartCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertShoppingCartCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Date", _Date);
                message.ContentArgumentsIn.Add("Total", _Total);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateShoppingCartCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Date", _Date);
                message.ContentArgumentsIn.Add("Total", _Total);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteShoppingCartCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectShoppingCartByCustomerIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectShoppingCartByCustomerIdCount") == true))
                        {
                            _SelectShoppingCartByCustomerIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectShoppingCartByCustomerIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdShoppingCart_BookCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertShoppingCart_BookCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("ShoppingCartId", _ShoppingCartId);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("Quantity", _Quantity);
                message.ContentArgumentsIn.Add("Price", _Price);
                message.ContentArgumentsIn.Add("Total", _Total);
                message.ContentArgumentsIn.Add("Status", _Status);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateShoppingCart_BookCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("ShoppingCartId", _ShoppingCartId);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("Quantity", _Quantity);
                message.ContentArgumentsIn.Add("Price", _Price);
                message.ContentArgumentsIn.Add("Total", _Total);
                message.ContentArgumentsIn.Add("Status", _Status);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteShoppingCart_BookCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectShoppingCart_BookByShoppingCartIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("ShoppingCartId", _ShoppingCartId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectShoppingCart_BookByShoppingCartIdCount") == true))
                        {
                            _SelectShoppingCart_BookByShoppingCartIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectShoppingCart_BookByShoppingCartIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectShoppingCart_BookByBookIdCapability"))
            {
                message.Sender = "CustomerAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectShoppingCart_BookByBookIdCount") == true))
                        {
                            _SelectShoppingCart_BookByBookIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectShoppingCart_BookByBookIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
        }
    }
    
    public class AdminAgent
    {
        
        public object Success;
        
        public int _Id;
        
        public string _Name;
        
        public int _SelectAllAuthorCount;
        
        public int _Top;
        
        public int _PageSize;
        
        public string _Flag;
        
        public int _SearchAuthorByNameCount;
        
        public int _AuthorId;
        
        public int _BookId;
        
        public int _SelectAuthorBookByAuthorIdCount;
        
        public int _SelectAuthorBookByBookIdCount;
        
        public string _ISBN;
        
        public string _Title;
        
        public int _EditionNumber;
        
        public int _CopyRight;
        
        public int _Amount;
        
        public float _BookPrice;
        
        public int _CategoryId;
        
        public int _NumOfVisits;
        
        public int _OfferId;
        
        public int _SelectAllBookCount;
        
        public int _SelectBookByCategoryIdCount;
        
        public int _SelectBookByOfferIdCount;
        
        public int _SearchBookByISBNCount;
        
        public int _SearchBookByTitleCount;
        
        public int _SearchBookByEditionNumberCount;
        
        public int _SearchBookByCopyRightCount;
        
        public int _SearchBookByBookPriceCount;
        
        public int _SubCategoryId;
        
        public int _SelectAllCategoryCount;
        
        public int _SelectCategoryBySubCategoryIdCount;
        
        public int _SearchCategoryByNameCount;
        
        public string _FirstName;
        
        public string _LastName;
        
        public string _MiddleName;
        
        public System.DateTime _DateOfBirth;
        
        public string _Email;
        
        public string _City;
        
        public string _Country;
        
        public string _Username;
        
        public string _Password;
        
        public int _SelectAllCustomerCount;
        
        public int _SearchCustomerByFirstNameCount;
        
        public int _SearchCustomerByLastNameCount;
        
        public int _SearchCustomerByMiddleNameCount;
        
        public int _Number;
        
        public string _Street;
        
        public int _District;
        
        public int _ZipCode;
        
        public int _CustomerId;
        
        public int _SelectCustomer_AddressByCustomerIdCount;
        
        public string _CCNumber;
        
        public string _CardType;
        
        public int _ExpirationMonth;
        
        public int _ExpirationYear;
        
        public int _SelectCustomer_CreditCardByCustomerIdCount;
        
        public string _Phone;
        
        public int _SelectCustomer_PhoneByCustomerIdCount;
        
        public int _SearchCustomer_PhoneByPhoneCount;
        
        public string _Data;
        
        public int _SelectCustomer_SearchByCustomerIdCount;
        
        public float _Rate;
        
        public int _SelectCustomerRateByBookIdCount;
        
        public int _SelectCustomerRateByCustomerIdCount;
        
        public string _Review;
        
        public int _SelectCustomerReviewByBookIdCount;
        
        public int _SelectCustomerReviewByCustomerIdCount;
        
        public int _SelectCustomerWishListByBookIdCount;
        
        public int _SelectCustomerWishListByCustomerIdCount;
        
        public int _OrderOutId;
        
        public System.DateTime _StartDate;
        
        public System.DateTime _EndDate;
        
        public string _Status;
        
        public int _DeliveryMethodId;
        
        public float _Cost;
        
        public int _SelectAllDeliveryCount;
        
        public int _SelectDeliveryByOrderOutIdCount;
        
        public int _SelectDeliveryByDeliveryMethodIdCount;
        
        public int _SearchDeliveryByOrderOutIdCount;
        
        public System.DateTime _Date;
        
        public System.DateTime _TimeOut;
        
        public System.DateTime _TimeIn;
        
        public string _Source;
        
        public string _Destination;
        
        public int _DeliveryId;
        
        public int _SelectDeliveryLogByDeliveryIdCount;
        
        public string _Method;
        
        public float _PerItemCost;
        
        public int _MaxDeliveryTime;
        
        public int _MinDeliveryTime;
        
        public int _SelectAllDeliveryMethodCount;
        
        public int _SearchDeliveryMethodByMethodCount;
        
        public float _Discount;
        
        public int _SelectAllOfferCount;
        
        public System.DateTime _OrderDate;
        
        public int _SupplierId;
        
        public int _SelectAllOrderInCount;
        
        public int _SelectOrderInBySupplierIdCount;
        
        public int _SearchOrderInByIdCount;
        
        public float _Price;
        
        public float _Quantity;
        
        public int _OrderInId;
        
        public float _Total;
        
        public int _SelectOrderIn_ItemByBookIdCount;
        
        public int _SelectOrderIn_ItemByOrderInIdCount;
        
        public float _Paid;
        
        public float _Change;
        
        public string _CreditCardNumber;
        
        public string _Holder;
        
        public int _SelectAllOrderOutCount;
        
        public int _SelectOrderOutByCustomerIdCount;
        
        public int _SearchOrderOutByIdCount;
        
        public int _SelectOrderOut_ItemByBookIdCount;
        
        public int _SelectOrderOut_ItemByOrderOutIdCount;
        
        public int _SelectShoppingCartByCustomerIdCount;
        
        public int _ShoppingCartId;
        
        public int _SelectShoppingCart_BookByShoppingCartIdCount;
        
        public int _SelectShoppingCart_BookByBookIdCount;
        
        public string _SupplierName;
        
        public int _SelectAllSupplierCount;
        
        public int _SearchSupplierBySupplierNameCount;
        
        public int _SelectSupplier_AddressBySupplierIdCount;
        
        public int _SelectSupplier_PhoneBySupplierIdCount;
        
        public int _SearchSupplier_PhoneByPhoneCount;
        
        public void Execute(string Content)
        {
            ItemStoreDB.EShopAgent _EShopAgent = new ItemStoreDB.EShopAgent();
            ACLMessage message = new ACLMessage();
            ACLMessage OutMessage;
            if ((Content == "SelectMaxIdAuthorCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertAuthorCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Name", _Name);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateAuthorCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Name", _Name);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteAuthorCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectAllAuthorCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectAllAuthorCount") == true))
                        {
                            _SelectAllAuthorCount = int.Parse(OutMessage.ContentArgumentsOut["SelectAllAuthorCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchAuthorByNameCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Name", _Name);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchAuthorByNameCount") == true))
                        {
                            _SearchAuthorByNameCount = int.Parse(OutMessage.ContentArgumentsOut["SearchAuthorByNameCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdAuthorBookCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertAuthorBookCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("AuthorId", _AuthorId);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateAuthorBookCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("AuthorId", _AuthorId);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteAuthorBookCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectAuthorBookByAuthorIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("AuthorId", _AuthorId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectAuthorBookByAuthorIdCount") == true))
                        {
                            _SelectAuthorBookByAuthorIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectAuthorBookByAuthorIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectAuthorBookByBookIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectAuthorBookByBookIdCount") == true))
                        {
                            _SelectAuthorBookByBookIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectAuthorBookByBookIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdBookCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertBookCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("ISBN", _ISBN);
                message.ContentArgumentsIn.Add("Title", _Title);
                message.ContentArgumentsIn.Add("EditionNumber", _EditionNumber);
                message.ContentArgumentsIn.Add("CopyRight", _CopyRight);
                message.ContentArgumentsIn.Add("Amount", _Amount);
                message.ContentArgumentsIn.Add("BookPrice", _BookPrice);
                message.ContentArgumentsIn.Add("CategoryId", _CategoryId);
                message.ContentArgumentsIn.Add("NumOfVisits", _NumOfVisits);
                message.ContentArgumentsIn.Add("OfferId", _OfferId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateBookCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("ISBN", _ISBN);
                message.ContentArgumentsIn.Add("Title", _Title);
                message.ContentArgumentsIn.Add("EditionNumber", _EditionNumber);
                message.ContentArgumentsIn.Add("CopyRight", _CopyRight);
                message.ContentArgumentsIn.Add("Amount", _Amount);
                message.ContentArgumentsIn.Add("BookPrice", _BookPrice);
                message.ContentArgumentsIn.Add("CategoryId", _CategoryId);
                message.ContentArgumentsIn.Add("NumOfVisits", _NumOfVisits);
                message.ContentArgumentsIn.Add("OfferId", _OfferId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteBookCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateBookPriceInBookCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CompetitiveAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("BookPrice", _BookPrice);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateAmountInBookCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Amount", _Amount);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectAllBookCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectAllBookCount") == true))
                        {
                            _SelectAllBookCount = int.Parse(OutMessage.ContentArgumentsOut["SelectAllBookCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectBookByCategoryIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("CategoryId", _CategoryId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectBookByCategoryIdCount") == true))
                        {
                            _SelectBookByCategoryIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectBookByCategoryIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectBookByOfferIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("OfferId", _OfferId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectBookByOfferIdCount") == true))
                        {
                            _SelectBookByOfferIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectBookByOfferIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchBookByISBNCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("ISBN", _ISBN);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchBookByISBNCount") == true))
                        {
                            _SearchBookByISBNCount = int.Parse(OutMessage.ContentArgumentsOut["SearchBookByISBNCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchBookByTitleCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Title", _Title);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchBookByTitleCount") == true))
                        {
                            _SearchBookByTitleCount = int.Parse(OutMessage.ContentArgumentsOut["SearchBookByTitleCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchBookByEditionNumberCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("EditionNumber", _EditionNumber);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchBookByEditionNumberCount") == true))
                        {
                            _SearchBookByEditionNumberCount = int.Parse(OutMessage.ContentArgumentsOut["SearchBookByEditionNumberCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchBookByCopyRightCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("CopyRight", _CopyRight);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchBookByCopyRightCount") == true))
                        {
                            _SearchBookByCopyRightCount = int.Parse(OutMessage.ContentArgumentsOut["SearchBookByCopyRightCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchBookByBookPriceCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("BookPrice", _BookPrice);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchBookByBookPriceCount") == true))
                        {
                            _SearchBookByBookPriceCount = int.Parse(OutMessage.ContentArgumentsOut["SearchBookByBookPriceCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdCategoryCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertCategoryCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Name", _Name);
                message.ContentArgumentsIn.Add("SubCategoryId", _SubCategoryId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateCategoryCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Name", _Name);
                message.ContentArgumentsIn.Add("SubCategoryId", _SubCategoryId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteCategoryCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectAllCategoryCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectAllCategoryCount") == true))
                        {
                            _SelectAllCategoryCount = int.Parse(OutMessage.ContentArgumentsOut["SelectAllCategoryCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectCategoryBySubCategoryIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CatalogueAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("SubCategoryId", _SubCategoryId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectCategoryBySubCategoryIdCount") == true))
                        {
                            _SelectCategoryBySubCategoryIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectCategoryBySubCategoryIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchCategoryByNameCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Name", _Name);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchCategoryByNameCount") == true))
                        {
                            _SearchCategoryByNameCount = int.Parse(OutMessage.ContentArgumentsOut["SearchCategoryByNameCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdCustomerCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertCustomerCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("FirstName", _FirstName);
                message.ContentArgumentsIn.Add("LastName", _LastName);
                message.ContentArgumentsIn.Add("MiddleName", _MiddleName);
                message.ContentArgumentsIn.Add("DateOfBirth", _DateOfBirth);
                message.ContentArgumentsIn.Add("Email", _Email);
                message.ContentArgumentsIn.Add("City", _City);
                message.ContentArgumentsIn.Add("Country", _Country);
                message.ContentArgumentsIn.Add("Username", _Username);
                message.ContentArgumentsIn.Add("Password", _Password);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateCustomerCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("FirstName", _FirstName);
                message.ContentArgumentsIn.Add("LastName", _LastName);
                message.ContentArgumentsIn.Add("MiddleName", _MiddleName);
                message.ContentArgumentsIn.Add("DateOfBirth", _DateOfBirth);
                message.ContentArgumentsIn.Add("Email", _Email);
                message.ContentArgumentsIn.Add("City", _City);
                message.ContentArgumentsIn.Add("Country", _Country);
                message.ContentArgumentsIn.Add("Username", _Username);
                message.ContentArgumentsIn.Add("Password", _Password);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteCustomerCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectAllCustomerCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectAllCustomerCount") == true))
                        {
                            _SelectAllCustomerCount = int.Parse(OutMessage.ContentArgumentsOut["SelectAllCustomerCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectAllCustomerCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "CustomerContactAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectAllCustomerCount") == true))
                        {
                            _SelectAllCustomerCount = int.Parse(OutMessage.ContentArgumentsOut["SelectAllCustomerCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchCustomerByFirstNameCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("FirstName", _FirstName);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchCustomerByFirstNameCount") == true))
                        {
                            _SearchCustomerByFirstNameCount = int.Parse(OutMessage.ContentArgumentsOut["SearchCustomerByFirstNameCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchCustomerByLastNameCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("LastName", _LastName);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchCustomerByLastNameCount") == true))
                        {
                            _SearchCustomerByLastNameCount = int.Parse(OutMessage.ContentArgumentsOut["SearchCustomerByLastNameCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchCustomerByMiddleNameCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("MiddleName", _MiddleName);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchCustomerByMiddleNameCount") == true))
                        {
                            _SearchCustomerByMiddleNameCount = int.Parse(OutMessage.ContentArgumentsOut["SearchCustomerByMiddleNameCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdCustomer_AddressCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertCustomer_AddressCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Number", _Number);
                message.ContentArgumentsIn.Add("Street", _Street);
                message.ContentArgumentsIn.Add("District", _District);
                message.ContentArgumentsIn.Add("Country", _Country);
                message.ContentArgumentsIn.Add("City", _City);
                message.ContentArgumentsIn.Add("ZipCode", _ZipCode);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateCustomer_AddressCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Number", _Number);
                message.ContentArgumentsIn.Add("Street", _Street);
                message.ContentArgumentsIn.Add("District", _District);
                message.ContentArgumentsIn.Add("Country", _Country);
                message.ContentArgumentsIn.Add("City", _City);
                message.ContentArgumentsIn.Add("ZipCode", _ZipCode);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteCustomer_AddressCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectCustomer_AddressByCustomerIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectCustomer_AddressByCustomerIdCount") == true))
                        {
                            _SelectCustomer_AddressByCustomerIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectCustomer_AddressByCustomerIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdCustomer_CreditCardCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertCustomer_CreditCardCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("CCNumber", _CCNumber);
                message.ContentArgumentsIn.Add("Name", _Name);
                message.ContentArgumentsIn.Add("CardType", _CardType);
                message.ContentArgumentsIn.Add("ExpirationMonth", _ExpirationMonth);
                message.ContentArgumentsIn.Add("ExpirationYear", _ExpirationYear);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateCustomer_CreditCardCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("CCNumber", _CCNumber);
                message.ContentArgumentsIn.Add("Name", _Name);
                message.ContentArgumentsIn.Add("CardType", _CardType);
                message.ContentArgumentsIn.Add("ExpirationMonth", _ExpirationMonth);
                message.ContentArgumentsIn.Add("ExpirationYear", _ExpirationYear);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteCustomer_CreditCardCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectCustomer_CreditCardByCustomerIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectCustomer_CreditCardByCustomerIdCount") == true))
                        {
                            _SelectCustomer_CreditCardByCustomerIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectCustomer_CreditCardByCustomerIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdCustomer_PhoneCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertCustomer_PhoneCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Phone", _Phone);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateCustomer_PhoneCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Phone", _Phone);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteCustomer_PhoneCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectCustomer_PhoneByCustomerIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectCustomer_PhoneByCustomerIdCount") == true))
                        {
                            _SelectCustomer_PhoneByCustomerIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectCustomer_PhoneByCustomerIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchCustomer_PhoneByPhoneCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Phone", _Phone);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchCustomer_PhoneByPhoneCount") == true))
                        {
                            _SearchCustomer_PhoneByPhoneCount = int.Parse(OutMessage.ContentArgumentsOut["SearchCustomer_PhoneByPhoneCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertCustomer_SearchCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Data", _Data);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateCustomer_SearchCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Data", _Data);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteCustomer_SearchCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectCustomer_SearchByCustomerIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectCustomer_SearchByCustomerIdCount") == true))
                        {
                            _SelectCustomer_SearchByCustomerIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectCustomer_SearchByCustomerIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertCustomerRateCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Rate", _Rate);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateCustomerRateCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Rate", _Rate);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteCustomerRateCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectCustomerRateByBookIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectCustomerRateByBookIdCount") == true))
                        {
                            _SelectCustomerRateByBookIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectCustomerRateByBookIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectCustomerRateByCustomerIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectCustomerRateByCustomerIdCount") == true))
                        {
                            _SelectCustomerRateByCustomerIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectCustomerRateByCustomerIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertCustomerReviewCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Review", _Review);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateCustomerReviewCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Review", _Review);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteCustomerReviewCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectCustomerReviewByBookIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectCustomerReviewByBookIdCount") == true))
                        {
                            _SelectCustomerReviewByBookIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectCustomerReviewByBookIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectCustomerReviewByCustomerIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectCustomerReviewByCustomerIdCount") == true))
                        {
                            _SelectCustomerReviewByCustomerIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectCustomerReviewByCustomerIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertCustomerWishListCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateCustomerWishListCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteCustomerWishListCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectCustomerWishListByBookIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectCustomerWishListByBookIdCount") == true))
                        {
                            _SelectCustomerWishListByBookIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectCustomerWishListByBookIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectCustomerWishListByCustomerIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "InteractionAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectCustomerWishListByCustomerIdCount") == true))
                        {
                            _SelectCustomerWishListByCustomerIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectCustomerWishListByCustomerIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertDeliveryCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "DeliveryAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("OrderOutId", _OrderOutId);
                message.ContentArgumentsIn.Add("StartDate", _StartDate);
                message.ContentArgumentsIn.Add("EndDate", _EndDate);
                message.ContentArgumentsIn.Add("Status", _Status);
                message.ContentArgumentsIn.Add("Number", _Number);
                message.ContentArgumentsIn.Add("Street", _Street);
                message.ContentArgumentsIn.Add("District", _District);
                message.ContentArgumentsIn.Add("Country", _Country);
                message.ContentArgumentsIn.Add("City", _City);
                message.ContentArgumentsIn.Add("ZipCode", _ZipCode);
                message.ContentArgumentsIn.Add("DeliveryMethodId", _DeliveryMethodId);
                message.ContentArgumentsIn.Add("Cost", _Cost);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateDeliveryCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "DeliveryAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("OrderOutId", _OrderOutId);
                message.ContentArgumentsIn.Add("StartDate", _StartDate);
                message.ContentArgumentsIn.Add("EndDate", _EndDate);
                message.ContentArgumentsIn.Add("Status", _Status);
                message.ContentArgumentsIn.Add("Number", _Number);
                message.ContentArgumentsIn.Add("Street", _Street);
                message.ContentArgumentsIn.Add("District", _District);
                message.ContentArgumentsIn.Add("Country", _Country);
                message.ContentArgumentsIn.Add("City", _City);
                message.ContentArgumentsIn.Add("ZipCode", _ZipCode);
                message.ContentArgumentsIn.Add("DeliveryMethodId", _DeliveryMethodId);
                message.ContentArgumentsIn.Add("Cost", _Cost);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteDeliveryCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "DeliveryAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("OrderOutId", _OrderOutId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectAllDeliveryCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "DeliveryAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectAllDeliveryCount") == true))
                        {
                            _SelectAllDeliveryCount = int.Parse(OutMessage.ContentArgumentsOut["SelectAllDeliveryCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectDeliveryByOrderOutIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "DeliveryAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("OrderOutId", _OrderOutId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectDeliveryByOrderOutIdCount") == true))
                        {
                            _SelectDeliveryByOrderOutIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectDeliveryByOrderOutIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectDeliveryByDeliveryMethodIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "DeliveryAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("DeliveryMethodId", _DeliveryMethodId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectDeliveryByDeliveryMethodIdCount") == true))
                        {
                            _SelectDeliveryByDeliveryMethodIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectDeliveryByDeliveryMethodIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchDeliveryByOrderOutIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("OrderOutId", _OrderOutId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchDeliveryByOrderOutIdCount") == true))
                        {
                            _SearchDeliveryByOrderOutIdCount = int.Parse(OutMessage.ContentArgumentsOut["SearchDeliveryByOrderOutIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdDeliveryLogCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "LostGoodAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertDeliveryLogCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "LostGoodAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Date", _Date);
                message.ContentArgumentsIn.Add("TimeOut", _TimeOut);
                message.ContentArgumentsIn.Add("TimeIn", _TimeIn);
                message.ContentArgumentsIn.Add("Source", _Source);
                message.ContentArgumentsIn.Add("Destination", _Destination);
                message.ContentArgumentsIn.Add("DeliveryId", _DeliveryId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateDeliveryLogCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "LostGoodAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Date", _Date);
                message.ContentArgumentsIn.Add("TimeOut", _TimeOut);
                message.ContentArgumentsIn.Add("TimeIn", _TimeIn);
                message.ContentArgumentsIn.Add("Source", _Source);
                message.ContentArgumentsIn.Add("Destination", _Destination);
                message.ContentArgumentsIn.Add("DeliveryId", _DeliveryId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteDeliveryLogCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "LostGoodAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectDeliveryLogByDeliveryIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "LostGoodAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("DeliveryId", _DeliveryId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectDeliveryLogByDeliveryIdCount") == true))
                        {
                            _SelectDeliveryLogByDeliveryIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectDeliveryLogByDeliveryIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdDeliveryMethodCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "DeliveryAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertDeliveryMethodCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "DeliveryAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Method", _Method);
                message.ContentArgumentsIn.Add("Cost", _Cost);
                message.ContentArgumentsIn.Add("PerItemCost", _PerItemCost);
                message.ContentArgumentsIn.Add("MaxDeliveryTime", _MaxDeliveryTime);
                message.ContentArgumentsIn.Add("MinDeliveryTime", _MinDeliveryTime);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateDeliveryMethodCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "DeliveryAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Method", _Method);
                message.ContentArgumentsIn.Add("Cost", _Cost);
                message.ContentArgumentsIn.Add("PerItemCost", _PerItemCost);
                message.ContentArgumentsIn.Add("MaxDeliveryTime", _MaxDeliveryTime);
                message.ContentArgumentsIn.Add("MinDeliveryTime", _MinDeliveryTime);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteDeliveryMethodCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "DeliveryAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectAllDeliveryMethodCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "DeliveryAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectAllDeliveryMethodCount") == true))
                        {
                            _SelectAllDeliveryMethodCount = int.Parse(OutMessage.ContentArgumentsOut["SelectAllDeliveryMethodCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchDeliveryMethodByMethodCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Method", _Method);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchDeliveryMethodByMethodCount") == true))
                        {
                            _SearchDeliveryMethodByMethodCount = int.Parse(OutMessage.ContentArgumentsOut["SearchDeliveryMethodByMethodCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdOfferCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertOfferCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("StartDate", _StartDate);
                message.ContentArgumentsIn.Add("EndDate", _EndDate);
                message.ContentArgumentsIn.Add("Discount", _Discount);
                message.ContentArgumentsIn.Add("Status", _Status);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateOfferCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("StartDate", _StartDate);
                message.ContentArgumentsIn.Add("EndDate", _EndDate);
                message.ContentArgumentsIn.Add("Discount", _Discount);
                message.ContentArgumentsIn.Add("Status", _Status);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteOfferCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectAllOfferCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectAllOfferCount") == true))
                        {
                            _SelectAllOfferCount = int.Parse(OutMessage.ContentArgumentsOut["SelectAllOfferCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdOrderInCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertOrderInCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("OrderDate", _OrderDate);
                message.ContentArgumentsIn.Add("SupplierId", _SupplierId);
                message.ContentArgumentsIn.Add("Status", _Status);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateOrderInCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("OrderDate", _OrderDate);
                message.ContentArgumentsIn.Add("SupplierId", _SupplierId);
                message.ContentArgumentsIn.Add("Status", _Status);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteOrderInCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectAllOrderInCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectAllOrderInCount") == true))
                        {
                            _SelectAllOrderInCount = int.Parse(OutMessage.ContentArgumentsOut["SelectAllOrderInCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectOrderInBySupplierIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("SupplierId", _SupplierId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectOrderInBySupplierIdCount") == true))
                        {
                            _SelectOrderInBySupplierIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectOrderInBySupplierIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchOrderInByIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchOrderInByIdCount") == true))
                        {
                            _SearchOrderInByIdCount = int.Parse(OutMessage.ContentArgumentsOut["SearchOrderInByIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdOrderIn_ItemCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertOrderIn_ItemCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("Price", _Price);
                message.ContentArgumentsIn.Add("Quantity", _Quantity);
                message.ContentArgumentsIn.Add("OrderInId", _OrderInId);
                message.ContentArgumentsIn.Add("Total", _Total);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateOrderIn_ItemCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("Price", _Price);
                message.ContentArgumentsIn.Add("Quantity", _Quantity);
                message.ContentArgumentsIn.Add("OrderInId", _OrderInId);
                message.ContentArgumentsIn.Add("Total", _Total);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteOrderIn_ItemCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectOrderIn_ItemByBookIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectOrderIn_ItemByBookIdCount") == true))
                        {
                            _SelectOrderIn_ItemByBookIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectOrderIn_ItemByBookIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectOrderIn_ItemByOrderInIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("OrderInId", _OrderInId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectOrderIn_ItemByOrderInIdCount") == true))
                        {
                            _SelectOrderIn_ItemByOrderInIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectOrderIn_ItemByOrderInIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdOrderOutCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertOrderOutCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("OrderDate", _OrderDate);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Total", _Total);
                message.ContentArgumentsIn.Add("Paid", _Paid);
                message.ContentArgumentsIn.Add("Change", _Change);
                message.ContentArgumentsIn.Add("CreditCardNumber", _CreditCardNumber);
                message.ContentArgumentsIn.Add("Holder", _Holder);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateOrderOutCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("OrderDate", _OrderDate);
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Total", _Total);
                message.ContentArgumentsIn.Add("Paid", _Paid);
                message.ContentArgumentsIn.Add("Change", _Change);
                message.ContentArgumentsIn.Add("CreditCardNumber", _CreditCardNumber);
                message.ContentArgumentsIn.Add("Holder", _Holder);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteOrderOutCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectAllOrderOutCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectAllOrderOutCount") == true))
                        {
                            _SelectAllOrderOutCount = int.Parse(OutMessage.ContentArgumentsOut["SelectAllOrderOutCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectOrderOutByCustomerIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectOrderOutByCustomerIdCount") == true))
                        {
                            _SelectOrderOutByCustomerIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectOrderOutByCustomerIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchOrderOutByIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchOrderOutByIdCount") == true))
                        {
                            _SearchOrderOutByIdCount = int.Parse(OutMessage.ContentArgumentsOut["SearchOrderOutByIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdOrderOut_ItemCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertOrderOut_ItemCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("Price", _Price);
                message.ContentArgumentsIn.Add("Quantity", _Quantity);
                message.ContentArgumentsIn.Add("OrderOutId", _OrderOutId);
                message.ContentArgumentsIn.Add("Total", _Total);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateOrderOut_ItemCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("Price", _Price);
                message.ContentArgumentsIn.Add("Quantity", _Quantity);
                message.ContentArgumentsIn.Add("OrderOutId", _OrderOutId);
                message.ContentArgumentsIn.Add("Total", _Total);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteOrderOut_ItemCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectOrderOut_ItemByBookIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectOrderOut_ItemByBookIdCount") == true))
                        {
                            _SelectOrderOut_ItemByBookIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectOrderOut_ItemByBookIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectOrderOut_ItemByOrderOutIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "StockAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("OrderOutId", _OrderOutId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectOrderOut_ItemByOrderOutIdCount") == true))
                        {
                            _SelectOrderOut_ItemByOrderOutIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectOrderOut_ItemByOrderOutIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdShoppingCartCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertShoppingCartCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Date", _Date);
                message.ContentArgumentsIn.Add("Total", _Total);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateShoppingCartCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Date", _Date);
                message.ContentArgumentsIn.Add("Total", _Total);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteShoppingCartCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectShoppingCartByCustomerIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("CustomerId", _CustomerId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectShoppingCartByCustomerIdCount") == true))
                        {
                            _SelectShoppingCartByCustomerIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectShoppingCartByCustomerIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdShoppingCart_BookCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertShoppingCart_BookCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("ShoppingCartId", _ShoppingCartId);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("Quantity", _Quantity);
                message.ContentArgumentsIn.Add("Price", _Price);
                message.ContentArgumentsIn.Add("Total", _Total);
                message.ContentArgumentsIn.Add("Status", _Status);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateShoppingCart_BookCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("ShoppingCartId", _ShoppingCartId);
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("Quantity", _Quantity);
                message.ContentArgumentsIn.Add("Price", _Price);
                message.ContentArgumentsIn.Add("Total", _Total);
                message.ContentArgumentsIn.Add("Status", _Status);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteShoppingCart_BookCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectShoppingCart_BookByShoppingCartIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("ShoppingCartId", _ShoppingCartId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectShoppingCart_BookByShoppingCartIdCount") == true))
                        {
                            _SelectShoppingCart_BookByShoppingCartIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectShoppingCart_BookByShoppingCartIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectShoppingCart_BookByBookIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "PurchaseAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("BookId", _BookId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectShoppingCart_BookByBookIdCount") == true))
                        {
                            _SelectShoppingCart_BookByBookIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectShoppingCart_BookByBookIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdSupplierCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertSupplierCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("SupplierName", _SupplierName);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateSupplierCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("SupplierName", _SupplierName);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteSupplierCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectAllSupplierCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectAllSupplierCount") == true))
                        {
                            _SelectAllSupplierCount = int.Parse(OutMessage.ContentArgumentsOut["SelectAllSupplierCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchSupplierBySupplierNameCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("SupplierName", _SupplierName);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchSupplierBySupplierNameCount") == true))
                        {
                            _SearchSupplierBySupplierNameCount = int.Parse(OutMessage.ContentArgumentsOut["SearchSupplierBySupplierNameCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdSupplier_AddressCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertSupplier_AddressCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Number", _Number);
                message.ContentArgumentsIn.Add("Street", _Street);
                message.ContentArgumentsIn.Add("District", _District);
                message.ContentArgumentsIn.Add("Country", _Country);
                message.ContentArgumentsIn.Add("City", _City);
                message.ContentArgumentsIn.Add("SupplierId", _SupplierId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateSupplier_AddressCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Number", _Number);
                message.ContentArgumentsIn.Add("Street", _Street);
                message.ContentArgumentsIn.Add("District", _District);
                message.ContentArgumentsIn.Add("Country", _Country);
                message.ContentArgumentsIn.Add("City", _City);
                message.ContentArgumentsIn.Add("SupplierId", _SupplierId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteSupplier_AddressCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectSupplier_AddressBySupplierIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("SupplierId", _SupplierId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectSupplier_AddressBySupplierIdCount") == true))
                        {
                            _SelectSupplier_AddressBySupplierIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectSupplier_AddressBySupplierIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectMaxIdSupplier_PhoneCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "InsertSupplier_PhoneCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Phone", _Phone);
                message.ContentArgumentsIn.Add("SupplierId", _SupplierId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "UpdateSupplier_PhoneCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                message.ContentArgumentsIn.Add("Phone", _Phone);
                message.ContentArgumentsIn.Add("SupplierId", _SupplierId);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "DeleteSupplier_PhoneCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.RequestWhen;
                message.ContentArgumentsIn.Add("Id", _Id);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SelectSupplier_PhoneBySupplierIdCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "ProfileMonitorAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("SupplierId", _SupplierId);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SelectSupplier_PhoneBySupplierIdCount") == true))
                        {
                            _SelectSupplier_PhoneBySupplierIdCount = int.Parse(OutMessage.ContentArgumentsOut["SelectSupplier_PhoneBySupplierIdCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
            if ((Content == "SearchSupplier_PhoneByPhoneCapability"))
            {
                message.Sender = "AdminAgent";
                message.Content = Content;
                message.Receiver = "SearchAgent";
                message.Act = ACLMessage.Performative.QueryIf;
                message.ContentArgumentsIn.Add("Phone", _Phone);
                message.ContentArgumentsIn.Add("Top", _Top);
                message.ContentArgumentsIn.Add("PageSize", _PageSize);
                message.ContentArgumentsIn.Add("Flag", _Flag);
                AgentLog.WriteToFile(message, "S");
                OutMessage = _EShopAgent.ReceiveMessage(message);
                if ((OutMessage.Act == ACLMessage.Performative.Inform))
                {
                    if ((OutMessage.ContentArgumentsOut.Count > 0))
                    {
                        Success = OutMessage.ContentArgumentsOut["Success"];
                        if ((OutMessage.ContentArgumentsOut.ContainsKey("SearchSupplier_PhoneByPhoneCount") == true))
                        {
                            _SearchSupplier_PhoneByPhoneCount = int.Parse(OutMessage.ContentArgumentsOut["SearchSupplier_PhoneByPhoneCount"].ToString());
                        }
                    }
                }
                AgentLog.WriteToFile(OutMessage, "R");
                return;
            }
        }
    }
    
    public class ACLMessage
    {
        
        #region Attributes
        private Performative _Act;
        
        private string _Sender;
        
        private string _Receiver;
        
        private string _Content;
        
        private System.Collections.Generic.Dictionary<string, object> _ContentArgumentsIn = new System.Collections.Generic.Dictionary<string, object>();
        
        private System.Collections.Generic.Dictionary<string, object> _ContentArgumentsOut = new System.Collections.Generic.Dictionary<string, object>();
        #endregion
        
        #region Properties
        public Performative Act
        {
            get
            {
                return this._Act;
            }
            set
            {
                this._Act = value;
            }
        }
        
        public string Sender
        {
            get
            {
                return this._Sender;
            }
            set
            {
                this._Sender = value;
            }
        }
        
        public string Receiver
        {
            get
            {
                return this._Receiver;
            }
            set
            {
                this._Receiver = value;
            }
        }
        
        public string Content
        {
            get
            {
                return this._Content;
            }
            set
            {
                this._Content = value;
            }
        }
        
        public System.Collections.Generic.Dictionary<string, object> ContentArgumentsIn
        {
            get
            {
                return this._ContentArgumentsIn;
            }
        }
        
        public System.Collections.Generic.Dictionary<string, object> ContentArgumentsOut
        {
            get
            {
                return this._ContentArgumentsOut;
            }
        }
        #endregion
        
        public enum Performative
        {
            
            AcceptProposal = 1,
            
            Agree = 2,
            
            Cancel = 3,
            
            CFP = 4,
            
            Confirm = 5,
            
            Disconfirm = 6,
            
            Failure = 7,
            
            Inform = 8,
            
            InformIf = 9,
            
            InformRef = 10,
            
            NotUnderstand = 11,
            
            Propose = 12,
            
            QueryIf = 13,
            
            QueryRef = 14,
            
            Refuse = 15,
            
            Request = 16,
            
            RequestWhen = 17,
            
            RequestWhenEver = 18,
            
            Subscribe = 19,
        }
    }
    
    public class AgentLog
    {
        
        static System.DateTime startTime;
        
        static System.DateTime endTime;
        
        public static void WriteToFile(ACLMessage message, string messageType)
        {
            string pathLofFile = "C:\\Users\\waleed\\Documents\\Visual Studio 2012\\Projects\\ItemShopAgentWeb\\ItemShopAg" +
                "entWeb\\AgentWatchLog\\\\AgentLog.txt";
            System.IO.FileStream writeFile = System.IO.File.Open(pathLofFile, FileMode.Append, FileAccess.Write, FileShare.Read);
            string text = "";
            if ((messageType == "S"))
            {
                text = message.Sender.ToString().TrimEnd() + " is sending message to " + message.Receiver.ToString().TrimEnd();
                System.Collections.Generic.List<string> ListIn = new System.Collections.Generic.List<string>(message.ContentArgumentsIn.Keys);
                text = (text + "\nCreating Message...");
                text = (text + "\nSaving Message Parameter...");
                for (int i = 0; (i < ListIn.Count); i = (i + 1))
                {
                    text = (text + " " + ListIn[i]);
                }
                text = (text 
                            + ("\nSaving Message Content Type..." + message.Act.ToString().TrimEnd()));
                text = (text 
                            + ("\nSaving Message Content Type..." + message.Content.TrimEnd()));
                text = (text 
                            + ("\n" 
                            + (message.Sender.TrimEnd() + " has sent the message and waiting for reply...")));
                startTime = DateTime.Now;
                text = (text + " " +startTime.ToShortTimeString());
            }
            if ((messageType == "R"))
            {
                text = message.Sender.ToString().TrimEnd() + " reply message to " + message.Receiver.ToString().TrimEnd() + " " + message.Act.ToString().TrimEnd() + " " + message.Content.ToString().TrimEnd();
                System.Collections.Generic.List<string> ListOut = new System.Collections.Generic.List<string>(message.ContentArgumentsOut.Keys);
                for (int i = 0; (i < ListOut.Count); i = (i + 1))
                {
                    text = (text + " " + ListOut[i]);
                }
                endTime = DateTime.Now;
                System.TimeSpan t = (startTime - endTime);
                text = (text + " " +endTime.ToShortTimeString() + " " + Math.Abs(t.Milliseconds) + "ms");
            }
            else
            {
                text = (text + messageType);
            }
            System.IO.FileStream file = writeFile;
            System.IO.StreamWriter sw = new System.IO.StreamWriter(file);
            sw.WriteLine(text);
            sw.Close();
        }
    }
    
    public class ItemStoreDBPath
    {
        
        public static string Path = "Data Source=.;Initial Catalog=ItemStoreDB;Integrated Security=True";
    }
    
    public class Validation
    {
        
        public static bool Validate(string t, string value)
        {
            bool IsCheck = false;
            int ce = 0;
            try
            {
                if ((t == "int"))
                {
                    int v = 0;
                    if ((int.TryParse(value, out v) == false))
                    {
                        ce = ce+1;
                    }
                }
                if ((t == "float"))
                {
                    float v;
                    if ((float.TryParse(value, out v) == false))
                    {
                        ce = ce+1;
                    }
                }
                if ((t == "datetime"))
                {
                    System.DateTime v = DateTime.Now;
                    if ((DateTime.TryParse(value, out v) == false))
                    {
                        ce = ce+1;
                    }
                }
                if ((t == "Letter"))
                {
                    int i;
                    for (i = 0; (i < value.Length); i = (i + 1))
                    {
                        if ((String.IsNullOrWhiteSpace(value[i].ToString()) == false))
                        {
                            if ((char.IsLetter(value[i]) == false))
                            {
                                ce = (ce + 1);
                            }
                        }
                    }
                }
                if ((t == "Digit"))
                {
                    int i;
                    for (i = 0; (i < value.Length); i = (i + 1))
                    {
                        if ((char.IsDigit(value[i]) == false))
                        {
                            if ((value[i].ToString() != "X"))
                            {
                                ce = (ce + 1);
                            }
                        }
                    }
                }
                if ((t == "StartLetterOrDigit"))
                {
                    if ((Char.IsLetter(value[0]) == false))
                    {
                        ce = ce+1;
                    }
                }
                if ((t == "LetterOrDigit"))
                {
                    System.Text.RegularExpressions.Regex r = new System.Text.RegularExpressions.Regex("[()#@!$%^&*<>?/\\[\\]]");
                    value = r.Replace(value, "");
                }
                if ((t == "Mail"))
                {
                    System.Net.Mail.MailAddress mail = new System.Net.Mail.MailAddress(value);
                }
            }
            catch (System.Exception )
            {
            }
            if ((ce > 0))
            {
                IsCheck = false;
            }
            else
            {
                IsCheck = true;
            }
            return IsCheck;
        }
    }
}
